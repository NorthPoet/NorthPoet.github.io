<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo-pro 插件测试</title>
      <link href="/posts/42793a86.html"/>
      <url>/posts/42793a86.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>支持本地化</p></blockquote><h2 id="写作流程"><a href="#写作流程" class="headerlink" title="写作流程"></a>写作流程</h2><ol><li>先在本地使用hexo-pro进行编写文章</li><li>然后再通过命令的方式进行部署到静态博客上面去</li></ol><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/wallhaven-rrw7oq.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式Web </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java复习</title>
      <link href="/posts/f7d3a65a.html"/>
      <url>/posts/f7d3a65a.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-：-Java开发入门"><a href="#第一章-：-Java开发入门" class="headerlink" title="第一章 ： Java开发入门"></a>第一章 ： Java开发入门</h2><ol><li>Java语言是一种面向对象的语言</li><li>Java语言的特点有： 面向对象 ， 跨平台性 ， 安全性 ，支持多线程和分布式</li><li>将.java源文件编译为.class文件的命令是： JavaC</li><li>Java程序的运行环境为 ： JRE</li><li><p>简述Java语言的特点</p><blockquote><p>简单性 ， 面向对象 ， 安全性 ， 跨平台性 ， 支持多线程 ， 分布性</p></blockquote></li><li><p>简述Java的运行机制</p><blockquote><p>Java程序运行时 ， 必须经过编译和运行两个步骤 ， 首先将后缀名为 .java的源文件进行编译 ， 生成后缀名为 .class 的字节码文件 ， 然后Java虚拟机将字节码文件进行解释执行 ，并将结果运行出来</p></blockquote></li><li><p>编写一个Hello World 程序</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="第二章-：-Java编程基础"><a href="#第二章-：-Java编程基础" class="headerlink" title="第二章 ： Java编程基础"></a>第二章 ： Java编程基础</h2><ol><li>Java中的常量有 ： 整形常量 ， 浮点数常量 ，字符常量 ， 字符串常来那个 ， 布尔常量 ， null常量</li><li>进制转换 （还未看）</li><li><p>变量的数据类型</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231218153955-n95axyq.png" alt="image"></p></li><li><p>变量的自动类型转换</p><ol><li>自动类型转换 (小的往大的转换)</li><li>强制类型转换</li></ol></li><li>Java中的运算符 ： 算术运算符 ， 赋值运算符 ， 比较运算符 ， 逻辑运算符</li><li><a href="siyuan://blocks/20230929073410-i2qr594">流程控制语句</a></li><li>数组的基本元素 ： 数组名称 ， 数组元素 ， 元素索引 ， 数据类型</li><li>Java程序代码必须放在一个类中 ， 类使用 Class 关键词定义</li><li>Java中的注释有3类 ， 分别是 单行注释 ， 多行注释 ， 文档注释</li><li>int类型所占的存储空间为 ： 4个字节</li><li>用于比较两个整数是否相等的运算符是 ： ==</li><li>数组是一个容器 ， 存储到数组中的每个元素都有自己的自动编号 ， 最小值为：0</li><li>String  不属于基本数据类型</li><li><p>简述Java 中的8中基本数据类型 ， 并说明每种数据类型所占的存储空间大小</p><blockquote><p>|数据类型|所占空间大小|<br>| ————————————| ——————————————-|<br>|byte 字节型|一个字节|<br>|short 短整型|2个字节|<br>|int 整形|4 个字节|<br>|long 长整型|8 个字节|<br>|float 单精度浮点型|4 个字节|<br>|double 双精度浮点型|8 个字节|<br>|char 字符型|2 个字节|<br>|booblean 型 表示逻辑值|true , false 分别占一个字节|</p></blockquote></li><li><p>简述跳转语句 break 与 continue 的作用和区别</p><blockquote><p>在Switch 条件语句和循环语句中都可以使用break语句 ， 当它出现在Switch 条件语句中时 ， 作用是终止某个case 并跳出swtich 结构 ， 当它出现在循环语句中 ， 作用是跳出循环语句 ， 执行循环后面的代码 ， continue 语句用在循环语句中 ， 它的作用是终止本次循环 ， 并执行下一次循环</p></blockquote></li><li><p>编程题</p><ol><li><p>编写程序 ，计算 1 + 3 + ….+ 99 的值 ， 要求如下：</p><ol><li>使用循环语句实现1\x7e99 的遍历</li><li><p>在遍历过程中 ，通过条件判断当前的数是否为奇数 ， 如果是就累加 ， 否则不加</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用do….while 循环语句计算正数5的阶乘</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum *= i;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt;= <span class="number">5</span>);</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="第三章-：面向对象-上"><a href="#第三章-：面向对象-上" class="headerlink" title="第三章 ：面向对象(上)"></a>第三章 ：面向对象(上)</h2><ol><li>面向对象的思想 ： 封装性 ， 继承性 ， 多态性</li><li><p>类的定义</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class 类名 &#123;</span><br><span class="line">成员变量;</span><br><span class="line">成员方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问控制权限</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231220102158-1s9pblr.png" alt="image"></p></li><li>一个类可以定义多个构造方法 ， 只要每个构造方法的 参数类型 或 参数个数 不同 ， 即可实现重载</li><li>封装就是隐藏对象的属性和实现细节 ，仅对外提供公有的方法</li><li>对于声明为 private , protected 及public 的类成员在类外部 ， 都不能访问</li><li><p>简答题：</p><ol><li><p>简述你对面向对象的三大特征的理解</p><blockquote><p>面向对象的特点主要可以概括为 封装性 ， 继承性和多态性</p><p>其中封装是面向对象核心思想 ， 将对象的属性和行为封装起来 ， 不需要让外界指导具体实现细节 ， 这就是封装的思想</p><p>继承性主要面熟的是类与类之间的关系 ， 通过继承 可以在无需重载编写原有类的情况下 ， 对原有类的功能进行扩展</p><p>多态性指的是在程序中允许出现重名现象 ， 它指在一个类中定义的</p><p>属性和方法被其他类继承后 ， 他们可以具有不同的数据类型或表现出不同的行为 ， 这使得同一个属性和方法在不同的类中具有不同的语义</p></blockquote></li><li><p>简述构造方法的特点</p><blockquote><ol><li>构造方法与类名相同</li><li>在构造方法名的前面没有返回值类型的声明</li><li>在构造方法中不能使用return 语句返回一个值</li></ol></blockquote></li></ol></li><li><p>编程题：</p><ol><li><p>某公司正在进行招聘工作 ， 被招聘人员需要填写个人信息 ，编写个人简历的封装类Resume , 并编写测试类进行测试 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.north.chapter03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resume</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Resume</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Resume</span><span class="params">(String name, String sex, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introdece</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + <span class="built_in">this</span>.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;性别：&quot;</span> + <span class="built_in">this</span>.getSex());</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄:&quot;</span> + <span class="built_in">this</span>.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.north.chapter03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resume</span> <span class="variable">resume</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resume</span>(<span class="string">&quot;李四&quot;</span> , <span class="string">&quot;男&quot;</span> , <span class="number">20</span>);</span><br><span class="line">        resume.introdece();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="第四章：面向对象-下"><a href="#第四章：面向对象-下" class="headerlink" title="第四章：面向对象(下)"></a>第四章：面向对象(下)</h2><ol><li>一个类如果要实现一个接口 ， 那么它就需要重写接口中定义的全部方法 ， 否则该类就必须定义成 抽象类</li><li>接口中定义的变量默认是 public static final 型 ， 且必须赋初值</li><li>java中的 instanceof 关键字可以判断一个对象是否为某个类(或接口) 的实例</li><li><p>简答题</p><ol><li><p>简述java中继承的概念以及使用继承的好处</p><blockquote><p>概念： 在java中 ， 类的继承是指在一个现有类的基础上构建一个新的类 ， 构建出来的新类被作子类 ， 现有类被作为父类 ， 子类会自动拥有父类所有可继承的属性和方法。</p><p>好处：继承性主要描述的是类与类之间的关系 ， 通过继承 ， 可以无需重新编写原有类的情况下 ， 对原有类的功能进行使用和扩展</p></blockquote></li><li><p>简述多态的作用</p><blockquote><p>java中的多态性能够提高代码的灵活性 ， 可维护性和可扩展性 ， 是的程序设计更符合面向对象的思想</p></blockquote></li><li><p>简述接口和抽象类的区别</p><blockquote><ol><li>接口只能定义抽象方法 ， 而抽象类可以定义抽象方法和非抽象方法</li><li>类可以实现多个接口 ， 但只能继承一个抽象类</li><li>接口中的成员默认是 public  , 抽象类中的成员可以有多种访问权限</li><li>抽象类可以有构造方法 ， 而接口不能有构造方法</li></ol></blockquote></li></ol></li></ol><p>‍</p><h2 id="第五章：-异常"><a href="#第五章：-异常" class="headerlink" title="第五章： 异常"></a>第五章： 异常</h2><ol><li>Java 中的异常是指Java程序在运行时可能出现的错误或非正常情况</li><li><p>Throwable 类的继承体系图</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231221172526-4vr5bcn.png" alt="image">​</p></li><li><p>RuntimeException 类及其子类用于表示运行时异常</p></li><li>异常分为两种 ， 分别是 运行时异常 和 编译时异常</li><li>自定义异常需要继承</li><li>Exception 类</li><li><p>简答题</p><ol><li><p>写出处理异常的5个关键字</p><blockquote><p>try , catch , finally , throw , throws</p></blockquote></li><li><p>简述 try .. catch 语句的异常处理流程并画出流程图</p><blockquote><p>程序通过try语句捕获可能出现的异常，如果try语句没有捕获到异常，则直接跳出try…catch语句块执行其他程序；如果在try语句中捕获到了异常，则程序会自动跳转到catch语句中找到匹配的异常类型进行相应的处理。如果try语句捕获到的异常与catch语句例的异常匹配，则先执行catch中的语句，最后执行其他程序语句。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231221174731-8n6gjcs.png" alt="image">​</p></blockquote></li><li><p>简述处理编译时异常的两种方式</p><blockquote><ol><li>使用try … catch 语句对异常进行捕获处理</li><li>使用throws 关键字声明抛出异常 ， 调用者对异常进行处理</li></ol></blockquote></li></ol></li></ol><h2 id="第六章：Java-API"><a href="#第六章：Java-API" class="headerlink" title="第六章：Java API"></a>第六章：Java API</h2><ol><li>API 指的是应用程序变成接口</li><li>在Java中定义3个类 ， 用来封装对字符串的操作 ， 分别是 String , StringBuffer , StringBuilder</li><li>java中用来获取String字符串长度的方法是 ： length();</li><li>Java中用于将日期格式或为字符串的类是 ： DateFormat</li><li>Java中用于产生随机数的类位于 java.util包中的Random</li><li>Pattern 类用于创建一个正则表达式 ， 也可以说创建一个匹配模式 ，它的构造方法是私有的 ， 不可以直接创建正则表达式</li><li><p>简答题：</p><ol><li><p>简述 String , StringBuffer 和 StringBuilder 三者的区别</p><blockquote><p>String类表示的字符串是常量，一旦创建后，内容和长度都是无法改变的。而StringBuilder和StringBuffer表示字符容器，其内容和长度可以随时修改。在操作字符串时，如果该字符串仅用于表示数据类型，则使用String类即可，但是如果需要对字符串中的字符进行增删操作，则使用StringBuffer与StringBuilder类。如果有大量字符串拼接操作，不要求线程安全的情况下，采用StringBuilder更高效。相反如果需要线程安全则需要使用StringBuffer。</p></blockquote></li><li><p>简述8中基本数据类型及其对应的包装类</p><p> |<strong>基本数据类型</strong>|<strong>对应的包装类</strong>|<br> | ————-| —————-|<br> |byte|Byte|<br> |char|Character|<br> |int|Integer|<br> |short|Short|<br> |long|Long|<br> |float|Float|<br> |double|Double|<br> |boolean|Boolean|</p></li></ol></li><li><p>编程题</p><ol><li><p>每次随机生成10个0~100的随机正整数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>计算从今天算起100天以后是几月几日 ， 并格式化成xxxx年x月x日的形式打印出来</p><p> 提示：</p><ol><li>调用Calendar类的add()方法计算100天以后得日期</li><li>调用Calendar类的getTime()方法返回Date类型的对象</li><li><p>教师用FULL格式的DateFormat对象 ， 调用format()方法格式化Date对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.DATE , <span class="number">100</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="type">DateFormat</span> <span class="variable">format</span> <span class="operator">=</span> DateFormat.getDateInstance(DateFormat.FULL);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> format.format(date);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="第七章：-集合"><a href="#第七章：-集合" class="headerlink" title="第七章： 集合"></a>第七章： 集合</h2><ol><li><p>集合的核心继承体系图</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231221194231-tpgiwrj.png" alt="image"></p></li><li>Collection 是所有单列集合的父接口</li><li><p>使用Iterator 遍历集合时 ， 首先需要调用 hashNext() 方法区判断是否存在下一个元素 ， 若存在下一个元素 ， 则调用 next() 方法取出该元素</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果要对TreeSet集合中的对象进行排序 ， 必须实现 Comparable 接口</p></li><li>ArrayList 内部封装了一个长度可变的 数组</li><li>ArrayList 集合查询元素的速度很快 ， 但是增删改查效率较低</li><li>List 集合的特点是元素有序并且可重复</li><li>Set集合的她点事元素无序并且不可重复</li><li><p>简答题</p><ol><li><p>简述集合List ， Set 和Map 的区别</p><blockquote><p>List的特点是元素有序、可重复。List接口的主要实现类有ArrayList和LinkedList。</p><p>Set的特点是元素无序、不可重复。Set接口的主要实现类有HashSet和TreeSet。Map的特点是存储的元素是键(Key)、值(Value)映射关系，元素都是成对出现的。Map接口的主要实现类有HashMap和TreeMap。</p></blockquote></li><li><p>为什么ArrayList 的增删改查操作比较慢 ， 而查找操作比较快</p><blockquote><p>由于ArrayList集合的底层是使用一个数组来保存元素，在增加或删除指定位置的元素时，会导致创建新的数组，效率比较低，因此不适合做大量的增删操作。但这种数组的结构允许程序通过索引的方式来访问元素，因此使用ArrayList集合查找元素很便捷。</p></blockquote></li></ol></li><li><p>编程题</p><ol><li><p>编写程序，向ArmsList集合中添加元素，然后遍历并输出这些元素。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>按照下列要求编写程序</p><ol><li>写一个Student类，包含name和age属性，提供有参构造方法。</li><li>在Snudent 类中，重写 toString()方法，输出age和name的值。</li><li><p>在Student类中，重写hashCode()和equals()方法。</p><ol><li>.hshCode()的返回值是name的哈希值与age的和。</li><li>.equals()判断对象的name和age是否相同，相同则返回true，不同则返回false。</li></ol></li><li><p>编写一个测试类，创建一个HashSet＜Student＞对象hs，向hs中添加多个sat对象，假设有两个Student对象相等。输出HashSet集合，观察Student对象是否添加成功。</p><p> <strong>Student类</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">             <span class="keyword">package</span> com.north.chapter07;</span><br><span class="line">             </span><br><span class="line">             <span class="keyword">import</span> java.util.*;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">             <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">private</span> String name;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">                     <span class="built_in">this</span>.age = age;</span><br><span class="line">                     <span class="built_in">this</span>.name = name;</span><br><span class="line">             </span><br><span class="line">                 &#125;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> age + <span class="string">&quot;:&quot;</span> + name;</span><br><span class="line">             </span><br><span class="line">                 &#125;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> name.hashCode() + age;</span><br><span class="line">             </span><br><span class="line">                 &#125;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">                     <span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line">                         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                     <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Student))</span><br><span class="line">                         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                     <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) obj;</span><br><span class="line">                     <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(stu.name) &amp;&amp; <span class="built_in">this</span>.age == stu.age;</span><br><span class="line">             </span><br><span class="line">                 &#125;</span><br><span class="line">             </span><br><span class="line">             &#125;</span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">## 第八章： 泛型</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 使用泛型的好处</span><br><span class="line"></span><br><span class="line">    &gt; <span class="number">1.</span> 提高类型的安全性</span><br><span class="line">    &gt; <span class="number">2.</span> 消除强制类型转换</span><br><span class="line">    &gt; <span class="number">3.</span> 提高代码的复用性</span><br><span class="line">    &gt; <span class="number">4.</span> 拥有更高的运行效率</span><br><span class="line">    &gt;</span><br><span class="line"><span class="number">2.</span> 泛型类</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>泛型接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">North</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>泛型方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问权限修饰符 <span class="keyword">static</span> <span class="keyword">final</span> &lt;类型形象&gt; 返回值类型 方法名 (形参列表) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>泛型使用 ? 表示 参数化</p></li><li>泛型可以用在类 ， 接口和方法的定义中 ，分别称为 泛型类 ， 泛型接口 和 泛型方法</li><li>在java程序中 ， 经常会有参数类型或返回值类型不确定的方法 ， 这种方法在java中统称为 泛型方法</li><li>泛型接口的实现类有两种定义方式 ， 一种是直接接口中明确给出泛型类型 ， 另一种是直接在 实现 后声明泛型</li><li>在实际应用中 ， 只有泛型类被使用时 ， 该类所属的类型才能确定</li><li><p>简答题</p><ol><li><p>简述泛型的有</p><blockquote><ol><li><p>提高类型的安全性。</p><p> 泛型的主要目标是提高Java程序的类型安全性，即可以通过泛型定义对变量类型进行限制，在对变量类型限制之后编译器可以更好的进行类型验证。</p></li><li><p>避免强制类型转换</p><p> 使用泛型的另一个好处是避免源代码中的许多强制类型转换。这使得代码可读性更高，并且减少出错机会。尽管减少强制类型转换可以降低使用泛型类代码的复杂度，但是声明泛型变量会带来相应的复杂操作。</p></li></ol></blockquote></li></ol></li><li><p>编程题</p><ol><li><p>按照下列提示编写一个泛型接口以及其实现类</p><ol><li><p>创建泛型接口Generic<T>,并创建抽象方法get(T t)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建实现类GenericImpl<T> , 并实现get(T t)方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericeImple</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generic</span>&lt;T&gt;  &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Received: &quot;</span> + t.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="第九章：-反射"><a href="#第九章：-反射" class="headerlink" title="第九章： 反射"></a>第九章： 反射</h2><ol><li>反射机制的优点是可以实现动态创建对象和编译</li><li>如果通过Class类实例化其他类的对象 ， 则可以使用 newInstance() 方法 ， 但是必须保证被实例化的类中存在一个无参构造方法</li><li>通过反射可以得到一个类中的所有方法 ， 需要用到 java.lang.reflect 包中的 Method 类</li><li>在反射操作中 ， 通过 getDeclaredFields() 方法可以去的本类中的全部属性</li><li>要取得一个类中的全部方法 ， 可以使用Class 类中的 getMethods() 方法</li><li><p>简答题</p><ol><li><p>简述反射机制</p><blockquote><p>Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以得到任意一个对象所属的类的信息，可以调用任意一个类的成员变量和方法，可以获取任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制</p></blockquote></li><li><p>简述实例化Class 对象的三种方式</p><blockquote><p>（1）根据类名获取：类名.class；</p><p>（2）根据对象获取：对象.getClass()；</p><p>（3）根据全限定类名获取：Class.forName(“全限定类名”)。</p></blockquote></li></ol></li></ol><h2 id="第十章：-I-O流"><a href="#第十章：-I-O流" class="headerlink" title="第十章： I/O流"></a>第十章： I/O流</h2><ol><li>Java中的IO流按照传输数据的不同可分为 字节流 和 字符流</li><li>java.io 包中可以用于从文件直接读取字符的类是 Reader</li><li>IO系统提供了两个带缓冲的字节流 ， 分别是 BufferedInputStream 和 BufferedOutputStream</li><li>在JDK中提供了两个可将字节流转换为字符流的类分别是 ： InputStreamReader 和 OutputStreamWriter</li><li>java.io.FileOutputStream 是 OutputStream 的子类 ， 它是操作文件的字节输出流</li><li>转换流实现了字节流和字符流的相互转换</li><li><p>简答题</p><ol><li><p>简述字符流与字节流的区别</p><blockquote><p>字节流的两个基类是InputStream和OutputStream，字符流的两个基类是Reader和Writer，它们都是Object类的直接子类，字节流是处理以8位字节为基本单位的字节流类；Reader和Writer类是专门处理16位字节的字符流类。</p></blockquote></li><li><p>简述InputStreamReader 类与 OutputStreamWriter类的作用</p><blockquote><p>InputStreamReader是Reader的子类，它可以将一个字节输入流转换成字符输入流，方便直接读取字符。OutputStreamWriter是Writer的子类，它可以将一个字节输出流转换成字符输出流，方便直接写入字符。</p></blockquote></li></ol></li></ol><h2 id="第十一章：JDBC"><a href="#第十一章：JDBC" class="headerlink" title="第十一章：JDBC"></a>第十一章：JDBC</h2><ol><li>JDBC 驱动程序管理器专门负责注册特定的JDBC驱动程序 ， 主要通过 java.sql.DriverManager 类实现的</li><li>在编写JDBC应用程序时 ， 必须要把制定数据库驱动程序或类库加载到 classpath 中</li><li>PreparedStatement 是Statement 的子接口 ， 用于执行 预编译 的SQL语句</li><li>创建Statement 对象的作用是 ： 执行SQL语句</li><li><p>简答题：</p><ol><li><p>简述JDBC编程的6个开发记录</p><blockquote><ol><li>加载并注册数据库驱动；</li><li>通过DriverManager获取数据库连接；</li><li>通过Connection对象获取Statement对象；</li><li>使用Statement执行SQL语句；</li><li>操作ResultSet结果集；</li><li>回收数据库资源。</li></ol></blockquote></li><li><p>什么是预编译</p><blockquote><p>所谓预编译,就是说当相同的SQL语句再次执行时,数据库只需使用缓冲区中的数据,而不需要对SQL语句再次编译,从而有效提高数据的访问效率。</p></blockquote></li></ol></li></ol><h2 id="第十二章：-多线程"><a href="#第十二章：-多线程" class="headerlink" title="第十二章： 多线程"></a>第十二章： 多线程</h2><ol><li>实现多线程的两种方式是继承 Thread 和 实现 Runnable 接口</li><li>线程的整个生命周期分为5个阶段 ， 分别是 新建状态 ， 就绪状态 ， 运行状态 ， 堵塞状态 和 死亡状态</li><li>在Thread 类中 ， 提供了 start() 方法用于启动新线程</li><li>执行 sleep() 方法 ， 可以让线程在规定的时间内休眠</li><li>同步代码块使用 synchronized 关键字修饰</li><li><p>简答题：</p><ol><li><p>简述创建多线程的两种方式</p><blockquote><p>一种是继承java.lang包下的Thread类，覆写Thread类的run()方法，在run()方法中实现运行在线程上的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><p>另一种就是实现java.lang.Runnable接口，同样是在run()方法中实现运行在线程上的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>简述同步代码块的作用</p><blockquote><p>同步代码块的作用是控制线程，保证同步代码块中只能有一个线程在运行，保证了多线程操作数据的安全性</p></blockquote></li></ol></li><li><p>编程题</p><ol><li><p>编写一个多线程程序 ， 模拟火车售票窗口的售票功能 ， 创建线程1 和 线程2 ， 通过这两个线程共同售出100张票</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketWindow</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">// 定义100张票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">String</span> <span class="variable">th_name</span> <span class="operator">=</span> th.getName();</span><br><span class="line">            System.out.println(th_name + <span class="string">&quot; 正在发售第 &quot;</span>  + num-- + <span class="string">&quot; 张票&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TicketWindow</span> <span class="variable">ticketWindow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindow</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketWindow , <span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketWindow , <span class="string">&quot;线程2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="第十三章-：-网络编程"><a href="#第十三章-：-网络编程" class="headerlink" title="第十三章 ： 网络编程"></a>第十三章 ： 网络编程</h2><ol><li>基于TCP/IP的网络草考模型被分为4层 ， 分别是 链路层 ， 网络层 ， 运输层 和应用层</li><li>在进行网络通信时 ， 传输层可以采用TCP ， 也可以采用UDP</li><li>在下载文件时 ，必须采用TCP</li><li>JDK提供了 DatagramSocket 类 ， 该类可以发送和接受数据包</li><li>在JDK中提供了两个用于实现TCP程序的类 ， 一个是 ServerSocket 类 ， 用于表示服务端 ， 另一个是Socket类 ， 用于表示客户端</li><li><p>简答题</p><ol><li><p>简述TCP通信与UDP通信的主要区别</p><blockquote><p>UDP通信与TCP通信的区别在于，UDP中只有发送端和接收端，不区分客户端与服务器端，计算机之间可以任意地发送数据；而TCP通信是严格区分客户端与服务器端的，在通信时，必须先由客户端去连接服务器端才能实现通信，服务器端不可以主动连接客户端，并且服务器端程序需要事先启动，等待客户端的连接。</p></blockquote></li><li><p>简述TCP中服务器端与客户端的连接过程</p><blockquote><p>在TCP连接中必须要明确客户端与服务器端，由客户端向服务器端发出连接请求，每次连接的创建都需要经过“三次握手”。第一次握手，客户端向服务器端发出连接请求，等待服务器确认；第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求；第三次握手，客户端再次向服务器端发送确认信息，确认连接。</p></blockquote></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java课程作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于独处</title>
      <link href="/posts/750cb0cc.html"/>
      <url>/posts/750cb0cc.html</url>
      
        <content type="html"><![CDATA[<p>你开始有一点抑郁的迹象了，是不是最近学习压力大，或者是与宿友同学的关系处理不太好，建议你不要总是把自己封闭在一个狭小的空间，多出去走走，也可以出去做做运动，或者是参加学校一些集体活动，或者去图书馆几本书看，心情会舒畅很多，孤独感也会自然而然消除了，如果你总是习惯性的回到宿舍躺在床上玩手机，久而久之你会对手机产生依赖，甚至网络上的一些错误的观念会直接影响你的思想，沉迷与短视频后，它会占用你大量的个人时间，一旦产生依赖，就是很难专注的学习，制定的学习计划也会沉迷网络难以执行下去，甚至会因为网络上一些错误的观念中途停止计划。还有就是你的身体，由于你习惯性躺在床上玩手机，沉迷于网络，久而久之你的身体素质会慢慢变差，身体开始会出现一些疾病，到后期的话你可能就需要经常去医院了。你的社交圈也会因为你经常封闭在一个空间里面无法拓展，你的思维能力与表达能力也会逐渐衰退。还有就是你认为二本不好，那你知不知道其实在中国，能够有拥有本科学历的比例其实并不高，绝大多人学历只有初中到大专的学历，你这个学历，你去那些知名的公司与政府单位可能不会受待见，但如果是去一些普通的工厂，你已经是算是高学历的人才，能够胜任技术工程师与办公室的文职工作，而不是去流水线打螺丝。还有就是你觉得二本不好，可能是别人给你灌输的观念，但如果你接受了这种观念，你的思想与行为会收到很大影响，思想会变得自卑，不思进取，行为也会变得缺乏动力，因为从心理上你已经定义了你自己是不行，你给自己贴上的标签，会很大程度影响日后的所有行动。不要小瞧心理对人的影响，往正面看他可以使一个人变得越来越上进，往负面看它也可以在无形中废掉一个人。抱怨是不会对现状有任何改变的，只会逐渐让你丧失斗志对生活失去希望，你唯有抱有一种永不服输的精神，你才会有那勇气，恒心，毅力去克服阻碍前进道路的所有困难。其实也没有什么好悲哀，如果是生活给你制造各种困难，那你应该想着如何解决这个困难，又或者是某些人给你制造了问题，你就要想如何去解决这个问题，当你能够凭借你的智慧把困难解决，那么在你前进道路上的阻碍就变少了，你的人生道路会越来越顺畅。甚至一些曾经的缺点也会因为经过改变后变成你的优点。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我在人间凑数的日子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的学习笔记</title>
      <link href="/posts/92d0de5b.html"/>
      <url>/posts/92d0de5b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git的简单介绍"><a href="#Git的简单介绍" class="headerlink" title="Git的简单介绍"></a>Git的简单介绍</h2><p>‍</p><blockquote><p>Git是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目</p></blockquote><p>‍</p><h2 id="Git的常用命令"><a href="#Git的常用命令" class="headerlink" title="Git的常用命令"></a>Git的常用命令</h2><div class="table-container"><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config —global user.name ‘用户名’</td><td>设置用户签名</td></tr><tr><td>git config —global user.email ‘邮箱’</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到缓存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git rest —hard 版本号</td><td>版本穿梭</td></tr><tr><td>git log</td><td>查看版本详细信息</td></tr></tbody></table></div><h2 id="Git的分支操作"><a href="#Git的分支操作" class="headerlink" title="Git的分支操作"></a>Git的分支操作</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231204092707-wduhj78.png" alt="image">​</p><p>‍</p><p><strong>什么事是分支</strong></p><blockquote><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）</p></blockquote><p>‍</p><p><strong>分支的好处</strong></p><blockquote><ul><li><p>同时并行推进多个功能开发，提高开发效率。</p></li><li><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</p></li></ul></blockquote><p>‍</p><h2 id="分支操作命令"><a href="#分支操作命令" class="headerlink" title="分支操作命令"></a>分支操作命令</h2><p>‍</p><div class="table-container"><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table></div><h3 id="冲突的产生和解决"><a href="#冲突的产生和解决" class="headerlink" title="冲突的产生和解决"></a>冲突的产生和解决</h3><p>冲突的产生原因：</p><ul><li>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容</li></ul><p>解决冲突：</p><ol><li><p>编辑有冲突的文件，删除特殊符号，决定要使用的内容</p><ol><li>特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD当前分支的代码=======合并过来的代码&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</li></ol></li></ol><h2 id="Gie团队协作机制"><a href="#Gie团队协作机制" class="headerlink" title="Gie团队协作机制"></a>Gie团队协作机制</h2><p><strong>团队内协作</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231210083125-rvhdytr.png" alt="image">​</p><p><strong>跨团队协作</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231210083141-3c07vsv.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7. 特殊SQL的执行</title>
      <link href="/posts/51361b40.html"/>
      <url>/posts/51361b40.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-模糊查询"><a href="#1-模糊查询" class="headerlink" title="1. 模糊查询"></a>1. 模糊查询</h1><p>‍</p><p>演示代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试模糊查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> mohu</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">testMohu</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;</span><br></pre></td></tr></table></figure><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; testMohu(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;testMohu&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--模糊查询的语句--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span></span><br><span class="line">select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h1 id="2-批量删除"><a href="#2-批量删除" class="headerlink" title="2. 批量删除"></a>2. 批量删除</h1><p>‍</p><p>演示代码 ：</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 批量删除</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h1 id="3-动态设置表名"><a href="#3-动态设置表名" class="headerlink" title="3. 动态设置表名"></a>3. 动态设置表名</h1><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态设置表名，查询所有的用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h1 id="4-添加功能获取自增的主键"><a href="#4-添加功能获取自增的主键" class="headerlink" title="4. 添加功能获取自增的主键"></a>4. 添加功能获取自增的主键</h1><p>‍</p><p>添加功能获取自增的主键 ——&gt; 获取受影响的行数</p><p>‍</p><p><strong>场景模拟：</strong></p><p><strong>t_clazz(clazz_id,clazz_name)</strong></p><p><strong>t_student(student_id,student_name,clazz_id)</strong></p><p><strong>1、添加班级信息</strong></p><p><strong>2、获取新添加的班级的id</strong></p><p><strong>3、为班级分配学生，即将某学的班级id修改为新添加的班级的id</strong></p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* useGeneratedKeys：设置使用自增的主键</span></span><br><span class="line"><span class="comment">* keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Java项目打包成exe可执行文件</title>
      <link href="/posts/8e1cab8e.html"/>
      <url>/posts/8e1cab8e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里将以 idea中项目打包成exe可执行文件为例</p></blockquote><p>‍</p><h2 id="所选工具"><a href="#所选工具" class="headerlink" title="所选工具"></a>所选工具</h2><blockquote><p>IDEA , JDK , exe4j</p></blockquote><p>‍</p><ul><li><a href="https://www.jetbrains.com/idea/">IDEA官网</a></li><li><a href="https://www.cnblogs.com/NorthPoet/p/16553157.html">JDK安装教程</a></li><li><a href="https://exe4j.apponic.com/download/">exe4j下载地址</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>首先确保该程序能够正常运行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118153539-os7aecx.png" alt="image">​</p><p>‍</p><blockquote><p>打包流程简述</p></blockquote><ul><li><p>把java项目打包成exe可执行文件简单来说只要两个步骤</p><ol><li>把java项目打包成jar包</li><li>使用exe4j把jar包加工成exe可执行文件</li></ol></li></ul><h2 id="打包流程"><a href="#打包流程" class="headerlink" title="打包流程"></a>打包流程</h2><blockquote><p>首先将Java项目打包成jar包</p></blockquote><p><strong>进入Project Structure</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118153836-dso6vvp.png" alt="image">​​</p><p>‍</p><p><strong>接下来按照如图所示创建一个module</strong></p><p>​​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118154256-l4654eu.png" alt="image">​​​​</p><p>‍</p><p><strong>下一步：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118154726-sc4dzqj.png" alt="image">​</p><p>‍</p><blockquote><p>设置完之后出现该页面 ， 然后点击OK就行</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118154823-2flippv.png" alt="image">​</p><p>‍</p><blockquote><p>准备生成jar包 ， 点击idea工具栏上的Build–&gt;Build Artifacts</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118155128-tysr5rg.png" alt="image">​​</p><p>‍</p><blockquote><p>点击完之后会有这样一个弹窗 ，随后点击Build就行</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118155251-bxjtwo5.png" alt="image">​​</p><p>‍</p><blockquote><p>之后就会生成一个jar包 ， 在classes里面</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118155358-vgf2e74.png" alt="image">​</p><p>‍</p><h2 id="使用exe4j将jar包加工成为exe文件"><a href="#使用exe4j将jar包加工成为exe文件" class="headerlink" title="使用exe4j将jar包加工成为exe文件"></a>使用exe4j将jar包加工成为exe文件</h2><blockquote><p>这里就不对exe4j做过多的解释了 ，跟着照做就行</p></blockquote><p>‍</p><p><strong>以管理员身份打开exe4j这个软件</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118155933-6ky4eyu.png" alt="image">​</p><p>‍</p><blockquote><p>选择要打包的类型，选择JAR in EXE mode，然后next</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118160647-wylv66h.png" alt="image">​</p><p>‍</p><blockquote><p>给要打包出来的程序文件起个名，再指定一下路径 ，设置完成之后点击next</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118161020-b72tbij-20231118162138-t5ds870.png" alt="image-20231118161020-b72tbij">​​</p><p>​​​</p><blockquote><p><strong>特别注意如果电脑是64位的需要去设置成64位 ， 设置完之后点next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118161449-k0wv0mk.png" alt="image">​</p><p>‍</p><blockquote><p>exe文件的格式选择 ， 选择之后点击next</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118161823-ptrmtur.png" alt="image">​</p><p>‍</p><blockquote><p>按下图添加jar包，选择项目启动的类，如果项目还有导入额外的jar包，也要进行添加</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118162443-9jl9gev.png" alt="image">​</p><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118162600-yc2l08p.png" alt="image">​</p><p>‍</p><blockquote><p>最后的界面是这个样子的 ， 然后点击next</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231130184755375.png" alt="image-20231130184755375"></p><p>‍</p><blockquote><p>设置jdk/jre的最高最低版本，运行项目时使用的环境顺序 , 设置完成之后 , 点击next</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118163016-08j5ak9.png" alt="image">​</p><p>‍</p><blockquote><p>然后就一直next ， 直至出现此页面</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118163243-jqnfdsa.png" alt="image">​​</p><p>‍</p><blockquote><p>最后点击Exit就大功告成了 ， 弹出的页面可以点击yes ， 也可以点击NO</p></blockquote><p>‍</p><h2 id="运行演示"><a href="#运行演示" class="headerlink" title="运行演示"></a>运行演示</h2><blockquote><p>完成上述步骤 ， 可以去查看是否生成exe文件</p></blockquote><p>可以看出 ， 已经生成了exe文件</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118163601-ff3pll0.png" alt="image">​</p><p>‍</p><blockquote><p>运行该exe ， 看是否能够运行成功</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118163653-vhwrogz.png" alt="image">​</p><p>‍</p><p>恭喜完成！</p><p>​​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/0172CA8B-20231118163837-wp1y3w9.gif" alt="0172CA8B">​</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java课程作业 </tag>
            
            <tag> 编程和环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. Mybatis获取参数值的两种方式</title>
      <link href="/posts/edd0080.html"/>
      <url>/posts/edd0080.html</url>
      
        <content type="html"><![CDATA[<p>‍</p><p><strong>MyBatis 获取参数值的两种方式：</strong>​ ==<strong>${} 和 #{}</strong>==</p><ul><li><strong>${}的本质就是字符串拼接，#{}的本质就是占位符赋值</strong></li><li><strong>${}使用字符串拼接的方式拼接 sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引</strong></li><li><strong>号；但是#{}使用占位符赋值的方式拼接 sql，此时为字符串类型或日期类型的字段进行赋值时，</strong></li><li><strong>可以自动添加单引号</strong></li></ul><p>‍</p><p> <strong>#{}：先编译 sql 语句，再给占位符传值，底层是 PreparedStatement 实现。可以防止 sql 注入，比较常用。</strong></p><p> <strong>${}：先进行 sql 语句拼接，然后再编译 sql 语句，底层是 Statement 实现。存在 sql 注入现象。只有在需要进行 sql 语句关键字拼接的情况下才会用到。</strong></p><p>‍</p><p>Mybatis 中的 <code>$&#123;&#125;</code>​ 和 <code>#&#123;&#125;</code>​ 都是用于 SQL 语句中参数的替代。</p><p><code>#&#123;&#125;</code>​ 使用的是预编译语句，用于将输入参数的值与 SQL 语句分开处理，防止 SQL 注入等安全问题，同时也有效的提高了 SQL 语句的查询性能。在 SQL 解析过程中，#{} 会将参数值进行一定的处理，比如转义特殊字符、处理成相应的数据类型等。</p><p><code>$ &#123;&#125;</code>​ 在 SQL 中是直接替换为参数的值，不做任何转义和修改。这种方式的优点是灵活性强，可以用于不同的场景，但是这种方式存在 SQL 注入的风险，因为输入的参数被直接拼接到 SQL 语句中，如果不充分防范，很容易被攻击者利用。</p><p>一般情况下，使用 <code>#&#123;&#125;</code>​ 是比较安全的方式，但是如果在某些特殊的情况下，确实需要使用 <code>$&#123;&#125;</code>​，比如在动态 SQL 中，将一些动态的 SQL 拼接到主 SQL 中。</p><p>综上所述，<code>#&#123;&#125;</code>​ 适用于大多情况下，比如查询、更新等；而 <code>$&#123;&#125;</code>​ 适用于某些特殊情况，比如动态 SQL，但是需要注意 SQL 注入的问题。</p><p>使用方式示例：</p><ul><li><code>#&#123;&#125;</code>:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; param = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">param.put(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;getUserById&quot;</span>, param);</span><br></pre></td></tr></table></figure><ul><li><code>$&#123;&#125;</code>:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态 SQL 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from user where</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">    name = &#x27;$&#123;name&#125;&#x27;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">    and age = &#x27;$&#123;age&#125;&#x27;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; param = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">param.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">param.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;getUserByCondition&quot;</span>, param);</span><br></pre></td></tr></table></figure><h1 id="1-单个字面量类型的参数"><a href="#1-单个字面量类型的参数" class="headerlink" title="1. 单个字面量类型的参数"></a>1. 单个字面量类型的参数</h1><p>‍</p><ul><li><strong>若 mapper 接口中的方法参数为单个的字面量类型</strong></li><li><strong>此时可以使用</strong>​<strong>**​ </strong>{}需要手动加单引号**</li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180743222-1781818984-20231130182106-k7tovi2.png" alt="image">​</p><p>‍</p><h1 id="2-多个字面量类型的参数"><a href="#2-多个字面量类型的参数" class="headerlink" title="2. 多个字面量类型的参数"></a>2. 多个字面量类型的参数</h1><p>‍</p><ul><li><strong>若 mapper 接口中的方法参数为多个时</strong></li><li><strong>此时 MyBatis 会自动将这些参数放在一个 map 集合中，以 arg0,arg1…为键，以参数为值；以</strong></li><li><strong>param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问 map 集合的键就可以获取相</strong></li><li><strong>对应的值，注意${}需要手动加单引号</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180743653-251118378-20231130182106-qv2mpuf.png" alt="image">​</p><p>‍</p><h1 id="3-map-集合类型的参数"><a href="#3-map-集合类型的参数" class="headerlink" title="3. map 集合类型的参数"></a>3. map 集合类型的参数</h1><p>‍</p><ul><li><strong>若 mapper 接口中的方法需要的参数为多个时，此时可以手动创建 map 集合，将这些数据放在 map 中</strong></li><li><strong>只需要通过</strong>​<strong>**​ </strong>{}需要手动加单引号**</li></ul><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180743999-1122494194-20231130182106-si9c5pv.png" alt="image">​</p><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180744331-821332920-20231130182106-dfwe3li.png" alt="image">​</p><p>‍</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLoginMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginMap(map);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h1 id="4-实体类类型的参数"><a href="#4-实体类类型的参数" class="headerlink" title="4. 实体类类型的参数"></a>4. 实体类类型的参数</h1><p>‍</p><p>若 mapper 接口中的方法参数为实体类对象时 ， 此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值</p><p>‍</p><p>注意 ：</p><ul><li>${} 需要手动添加单引号</li></ul><p>‍</p><p>==根据属性名获取属性值==</p><ul><li><p>这里的属性名指的是实体类当中<code>get后面的名字</code>​ , 就像 getAge 而这里的属性名值得就是 age , 大小写无所谓</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180744754-1403164100-20231130182106-4kwn5kc.png" alt="image">​</p></li></ul><p>‍</p><h1 id="5-使用-Param-标识参数"><a href="#5-使用-Param-标识参数" class="headerlink" title="5. 使用@Param 标识参数"></a>5. 使用@Param 标识参数</h1><p>‍</p><p><strong>可以通过@Param 注解标识 mapper 接口中的方法参数， 此时会将这些参数放在 map 集合中，以@Param 注解的 value 属性值为键，以参数为值；以 param1,param2…为键，以参数为值；只需要通过${}和#{}访问 map 集合的键就可以获取相对应的值</strong></p><p>‍</p><p><strong>注意${}需要手动加单引号</strong></p><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180745153-1248402056-20231130182106-pn8hprs.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6. Mybatis的各种查询功能</title>
      <link href="/posts/458f2701.html"/>
      <url>/posts/458f2701.html</url>
      
        <content type="html"><![CDATA[<h2 id="6-1、查询一个实体类对象"><a href="#6-1、查询一个实体类对象" class="headerlink" title="6.1、查询一个实体类对象"></a>6.1、查询一个实体类对象</h2><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-2、查询一个list集合"><a href="#6-2、查询一个list集合" class="headerlink" title="6.2、查询一个list集合"></a>6.2、查询一个list集合</h2><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p><strong>当查询的数据为多条时，不能使用实体类作为返回值，否则会抛出异常</strong></p><p>‍</p><p><strong>TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</strong></p><h2 id="6-3、查询单个数据"><a href="#6-3、查询单个数据" class="headerlink" title="6.3、查询单个数据"></a>6.3、查询单个数据</h2><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询用户的总记录数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 在MyBatis中，对于Java中常用的类型都设置了类型别名</span></span><br><span class="line"><span class="comment">* 例如： java.lang.Integer--&gt;int|integer</span></span><br><span class="line"><span class="comment">* 例如： int--&gt;_int|_integer</span></span><br><span class="line"><span class="comment">* 例如： Map--&gt;map,List--&gt;list</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">    select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-4、查询一条数据为map集合"><a href="#6-4、查询一条数据为map集合" class="headerlink" title="6.4、查询一条数据为map集合"></a>6.4、查询一条数据为map集合</h2><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果： &#123;password=123456, sex=男 , id=1, age=23, username=admin&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-5、查询多条数据为map集合"><a href="#6-5、查询多条数据为map集合" class="headerlink" title="6.5、查询多条数据为map集合"></a>6.5、查询多条数据为map集合</h2><h3 id="①方式一"><a href="#①方式一" class="headerlink" title="①方式一"></a>①方式一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此</span></span><br><span class="line"><span class="comment">时可以将这些map放在一个list集合中获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②方式二"><a href="#②方式二" class="headerlink" title="②方式二"></a>②方式二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并</span></span><br><span class="line"><span class="comment">且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的</span></span><br><span class="line"><span class="comment">map集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">    2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">    3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. Mybatis的增删改查(CRUD)</title>
      <link href="/posts/852e85aa.html"/>
      <url>/posts/852e85aa.html</url>
      
        <content type="html"><![CDATA[<p>​​</p><h2 id="1、新增"><a href="#1、新增" class="headerlink" title="1、新增"></a>1、新增</h2><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、删除"><a href="#2、删除" class="headerlink" title="2、删除"></a>2、删除</h2><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id = 7</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、修改"><a href="#3、修改" class="headerlink" title="3、修改"></a>3、修改</h2><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">    update t_user set username=&#x27;ybc&#x27;,password=&#x27;123&#x27; where id = 6</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、查询一个实体类对象"><a href="#4、查询一个实体类对象" class="headerlink" title="4、查询一个实体类对象"></a>4、查询一个实体类对象</h2><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、查询-list-集合"><a href="#5、查询-list-集合" class="headerlink" title="5、查询 list 集合"></a>5、查询 list 集合</h2><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p><strong>注意：</strong></p><ol><li><strong>查询的标签 select 必须设置属性 resultType 或 resultMap，用于设置实体类和数据库表的映射</strong></li><li><p><strong>关系</strong></p><ul><li><strong>resultType：自动映射，用于属性名和表中字段名一致的情况</strong></li><li><strong>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</strong></li></ul></li></ol><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 核心配置文件详解</title>
      <link href="/posts/f2f795cc.html"/>
      <url>/posts/f2f795cc.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.north.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;mapper resource=&quot;mappers/UserMapper.xml&quot;&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.north.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h1 id="1-configuration"><a href="#1-configuration" class="headerlink" title="1. configuration"></a>1. configuration</h1><p>‍</p><p>configuration : 根标签 ， 表示配置信息</p><p>‍</p><h1 id="2-environments"><a href="#2-environments" class="headerlink" title="2. environments"></a>2. environments</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604164922907-1234604158-20231130133524-ay6y1qe.png" alt="image">​</p><p>‍</p><ul><li><strong>environments : 配置多个连接数据库的环境 , 以 &quot;s&quot; 结尾表示复数 ， 也就是说 mybatis 的环境可以配置多个数据源</strong></li><li><strong>default 属性 ： 表示默认使用的环境 ， default 后面填写的是</strong>​<code>**environment **</code>​<strong>的 id , </strong>​<code>**default的值只需要和environment的id值一致即可**</code>​</li><li><p><strong>environment : 配置具体的环境(</strong>​<code>**主要包括 ： 事务管理器的配置 + 数据源的配置**</code>​ <strong>)</strong></p><ul><li><strong>id：表示连接数据库的环境的唯一标识，不能重复 , 该表示用在 environments 的 default 后面 ，用来指定默认环境的选择</strong></li></ul></li></ul><p>‍</p><ul><li><p><strong>transactionManager ： 配置事务管理器</strong></p><ul><li><p><strong>type 属性：指定事务管理器具体使用什么方式，可选值包括两个</strong></p><ul><li><strong>JDBC：使用 JDBC 原生的事务管理机制。底层原理：事务开启 conn.setAutoCommit(false); …处理业务…事务提交 conn.commit(); 执行 SQL 时，使用的是 JDBC 中原生的事务管理方式，事务的提交或回滚需要手动处理</strong></li><li><strong>MANAGED：交给其它容器来管理事务，比如 WebLogic、JBOSS 等。如果没有管理事务的容器，则没有事务。没有事务的含义：只要执行一条 DML 语句，则提交一次。</strong></li></ul></li></ul></li><li><p><strong>dataSource ： 指定数据源</strong></p><ul><li><p><strong>type : 设置数据源的类型 (</strong>​<code>**type=&quot;POOLED|UNPOOLED|JNDI&quot;**</code>​ <strong>)</strong></p><ul><li><strong>POOLED：表示使用数据库连接池缓存数据库连接</strong></li><li><strong>UNPOOLED：表示不使用数据库连接池</strong></li><li><strong>JNDI：表示使用上下文中的数据源</strong></li></ul></li></ul></li></ul><p>‍</p><ul><li><p><strong>property</strong></p><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>‍</p><h1 id="3-properties"><a href="#3-properties" class="headerlink" title="3. properties"></a>3. properties</h1><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入properties文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604164923447-1807619326-20231130133524-r1wt2dn.png" alt="image">​</p><p>‍</p><p><img src="assets/net-img-2942345-20230604164923824-192082376-20231130133524-113al8p.png" alt="image">​</p><p>‍</p><h1 id="4-typeAliases"><a href="#4-typeAliases" class="headerlink" title="4. typeAliases"></a>4. typeAliases</h1><p>‍</p><ul><li><strong>typeAlias：设置某个类型的别名</strong></li><li><p><strong>属性 ：</strong></p><ul><li><strong>type：设置需要设置别名的类型</strong></li><li><strong>alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名且不区分大小写</strong></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置类型别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">typeAlias：设置某个类型的别名</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名且不区分大小写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>‍</p><h1 id="5-mappers"><a href="#5-mappers" class="headerlink" title="5. mappers"></a>5. mappers</h1><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604164924218-1294231253-20231130133524-td0w73v.png" alt="image">​</p><p>‍</p><ul><li><strong>mappers : 引入映射文件 ， 在 mappers 标签中可以配置多个 SQL 映射文件的路径</strong></li><li><strong>mapper : 配置某个 sql 映射文件的路径</strong></li><li><p><strong>以包为单位引入映射文件的要求 ：</strong></p><ol><li><strong>mapper 接口所在的包要和映射文件所在的包一致</strong></li><li><strong>mapper 接口要和映射文件的名字一致</strong></li></ol></li></ul><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 搭建Mybatis</title>
      <link href="/posts/7105be24.html"/>
      <url>/posts/7105be24.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>==确认开发环境==</p><ul><li><p><strong>MySQL不同版本的注意事项</strong></p><p><strong>1、驱动类driver-class-name</strong></p><p><strong>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver</strong></p><p><strong>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</strong></p><p><strong>2、连接地址url</strong></p><p><strong>MySQL 5版本的url：</strong></p><p><strong>jdbc:mysql://localhost:3306/ssm</strong></p><p><strong>MySQL 8版本的url：</strong></p><p><strong>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</strong></p><p><strong>否则运行测试用例报告如下错误：</strong></p><p><strong>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or</strong></p><p><strong>represents more</strong></p></li></ul></li><li><p>==创建Maven工程==</p><ul><li>打包方式 ： jar</li><li>引入依赖</li></ul></li><li><p>==创建Mybatis的核心配置文件==</p><ul><li><p><strong>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring</strong></p><p><strong>之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</strong></p><p><strong>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</strong></p><p><strong>核心配置文件存放的位置是src/main/resources目录下</strong></p></li></ul></li><li><p>==创建mapper接口==</p><ul><li><p><strong>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要</strong></p><p><strong>提供实现类。</strong></p></li></ul></li><li><p>==创建Mybatis的映射文件==</p><ul><li><p><strong>1、映射文件的命名规则：</strong></p><p><strong>表所对应的实体类的类名+Mapper.xml</strong></p><p><strong>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</strong></p><p><strong>因此一个映射文件对应一个实体类，对应一张表的操作</strong></p><p><strong>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</strong></p><p><strong>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</strong></p><p><strong>2、 MyBatis中可以面向接口操作数据，要保证两个一致：</strong></p><p><strong>a&gt;mapper接口的全类名和映射文件的命名空间（namespace）保持一致</strong></p><p><strong>b&gt;mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</strong></p></li><li><p><strong>相关概念：ORM</strong>（<strong>O</strong>bject <strong>R</strong>elationship <strong>M</strong>apping）对象关系映射。</p><ul><li><strong>对象：Java的实体类对象</strong></li><li><strong>关系：关系型数据库</strong></li><li><strong>映射：二者之间的对应关系</strong></li></ul><p>|<strong>Java概念</strong>|<strong>数据库概念</strong>|<br>| —| —|<br>|<strong>类</strong>|<strong>表</strong>|<br>|<strong>属性</strong>|<strong>字段/列</strong>|<br>|<strong>对象</strong>|<strong>记录/行</strong>|</p></li></ul></li><li><p>==通过junit测试功能==</p><ul><li><strong>SqlSession：代表Java程序和**</strong>数据库<strong>之间的</strong>会话**。（HttpSession是Java程序和浏览器之间的会话）</li><li><strong>SqlSessionFactory：是“生产”SqlSession的“工厂”。</strong></li><li><p><strong>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的</strong></p><p><strong>相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line"><span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span></span><br><span class="line">映射文件中的SQL标签，并执行标签中的SQL语句</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line"><span class="comment">//sqlSession.commit();</span></span><br><span class="line">System.out.println(<span class="string">&quot;结果：&quot;</span>+result);</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>‍</p><ol><li><p>==加入log4j日志功能==</p><ul><li><strong>①加入依赖</strong></li><li><p><strong>②加入log4j的配置文件</strong></p><p><strong>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</strong></p></li><li><p><strong>日志的级别：</strong></p><p><strong>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</strong></p><p><strong>从左到右打印的内容越来越详细</strong></p></li></ul></li></ol><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. Mybatis 简介</title>
      <link href="/posts/4e6d3c3b.html"/>
      <url>/posts/4e6d3c3b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mybatis历史"><a href="#1-Mybatis历史" class="headerlink" title="1. Mybatis历史"></a>1. Mybatis历史</h1><p><strong>MyBatis最初是Apache的一个开源项目iBatis</strong>, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github。</p><p><strong>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）。</strong></p><p>‍</p><h1 id="2-MyBatis特性"><a href="#2-MyBatis特性" class="headerlink" title="2. MyBatis特性"></a>2. MyBatis特性</h1><p>‍</p><p><strong>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</strong></p><p><strong>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</strong></p><p><strong>3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java</strong></p><p><strong>Objects，普通的Java对象）映射成数据库中的记录</strong></p><p><strong>4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</strong></p><p>‍</p><h1 id="3-和其它持久化层技术对比"><a href="#3-和其它持久化层技术对比" class="headerlink" title="3. 和其它持久化层技术对比"></a>3. 和其它持久化层技术对比</h1><p>‍</p><ul><li><p><strong>JDBC</strong></p><ul><li><strong>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</strong></li><li><strong>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</strong></li><li><strong>代码冗长，开发效率低</strong></li></ul></li><li><p><strong>Hibernate 和 JPA</strong></p><ul><li><strong>操作简便，开发效率高</strong></li><li><strong>程序中的长难复杂 SQL 需要绕过框架</strong></li><li><strong>内部自动生产的 SQL，不容易做特殊优化</strong></li><li><strong>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</strong></li><li><strong>反射操作太多，导致数据库性能下降</strong></li></ul></li><li><p><strong>MyBatis</strong></p><ul><li><strong>轻量级，性能出色</strong></li><li><strong>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</strong></li><li><strong>开发效率稍逊于HIbernate，但是完全能够接受</strong></li></ul></li></ul><p>‍</p><h1 id="4-三层架构"><a href="#4-三层架构" class="headerlink" title="4. 三层架构"></a>4. 三层架构</h1><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604134708948-2091935458-20231130122208-yx7xbcg.png" alt="image">​</p><p>‍</p><ul><li><strong>表现层（UI）：直接跟前端打交互（一是接收前端ajax请求，二是返回json数据给前端）</strong></li><li><strong>业务逻辑层（BLL）：一是处理表现层转发过来的前端请求（也就是具体业务），二是将从持久层获取的数据返回到表现层。</strong></li><li><strong>数据访问层（DAL）：直接操作数据库完成CRUD，并将获得的数据返回到上一层（也就是业务逻辑层）。</strong></li><li><p><strong>Java持久层框架：</strong></p><ul><li><strong>MyBatis</strong></li><li><strong>Hibernate（实现了JPA规范）</strong></li><li><strong>jOOQ</strong></li><li><strong>Guzz</strong></li><li><strong>Spring Data（实现了JPA规范）</strong></li><li><strong>ActiveJDBC</strong></li><li><strong>……</strong></li></ul></li></ul><h1 id="5-ORM：-对象关系映射"><a href="#5-ORM：-对象关系映射" class="headerlink" title="5. ORM： 对象关系映射"></a>5. ORM： <strong>对象关系映射</strong></h1><p>‍</p><ul><li><strong>O（Object）：Java虚拟机中的Java对象</strong></li><li><strong>R（Relational）：关系型数据库</strong></li><li><strong>M（Mapping）：将Java虚拟机中的Java对象映射到数据库表中一行记录，或是将数据库表中一行记录映射成Java虚拟机中的一个Java对象。</strong></li><li><p><strong>ORM图示</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604134708426-1388618453-20231130122208-rfy5gtt.png" alt="image">​</p></li><li><strong>MyBatis属于半自动化ORM框架。</strong></li><li><strong>Hibernate属于全自动化的ORM框架。</strong></li></ul><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot基础篇</title>
      <link href="/posts/18bf100b.html"/>
      <url>/posts/18bf100b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-初始SpringBoot"><a href="#1-初始SpringBoot" class="headerlink" title="1. 初始SpringBoot"></a>1. 初始SpringBoot</h1><p>SpringBoot程序的核心功能及优点：</p><ul><li><p>起步依赖（简化依赖配置）</p><ul><li>依赖配置的书写简化就是靠这个起步依赖达成的</li></ul></li><li><p>自动配置（简化常用工程相关配置）</p><ul><li>配置过于繁琐，使用自动配置就可以做响应的简化，但是内部还是很复杂的</li></ul></li><li><p>辅助功能（内置服务器，……）</p><ul><li>除了上面的功能，其实SpringBoot程序还有其他的一些优势，比如我们没有配置Tomcat服务器，但是能正常运行，这是SpringBoot程序的一个可以感知到的功能，也是SpringBoot的辅助功能之一。一个辅助功能都能做的这么6，太牛了</li></ul></li></ul><p>SpringBoot 简化主要体现在四个方面</p><ul><li>parent</li><li>starter</li><li>引导类</li><li>内嵌tomcat</li></ul><h2 id="1-1-parent"><a href="#1-1-parent" class="headerlink" title="1.1 parent"></a>1.1 parent</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>parent</strong>仅仅帮我们进行版本管理，它不负责帮你导入坐标，说白了用什么还是你自己定，只不过版本不需要你管理了。整体上来说，<strong>使用parent可以帮助开发者进行版本的统一管理</strong></p><blockquote><p><strong>关注</strong>：parent定义出来以后，并不是直接使用的，仅仅给了开发者一个说明书，但是并没有实际使用，这个一定要确认清楚</p></blockquote><h2 id="1-2-starter"><a href="#1-2-starter" class="headerlink" title="1.2  starter"></a>1.2  starter</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>starter定义了使用某种技术时对于依赖的固定搭配格式，也是一种最佳解决方案，<strong>使用starter可以帮助开发者减少依赖配置</strong></p></blockquote><p><strong>starter与parent的区别</strong><br>朦朦胧胧中感觉starter与parent好像都是帮助我们简化配置的，但是功能又不一样，梳理一下。<br><strong>starter</strong>是一个坐标中定了若干个坐标，以前写多个的，现在写一个，<strong>是用来减少依赖配置的书写量的</strong><br><strong>parent</strong>是定义了几百个依赖版本号，以前写依赖需要自己手工控制版本，现在由SpringBoot统一管理，这样就不存在版本冲突了，<strong>是用来减少依赖冲突的</strong></p><p><strong>实际开发应用方式</strong></p><ul><li><p>实际开发中如果需要用什么技术，先去找有没有这个技术对应的starter</p><ul><li><code>如果有对应的starter，直接写starter，而且无需指定版本，版本由parent提供</code>​</li><li>如果没有对应的starter，手写坐标即可</li></ul></li><li><p>实际开发中如果发现坐标出现了冲突现象，确认你要使用的可行的版本号，使用手工书写的方式添加对应依赖，覆盖SpringBoot提供给我们的配置管理</p><ul><li>方式一：直接写坐标</li><li>方式二：覆盖<code>&lt;properties&gt;</code>​中定义的版本号，就是下面这堆东西了，哪个冲突了覆盖哪个就OK了</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.16.3<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.19.0<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-codec.version</span>&gt;</span>1.15<span class="tag">&lt;/<span class="name">commons-codec.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-dbcp2.version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">commons-dbcp2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-lang3.version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">commons-lang3.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-pool.version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">commons-pool.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-pool2.version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">commons-pool2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2.version</span>&gt;</span>1.4.200<span class="tag">&lt;/<span class="name">h2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.4.32.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hibernate-validator.version</span>&gt;</span>6.2.0.Final<span class="tag">&lt;/<span class="name">hibernate-validator.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jackson-bom.version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">jackson-bom.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javax-jms.version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">javax-jms.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javax-json.version</span>&gt;</span>1.1.4<span class="tag">&lt;/<span class="name">javax-json.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javax-websocket.version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">javax-websocket.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jetty-el.version</span>&gt;</span>9.0.48<span class="tag">&lt;/<span class="name">jetty-el.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-引用类"><a href="#1-3-引用类" class="headerlink" title="1.3 引用类"></a>1.3 引用类</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230804182941317-719648346-20231129120540-bz7vzih.png" alt="">​</p><p>SpringBoot本身是为了加速Spring程序的开发的，而Spring程序运行的基础是需要创建自己的Spring容器对象（IoC容器）并将所有的对象交给Spring的容器管理，也就是一个一个的Bean。那还了SpringBoot加速开发Spring程序，这个容器还在吗？这个疑问不用说，一定在。当前这个类运行后就会产生一个Spring容器对象，并且可以将这个对象保存起来，通过容器对象直接操作Bean。</p><blockquote><p>其实SpringBoot程序启动还是创建了一个Spring容器对象。这个类在SpringBoot程序中是所有功能的入口，称这个类为<strong>引导类</strong>。</p></blockquote><p>作为一个引导类最典型的特征就是当前类上方声明了一个注解<code>@SpringBootApplication</code>​</p><h2 id="1-4-内嵌tomcat"><a href="#1-4-内嵌tomcat" class="headerlink" title="1.4 内嵌tomcat"></a>1.4 内嵌tomcat</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>内嵌Tomcat定义位置</strong></p><p>谁把tomcat引入到程序中的？<br>spring-boot-starter-web中的spring-boot-starter-tomcat做的。</p><p><strong>内嵌Tomcat运行原理</strong></p><p>Tomcat服务器是一款用<code>java语言</code>​开发的一款软件<br>其中Spring容器是用来管理对象的 ， tomcat服务器运行其实是以对象的形式在Spring容器中运行的</p><p><strong>更换内嵌Tomcat</strong></p><blockquote><p>用什么服务器就引入相对应的坐标</p></blockquote><h1 id="2-SpringBoot-基础配置"><a href="#2-SpringBoot-基础配置" class="headerlink" title="2. SpringBoot 基础配置"></a>2. SpringBoot 基础配置</h1><h2 id="2-1-属性配置"><a href="#2-1-属性配置" class="headerlink" title="2.1 属性配置"></a>2.1 属性配置</h2><blockquote><p>properties格式的文件书写规范是<code>key=value</code>​</p></blockquote><ol><li>SpringBoot程序可以在application.properties文件中进行属性配置</li><li>application.properties文件中只要输入要配置的属性关键字就可以根据提示进行设置</li><li>SpringBoot将配置信息集中在一个文件中写，不管你是服务器的配置，还是数据库的配置，总之都写在一起，逃离一个项目十几种配置文件格式的尴尬局面</li></ol><p>打开SpringBoot的官网，找到SpringBoot官方文档，打开查看附录中的Application Properties就可以获取到对应的配置项了，网址奉上：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties</a></p><p>其中</p><ol><li>SpringBoot中导入对应starter后，提供对应配置属性</li><li>书写SpringBoot配置采用关键字+提示形式书写</li></ol><h2 id="2-2-配置文件分类"><a href="#2-2-配置文件分类" class="headerlink" title="2.2 配置文件分类"></a>2.2 配置文件分类</h2><ul><li>properties格式</li><li>yml格式</li><li>yaml格式</li></ul><h2 id="2-3-配置文件的优先级"><a href="#2-3-配置文件的优先级" class="headerlink" title="2.3 配置文件的优先级"></a>2.3 配置文件的优先级</h2><blockquote><p>application.properties  &gt;  application.yml  &gt;  application.yaml</p></blockquote><ol><li>配置文件间的加载优先级 properties（最高）&gt; yml &gt; yaml（最低）</li><li>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留</li></ol><h2 id="2-4-yaml-文件"><a href="#2-4-yaml-文件" class="headerlink" title="2.4 yaml 文件"></a>2.4 yaml 文件</h2><p>YAML（YAML Ain’t Markup Language），一种数据序列化格式。具有容易阅读、容易与脚本语言交互、以数据为核心，重数据轻格式的特点。常见的文件扩展名有两种：</p><ul><li>.yml格式（主流）</li><li>.yaml格式</li></ul><p>对于文件自身在书写时，具有严格的语法格式要求，具体如下：</p><ol><li>大小写敏感</li><li>属性层级关系使用多行描述，<strong>每行结尾使用冒号结束</strong></li><li>使用缩进表示层级关系，同层级左侧对齐，<code>只允许使用空格</code>​（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li><code>#号</code>​ 表示注释</li></ol><blockquote><p>核心的一条规则要记住，<strong>数据前面要加空格与冒号隔开</strong></p></blockquote><h2 id="2-4-yaml数据读取"><a href="#2-4-yaml数据读取" class="headerlink" title="2.4 yaml数据读取"></a>2.4 yaml数据读取</h2><h3 id="读取单一数据"><a href="#读取单一数据" class="headerlink" title="读取单一数据"></a>读取单一数据</h3><blockquote><p>yaml中保存的单个数据，可以使用Spring中的注解直接读取，使用@Value可以读取单个数据，属性名引用方式： <strong>${一级属性名.二级属性名……}</strong></p></blockquote><ol><li>使用@Value配合SpEL读取单个数据</li><li>如果数据存在多层级，依次书写层级名称即可</li></ol><h3 id="读取全部数据"><a href="#读取全部数据" class="headerlink" title="读取全部数据"></a>读取全部数据</h3><blockquote><p>读取单一数据可以解决读取数据的问题，但是如果定义的数据量过大，这么一个一个书写肯定会累死人的，SpringBoot提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫做Environment，使用自动装配注解可以将所有的yaml数据封装到这个对象中</p></blockquote><ol><li>使用Environment对象封装全部配置信息</li><li>使用@Autowired自动装配数据到Environment对象中</li></ol><h3 id="读取对象数据"><a href="#读取对象数据" class="headerlink" title="读取对象数据"></a>读取对象数据</h3><ol><li>使用@ConfigurationProperties注解绑定配置信息到封装类中</li><li>封装类需要定义为Spring管理的bean，否则无法进行属性注入</li></ol><h3 id="yaml文件中的数据引用"><a href="#yaml文件中的数据引用" class="headerlink" title="yaml文件中的数据引用"></a>yaml文件中的数据引用</h3><ol><li>在配置文件中可以使用${属性名}方式引用属性值</li><li>如果属性中出现特殊字符，可以使用双引号包裹起来作为字符解析</li></ol><h1 id="3-基于SpringBoot实现SSMP整合"><a href="#3-基于SpringBoot实现SSMP整合" class="headerlink" title="3. 基于SpringBoot实现SSMP整合"></a>3. 基于SpringBoot实现SSMP整合</h1><blockquote><p>整合的核心：<br>1.导入对应技术的starter坐标<br>2.根据对应技术的要求做配置</p></blockquote><h2 id="3-1-整合JUnit"><a href="#3-1-整合JUnit" class="headerlink" title="3.1 整合JUnit"></a>3.1 整合JUnit</h2><blockquote><p>使用SpringBoot整合JUnit需要保障导入test对应的starter，不过初始化项目时此项是默认导入的</p></blockquote><ol><li>导入测试对应的starter</li><li>测试类使用@SpringBootTest修饰</li><li>使用自动装配的形式添加要测试的对象</li><li>测试类如果存在于引导类所在包或子包中无需指定引导类</li><li>测试类如果不存在于引导类所在的包或子包中需要通过classes属性指定引导类</li></ol><h2 id="3-2-整合Mybatis"><a href="#3-2-整合Mybatis" class="headerlink" title="3.2 整合Mybatis"></a>3.2 整合Mybatis</h2><ol><li>整合操作需要勾选MyBatis技术，也就是导入MyBatis对应的starter</li><li>数据库连接相关信息转换成配置</li><li>数据库SQL映射需要添加@Mapper被容器识别到</li><li><p>MySQL 8.X驱动强制要求设置时区</p><ul><li>修改url，添加serverTimezone设定</li><li>修改MySQL数据库配置</li></ul></li><li>驱动类过时，提醒更换为com.mysql.cj.jdbc.Driver</li></ol><p>配置信息的书写：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.配置相关信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h2 id="3-3-整合MyBatis-Plus"><a href="#3-3-整合MyBatis-Plus" class="headerlink" title="3.3  整合MyBatis-Plus"></a>3.3  整合MyBatis-Plus</h2><ol><li>手工添加MyBatis-Plus对应的starter</li><li>数据层接口使用BaseMapper简化开发</li><li>需要使用的第三方技术无法通过勾选确定时，需要手工添加坐标</li></ol><hr><p>MyBatis-Plus对应的坐标为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>配置文件信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.配置相关信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><hr><p>设置所有表名的通用前缀名</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span><span class="comment">#设置所有表的通用前缀名称为tbl_</span></span><br></pre></td></tr></table></figure><h2 id="3-4-整合Druid"><a href="#3-4-整合Druid" class="headerlink" title="3.4 整合Druid"></a>3.4 整合Druid</h2><ol><li>整合Druid需要导入Druid对应的starter</li><li>根据Druid提供的配置方式进行配置</li><li><p>整合第三方技术通用方式</p><ul><li>导入对应的starter</li><li>根据提供的配置格式，配置非默认值对应的配置项</li></ul></li></ol><hr><p>Druid对应坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 计算机系统概述</title>
      <link href="/posts/31c36041.html"/>
      <url>/posts/31c36041.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-操作系统的概念-功能和目标"><a href="#1-操作系统的概念-功能和目标" class="headerlink" title="1. 操作系统的概念(功能和目标)"></a>1. 操作系统的概念(功能和目标)</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107151108155-20231108091632-8ldvv8p.png" alt="">​</p><h2 id="1-1-操作系统的概念"><a href="#1-1-操作系统的概念" class="headerlink" title="1.1 操作系统的概念"></a>1.1 操作系统的概念</h2><ul><li>操作系统负责管理协调硬件，软件等计算机资源的工作</li><li>操作系统为上层用户，应用程序提供简单易用的服务</li><li>操作系统是一种系统软件</li></ul><h2 id="1-2-操作系统的功能和目标"><a href="#1-2-操作系统的功能和目标" class="headerlink" title="1.2 操作系统的功能和目标"></a>1.2 操作系统的功能和目标</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107151034434-20231108091632-z0lxkrm.png" alt=""></p><h1 id="2-操作系统的四个特征"><a href="#2-操作系统的四个特征" class="headerlink" title="2. 操作系统的四个特征"></a>2. 操作系统的四个特征</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107153012994-20231108091632-zcjnizd.png" alt=""></p><ul><li>并发和共享最基本的两个性质</li><li>并发和共享互为存在条件</li><li>没有并发和共享，就谈不上虚拟和异步</li></ul><p><strong>注意（重要考点）：</strong></p><ul><li>单核CPU同一时刻只能执行一个程序，各个程序只能并发地执行</li><li>多核CPU同一时刻可以同时执行多个程序，多个程序可以并行地执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107152911204-20231108091632-x2vxs25.png" alt=""></p><h1 id="3-操作系统的发展与分类"><a href="#3-操作系统的发展与分类" class="headerlink" title="3. 操作系统的发展与分类"></a>3. 操作系统的发展与分类</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107151307984-20231108091632-w4gs7cm.png" alt=""></p><h2 id="3-1-常考的三种操作系统对比"><a href="#3-1-常考的三种操作系统对比" class="headerlink" title="3.1 常考的三种操作系统对比"></a>3.1 常考的三种操作系统对比</h2><div class="table-container"><table><thead><tr><th>批操作系统</th><th>定义</th></tr></thead><tbody><tr><td>批操作系统</td><td>脱机使⽤计算机；作业是批处理的；系统内多道程序并发执⾏；交互能⼒差；</td></tr><tr><td>分时操作系统</td><td>多个⽤户同时使⽤计算机；⼈机交互强；具有每个⽤户独⽴使⽤计算机的独占性；系统响应及时</td></tr><tr><td>实时操作系统</td><td>能对控制对象做出及时反应；可靠性⾼；响应及时；但资源利⽤率低</td></tr></tbody></table></div><h2 id="3-2-其他操作系统对比"><a href="#3-2-其他操作系统对比" class="headerlink" title="3.2 其他操作系统对比"></a>3.2 其他操作系统对比</h2><ul><li>Unix系统是多用户，多任务操作系统，属于分时操作系统<br><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107152332951-20231108091632-ccg00l2.png" alt=""></li></ul><h1 id="4-操作系统的运行机制"><a href="#4-操作系统的运行机制" class="headerlink" title="4. 操作系统的运行机制"></a>4. 操作系统的运行机制</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107160000944-20231108091632-y03krsv.png" alt=""></p><h2 id="4-1-程序运行的原理"><a href="#4-1-程序运行的原理" class="headerlink" title="4.1 程序运行的原理"></a>4.1 程序运行的原理</h2><ul><li>高级语言编写代码，然后转换为机器指令</li><li>程序运行的过程就是CPU执行指令的过程</li></ul><h2 id="4-2-两种程序"><a href="#4-2-两种程序" class="headerlink" title="4.2 两种程序"></a>4.2 两种程序</h2><ol><li>内核程序</li><li>应用程序</li></ol><h2 id="4-3-🐳两种指令"><a href="#4-3-🐳两种指令" class="headerlink" title="4.3 🐳两种指令"></a>4.3 🐳两种指令</h2><ol><li>特权指令 ： 指不允许用户直接使用的指令<ul><li>对I/O设备操作指令</li><li>存取特殊寄存器的指令</li><li>有关访问程序状态的指令</li><li>置中断指令</li><li>关中断指令</li><li>清内存指令</li><li>置时钟指令</li></ul></li><li>非特权指令：允许用户直接使用的指令 ， 不能直接访问系统中的软硬件资源 ，只限于访问用户的地址空间<ul><li>访管/trap指令</li></ul></li></ol><h2 id="4-4-🦋两种处理器状态"><a href="#4-4-🦋两种处理器状态" class="headerlink" title="4.4 🦋两种处理器状态"></a>4.4 🦋两种处理器状态</h2><ul><li><strong>核心态【管态】</strong><ul><li>只能在核心态运行的指令和程序：<ul><li>时钟管理相关的指令【置时钟指令】</li><li>中断机制相关的指令【时钟中断程序】</li><li>原语相关的指令</li><li>系统控制的数据结构与处理【进程调度程序】【进程切换】【缺页处理程序】【系统调用命令】</li></ul></li></ul></li><li><strong>用户态【目态】</strong><ul><li>在用户态运行的指令和程序/发生的事件：<ul><li>命令解释程序【属于命令接口，面向用户】</li><li>访管/Trap指令，跳转指令，压栈指令</li><li>广义指令(系统调用)的调用</li><li>外部中断，缺页</li></ul></li></ul></li></ul><h2 id="4-5-🚀如何变态"><a href="#4-5-🚀如何变态" class="headerlink" title="4.5 🚀如何变态"></a>4.5 🚀如何变态</h2><ul><li>内核态 ——&gt; 用户态 ： 发⽣在中断返回⽤户程序时，需要⼀条修改PSW(程序状态字)的特权命令</li><li>用户态 ——&gt; 内核态 ：发生在中断时，通过硬件完成</li></ul><h2 id="4-6-为什么要区别核心态和用户态"><a href="#4-6-为什么要区别核心态和用户态" class="headerlink" title="4.6 为什么要区别核心态和用户态"></a>4.6 为什么要区别核心态和用户态</h2><ul><li>为了保护系统程序</li></ul><h2 id="4-7-操作系统的内核"><a href="#4-7-操作系统的内核" class="headerlink" title="4.7 操作系统的内核"></a>4.7 操作系统的内核</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107160226845-20231108091632-9n0wgzw.png" alt=""></p><p><code>内核是计算机上配置的底层软件，是操作系统最基本、最核心的部分。 实现操作系统内核功能的那些程序就是内核程序。</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107163911129-20231108091632-wtxeaw3.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107163933101-20231108091632-zp9hhzc.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107163944455-20231108091632-aufktij.png" alt=""></p><h2 id="4-8-内核的功能"><a href="#4-8-内核的功能" class="headerlink" title="4.8 内核的功能"></a>4.8 内核的功能</h2><ul><li>时钟管理：实现计时功能</li><li>中断处理：负责实现中断机制</li><li>设备管理：完成设备的请求和释放，以及设备启动等功能</li><li>文件管理：完成文件的读，写，创建和删除等功能</li><li>进程管理：完成进程的创建，撤销，阻塞及唤醒等功能</li><li>进程通信：完成进程之间的信息传递或信号传递等功能</li><li>内存管理：完成内存的分配，回收以及获取作业占用内存区大小及地址等功能</li><li><p><strong>原语</strong></p><ul><li>是一种特殊的程序</li><li>处于操作系统最底层，是最接近硬件的部分</li><li>该程序运行具有原子性（运行只能一气呵成，不可中断）</li><li>运行时间较短，调用频繁</li></ul></li></ul><h1 id="5-中断和异常"><a href="#5-中断和异常" class="headerlink" title="5. 中断和异常"></a>5. 中断和异常</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107164208450-20231108091632-if7ua1v.png" alt=""></p><h2 id="6-1-异常-内中断"><a href="#6-1-异常-内中断" class="headerlink" title="6.1 异常(内中断)"></a>6.1 异常(内中断)</h2><blockquote><p>基本概念</p><ul><li>由CPU内部产生的意外事件</li><li>是CPU执行一条命令时，由CPU在其内部检测到的、与正在执行指令相关的同步事件</li><li>故障和自陷为异常</li><li>终止异常和外中断属于硬件中断</li></ul></blockquote><p>‍</p><blockquote><p>分类</p><ul><li>故障 ： 在引起故障的指令启动之后、执行结束前被检测到的异常事件</li><li>自陷：  也称陷阱或陷入，是预先安排的一种“异常事件”，就像预先设置好的“陷阱”一样</li><li>终止：若在执行指令的过程中发生了使计算机无法继续执行的硬件故障，那么程序将无法继续执行，只能终止</li></ul></blockquote><p>‍</p><blockquote><p>举例</p><ul><li><p>故障</p><ul><li>指令译码时，出现“非法操作码”</li><li>取数据时，发生“缺段”或“缺页”</li><li>除数为零</li><li>地址越界</li></ul></li><li><p>自陷</p><ul><li>x86机器中，用于程序调试“断点设置”和单步跟踪功能</li><li>系统调用指令</li><li>条件自陷指令</li></ul></li><li><p>终止</p><ul><li>控制器出错</li><li>存储器校验错</li><li>调出中断服务程序来重启系统</li></ul></li></ul></blockquote><p>‍</p><blockquote><p>执行时间</p><ul><li>CPU在执行指令时会检查是否有异常发生</li></ul></blockquote><p>‍</p><blockquote><p>和外中断不同的是</p><ul><li>缺页”或“溢出”等异常事件是由特定指令在执行过程中产生的</li><li>异常的检测由CPU自身完成，不必通过外部的某个信号通知CPU</li></ul></blockquote><h2 id="6-2-中断-外中断"><a href="#6-2-中断-外中断" class="headerlink" title="6.2 中断(外中断)"></a>6.2 中断(外中断)</h2><blockquote><p>基本概念</p><ul><li>由来自CPU外部的设备发出的中断请求（常用于输入输出）</li><li>典型的由外部设备触发的、与当前正在执行的指令无关的异步事件</li><li>外部I/O设备通过特定的中断请求信号线向CPU提出中断请求</li><li>CPU每执行完一条指令就检查中断请求信号线，若检测到中断请求，则进入中断响应期</li><li>外部中断都是在一条指令执行完成后（中断周期）才被检测并处理的</li></ul></blockquote><p>‍</p><blockquote><p>分类</p><ul><li><p>可屏蔽中断</p><ul><li>通过可屏蔽中断请求线INTR向CPU发出的中断请求</li><li>CPU可以通过在中断控制器中设置相应的屏蔽字来屏蔽或不屏蔽它，被屏蔽的中断信号将不被送到CPU</li></ul></li><li><p>不可屏蔽中断</p><ul><li>通过不可屏蔽中断请求线NMI向CPU发出的中断请求</li><li>通常是非常紧急的硬件故障，如电源掉电等</li></ul></li></ul></blockquote><p>‍</p><blockquote><p>举例</p><ul><li>Cache缺失</li><li>I/O中断：键盘输入，打印机缺纸</li><li>时钟中断</li><li>I/O中断请求</li></ul></blockquote><p>‍</p><blockquote><p>执行时间</p><ul><li>每个指令周期末尾，CPU都会检查是否有外中断信号需要处理</li></ul></blockquote><p>‍</p><blockquote><p>和内中断不同的是</p><ul><li>中断不与任何指令相关联，也不阻止任何指令的完成</li></ul></blockquote><h1 id="7-系统调用"><a href="#7-系统调用" class="headerlink" title="7. 系统调用"></a>7. 系统调用</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107180135537-20231108091632-zjrtpin.png" alt="">​</p><p>‍</p><h2 id="7-1-系统调用【又叫做广义指令】"><a href="#7-1-系统调用【又叫做广义指令】" class="headerlink" title="7.1 系统调用【又叫做广义指令】"></a>7.1 系统调用【又叫做广义指令】</h2><blockquote><p>定义</p><ul><li>操作系统对应用程序和程序员提供的接口</li><li>系统调用需要触发Trap【也叫陷入/访管指令】</li><li>os通过提供系统调用避免用户程序直接访问外设【应用程序通过系统调用使用OS的设备管理服务】</li></ul></blockquote><p>‍</p><blockquote><p>目的</p><ul><li>请求系统服务</li></ul></blockquote><p>‍</p><blockquote><p>与库函数的区别</p><ul><li><p>库函数</p><ul><li>是语言或应用程序的一部分 ，可以运行在用户空间中</li><li>许多库函数都会使用系统调用来实现功能</li><li>有的库函数没有使用系统调用</li></ul></li><li><p>系统调用</p><ul><li>是操作系统的一部分，是内核为用户提供的程序接口，运行在内核空间</li><li>未使用系统调用的库函数，执行效率通常比系统调用的高 ， 【因为系统调用要完成上下文的切换和状态的转换】</li></ul></li></ul></blockquote><p>‍</p><blockquote><p>按功能分类</p><ul><li>设备管理：完成设备的请求或释放+设备启动</li><li>文件管理：完成文件的读+写+创建+删除</li><li>进程控制：完成进程的创建+撤销+阻塞+唤醒</li><li>进程通信：完成进程之间的信息传递或信号传递</li><li>内存管理：完成内存的分配+回收+获取作业占用内存区大小及始址</li></ul></blockquote><p>‍</p><blockquote><p>系统调用的过程</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110154517-pkh1tai.png" alt="image"></p><ul><li>step1：传参</li><li>step2：陷入指令/Trap/访管【执行系统调用】，发生在用户态</li><li>step3：由操作系统内核程序处理系统调用请求，发生在内核态</li><li>step4：返回应用程序</li></ul></blockquote><h2 id="7-2-系统调用和一般过程调用的差别"><a href="#7-2-系统调用和一般过程调用的差别" class="headerlink" title="7.2 系统调用和一般过程调用的差别"></a>7.2 系统调用和一般过程调用的差别</h2><ol><li><p>运行状态不同</p><ul><li>一般过程调用的调用过程和被调用过程运行在同一系统状态【用户态或内核态】</li><li>系统调用的调用过程是运行在用户态，被调用过程是运行在内核态</li></ul></li><li><p>软中断进入机制</p><ul><li>一般的过程调用可直接由调用过程转向被调用过程</li><li>系统调用不允许由调用过程直接转向被调用过程，一般通过软中断机制，先进入操作系统内核，经内核分析后才转向相应命令处理程序</li></ul></li><li><p>返回及重新调度</p><ul><li>一般过程调用被调用结束后，返回调用点继续执行</li><li>系统调用被调用完后，要对系统中所有运行进程重新调度</li><li>只有当调用进程仍具有最高优先权才返回调用过程继续执行</li></ul></li></ol><h2 id="7-3-系统调用的过程"><a href="#7-3-系统调用的过程" class="headerlink" title="7.3 系统调用的过程"></a>7.3 系统调用的过程</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110154941-rrjhnpx.png" alt="image">​</p><p>‍</p><h1 id="8-操作系统的体系结构"><a href="#8-操作系统的体系结构" class="headerlink" title="8. 操作系统的体系结构"></a>8. 操作系统的体系结构</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110155312-u0c5x1f.png" alt="image">​</p><p><img src="assets/image-20231110155432-qxl3kcc.png" alt="image">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110155548-0fcn8ht.png" alt="image">​</p><p>‍</p><ul><li><p>微内核OS知识点补充</p><ul><li>优点：【内核足够小】【基于C/S模式】【应用机制与策略分离原理】【采用面向对象技术】</li><li>缺点：【性能问题】【开销偏大】</li></ul></li></ul><h1 id="9-操作系统引导-【Boot】"><a href="#9-操作系统引导-【Boot】" class="headerlink" title="9. 操作系统引导 【Boot】"></a>9. 操作系统引导 【Boot】</h1><h2 id="9-1-操作系统的引导-即开机过程"><a href="#9-1-操作系统的引导-即开机过程" class="headerlink" title="9.1 操作系统的引导 即开机过程"></a>9.1 操作系统的引导 即开机过程</h2><blockquote><p>开机过程</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110160543-1bhy4qy.png" alt="image">​</p><p>A、启动过程</p><ol><li>CPU加电，CS：IP指向FFFF0H</li><li>执行JMP指令跳转到BIOS</li><li>登记BIOS中断例程入口地址</li><li>硬件自检</li><li>进行操作系统引导</li></ol><p>B、引导过程</p><ul><li>step1：CPU从一个特定主存地址开始，取指令，执行ROM中的引导装入程序【即前面的启动过程】</li><li>step2：将磁盘的第一块——主引导记录读入内存，执行磁盘引导程序，扫描分区表</li><li>step3：从活动分区【又称主分区，即安装了操作系统的分区】读入分区引导记录，执行其中的程序</li><li>step4：从根目录下找到完整的操作系统初始化程序【即启动管理器】并执行，完成开机的一系列操作</li></ul><p>C、计算机加电启动过程中执行程序的过程</p><p>自检程序——&gt;引导装入程序/自举装入程序———&gt;引导程序———&gt;操作系统</p><p>D、注意点</p><div class="table-container"><table><thead><tr><th>引导装入程序/自举装入程序</th><th>是位于ROM中的自举程序（BIOS的组成部分）</th><th>用于启动具体的设备</th></tr></thead><tbody><tr><td>引导程序/启动管理器</td><td>是位于装有操作系统硬盘的活动分区的引导扇区的程序</td><td>用于引导操作系统</td></tr><tr><td>1、操作系统被装入RAM中</td><td>2、自举程序BIOS装在ROM中</td><td>3、引导程序装在硬盘中</td></tr></tbody></table></div></blockquote><p>‍</p><h1 id="10-虚拟机"><a href="#10-虚拟机" class="headerlink" title="10. 虚拟机"></a>10. 虚拟机</h1><p>定义： 使用虚拟化技术，将一台物理机器虚化为多台虚拟机器VM，每个虚拟机器都可用独立运行一个操作系统</p><p>分类：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110161610-8mndk1a.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 考研408 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合Mybatis</title>
      <link href="/posts/3513a7dc.html"/>
      <url>/posts/3513a7dc.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>导入坐标，MyBatis坐标不能少，Spring整合MyBatis还有自己专用的坐标，此外Spring进行数据库操作的jdbc坐标是必须的，剩下还有mysql驱动坐标，本例中使用了Druid数据源，这个倒是可以不要</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.导入mybatis与spring整合的jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入spring操作数据库必选的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Spring核心配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MyBatis要交给Spring接管的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义mybatis专用的配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line"><span class="comment">//    定义创建SqlSessionFactory对应的bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBean是由mybatis-spring包提供的，专用于整合用的对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置数据源替代原始配置中的environments的配置</span></span><br><span class="line">        sfb.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//设置类型别名替代原始配置中的typeAliases的配置</span></span><br><span class="line">        sfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sfb;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    定义加载所有的映射配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据源对应的bean，此处使用Druid数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据库连接信息（properties格式）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/spring_db?useSSL=false</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring整合系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合</title>
      <link href="/posts/254393f0.html"/>
      <url>/posts/254393f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-流程分析"><a href="#1-流程分析" class="headerlink" title="1. 流程分析"></a>1. 流程分析</h1><p>(1) 创建工程</p><ul><li>创建一个 Maven 的 web 工程</li><li>pom.xml 添加 SSM 需要的依赖 jar 包</li><li><p>编写 Web 项目的入口配置类，实现<code>AbstractAnnotationConfigDispatcherServletInitializer</code>​ 重写以下方法</p><ul><li>getRootConfigClasses() ：返回 Spring 的配置类-&gt;需要==SpringConfig==配置类</li><li>getServletConfigClasses() ：返回 SpringMVC 的配置类-&gt;需要==SpringMvcConfig==配置类</li><li>getServletMappings() : 设置 SpringMVC 请求拦截路径规则</li><li>getServletFilters() ：设置过滤器，解决 POST 请求中文乱码问题</li></ul></li></ul><p>(2)SSM 整合[==重点是各个配置的编写==]</p><ul><li><p>SpringConfig</p><ul><li>标识该类为配置类 @Configuration</li><li>扫描 Service 所在的包 @ComponentScan</li><li>在 Service 层要管理事务 @EnableTransactionManagement</li><li>读取外部的 properties 配置文件 @PropertySource</li><li><p>整合 Mybatis 需要引入 Mybatis 相关配置类 @Import</p><ul><li><p>第三方数据源配置类 JdbcConfig</p><ul><li>构建 DataSource 数据源，DruidDataSouroce,需要注入数据库连接四要素， @Bean @Value</li><li>构建平台事务管理器，DataSourceTransactionManager,@Bean</li></ul></li><li><p>Mybatis 配置类 MybatisConfig</p><ul><li>构建 SqlSessionFactoryBean 并设置别名扫描与数据源，@Bean</li><li>构建 MapperScannerConfigurer 并设置 DAO 层的包扫描</li></ul></li></ul></li></ul></li><li><p>SpringMvcConfig</p><ul><li>标识该类为配置类 @Configuration</li><li>扫描 Controller 所在的包 @ComponentScan</li><li>开启 SpringMVC 注解支持 @EnableWebMvc</li></ul></li></ul><p>(3)功能模块[与具体的业务模块有关]</p><ul><li>创建数据库表</li><li>根据数据库表创建对应的模型类</li><li>通过 Dao 层完成数据库表的增删改查(接口+自动代理)</li><li><p>编写 Service 层[Service 接口+实现类]</p><ul><li>@Service</li><li>@Transactional</li><li><p>整合 Junit 对业务层进行单元测试</p><ul><li>@RunWith</li><li>@ContextConfiguration</li><li>@Test</li></ul></li></ul></li><li><p>编写 Controller 层</p><ul><li>接收请求 @RequestMapping @GetMapping @PostMapping @PutMapping @DeleteMapping</li><li><p>接收数据 简单、POJO、嵌套 POJO、集合、数组、JSON 数据类型</p><ul><li>@RequestParam</li><li>@PathVariable</li><li>@RequestBody</li></ul></li><li><p>转发业务层</p><ul><li>@Autowired</li></ul></li><li><p>响应结果</p><ul><li>@ResponseBody</li></ul></li></ul></li></ul><h1 id="2-整合配置"><a href="#2-整合配置" class="headerlink" title="2. 整合配置"></a>2. 整合配置</h1><h2 id="步骤-1：创建-Maven-的-web-项目"><a href="#步骤-1：创建-Maven-的-web-项目" class="headerlink" title="步骤 1：创建 Maven 的 web 项目"></a>步骤 1：创建 Maven 的 web 项目</h2><h2 id="步骤-2-添加依赖"><a href="#步骤-2-添加依赖" class="headerlink" title="步骤 2:添加依赖"></a>步骤 2:添加依赖</h2><p>pom.xml 添加 SSM 所需要的依赖 jar 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_08_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤-3-创建项目包结构"><a href="#步骤-3-创建项目包结构" class="headerlink" title="步骤 3:创建项目包结构"></a>步骤 3:创建项目包结构</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155804511-276282620-20231127213207-7vaj8dn.png" alt="image">​</p><ul><li>config 目录存放的是相关的配置类</li><li>controller 编写的是 Controller 类</li><li>dao 存放的是 Dao 接口，因为使用的是 Mapper 接口代理方式，所以没有实现类包</li><li>service 存的是 Service 接口，impl 存放的是 Service 实现类</li><li>resources:存入的是配置文件，如 Jdbc.properties</li><li>webapp:目录可以存放静态资源</li><li>test/java:存放的是测试类</li></ul><h2 id="步骤-4-创建-SpringConfig-配置类"><a href="#步骤-4-创建-SpringConfig-配置类" class="headerlink" title="步骤 4:创建 SpringConfig 配置类"></a>步骤 4:创建 SpringConfig 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.north.service&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤-5-创建-JdbcConfig-配置类"><a href="#步骤-5-创建-JdbcConfig-配置类" class="headerlink" title="步骤 5:创建 JdbcConfig 配置类"></a>步骤 5:创建 JdbcConfig 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        ds.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤-6-创建-MybatisConfig-配置类"><a href="#步骤-6-创建-MybatisConfig-配置类" class="headerlink" title="步骤 6:创建 MybatisConfig 配置类"></a>步骤 6:创建 MybatisConfig 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);</span><br><span class="line">        factoryBean.setTypeAliasesPackage(<span class="string">&quot;com.north.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.north.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤-7-创建-jdbc-properties"><a href="#步骤-7-创建-jdbc-properties" class="headerlink" title="步骤 7:创建 jdbc.properties"></a>步骤 7:创建 jdbc.properties</h2><p>在 resources 下提供 jdbc.properties,设置数据库连接四要素</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h2 id="步骤-8-创建-SpringMVC-配置类"><a href="#步骤-8-创建-SpringMVC-配置类" class="headerlink" title="步骤 8:创建 SpringMVC 配置类"></a>步骤 8:创建 SpringMVC 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.north.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤-9-创建-Web-项目入口配置类"><a href="#步骤-9-创建-Web-项目入口配置类" class="headerlink" title="步骤 9:创建 Web 项目入口配置类"></a>步骤 9:创建 Web 项目入口配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载Spring配置类</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载SpringMVC配置类</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置SpringMVC请求地址拦截规则</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置post请求中文乱码过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此 SSM 整合的环境就已经搭建好了。在这个环境上，我们如何进行功能模块的开发呢?</p><h1 id="3-功能模块开发"><a href="#3-功能模块开发" class="headerlink" title="3. 功能模块开发"></a>3. 功能模块开发</h1><blockquote><p>需求:对表 tbl_book 进行新增、修改、删除、根据 ID 查询和查询所有</p></blockquote><h2 id="步骤-1-创建数据库及表"><a href="#步骤-1-创建数据库及表" class="headerlink" title="步骤 1:创建数据库及表"></a>步骤 1:创建数据库及表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database ssm_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use ssm_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_book(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  type <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  description <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `tbl_book`(`id`,`type`,`name`,`description`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring实战 第五版&#x27;</span>,<span class="string">&#x27;Spring入门经典教程，深入理解Spring原理技术内幕&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5核心原理与30个类手写实践&#x27;</span>,<span class="string">&#x27;十年沉淀之作，手写Spring精华思想&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5设计模式&#x27;</span>,<span class="string">&#x27;深入Spring源码刨析Spring源码中蕴含的10大设计模式&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring MVC+Mybatis开发从入门到项目实战&#x27;</span>,<span class="string">&#x27;全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;轻量级Java Web企业应用实战&#x27;</span>,<span class="string">&#x27;源码级刨析Spring框架，适合已掌握Java基础的读者&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Java核心技术 卷Ⅰ 基础知识(原书第11版)&#x27;</span>,<span class="string">&#x27;Core Java第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新&#x27;</span>),(<span class="number">7</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;深入理解Java虚拟机&#x27;</span>,<span class="string">&#x27;5个纬度全面刨析JVM,大厂面试知识点全覆盖&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Java编程思想(第4版)&#x27;</span>,<span class="string">&#x27;Java学习必读经典，殿堂级著作！赢得了全球程序员的广泛赞誉&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;零基础学Java(全彩版)&#x27;</span>,<span class="string">&#x27;零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术&#x27;</span>),(<span class="number">10</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播就这么做:主播高效沟通实战指南&#x27;</span>,<span class="string">&#x27;李子柒、李佳奇、薇娅成长为网红的秘密都在书中&#x27;</span>),(<span class="number">11</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播销讲实战一本通&#x27;</span>,<span class="string">&#x27;和秋叶一起学系列网络营销书籍&#x27;</span>),(<span class="number">12</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播带货:淘宝、天猫直播从新手到高手&#x27;</span>,<span class="string">&#x27;一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="步骤-2-编写模型类"><a href="#步骤-2-编写模型类" class="headerlink" title="步骤 2:编写模型类"></a>步骤 2:编写模型类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(Integer id, String type, String name, String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, description=&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤-3-编写-Dao-接口"><a href="#步骤-3-编写-Dao-接口" class="headerlink" title="步骤 3:编写 Dao 接口"></a>步骤 3:编写 Dao 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Insert(&quot;insert into tbl_book values(null,#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤-4-编写-Service-接口和实现类"><a href="#步骤-4-编写-Service-接口和实现类" class="headerlink" title="步骤 4:编写 Service 接口和实现类"></a>步骤 4:编写 Service 接口和实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        bookDao.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li><p>bookDao 在 Service 中注入的会提示一个红线提示，为什么呢?</p><ul><li>BookDao 是一个接口，没有实现类，接口是不能创建对象的，所以最终注入的应该是代理对象</li><li>代理对象是由 Spring 的 IOC 容器来创建管理的</li><li>IOC 容器又是在 Web 服务器启动的时候才会创建</li><li>IDEA 在检测依赖关系的时候，没有找到适合的类注入，所以会提示错误提示</li><li>但是程序运行的时候，代理对象就会被创建，框架会使用 DI 进行注入，所以程序运行无影响。</li></ul></li><li><p>如何解决上述问题?</p><ul><li>可以不用理会，因为运行是正常的</li><li>设置错误提示级别</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155805451-363376482-20231127213207-h554bqn.png" alt="image">​</p><h2 id="步骤-5-编写-Contorller-类"><a href="#步骤-5-编写-Contorller-类" class="headerlink" title="步骤 5:编写 Contorller 类"></a>步骤 5:编写 Contorller 类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.update(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于图书模块的增删改查就已经完成了编写，我们可以从后往前写也可以从前往后写，最终只需要能把功能实现即可。</p><p>接下来我们就先把业务层的代码使用<code>Spring整合Junit</code>​ 的知识点进行单元测试:</p><h1 id="4-单元测试"><a href="#4-单元测试" class="headerlink" title="4. 单元测试"></a>4. 单元测试</h1><h2 id="步骤-1-新建测试类"><a href="#步骤-1-新建测试类" class="headerlink" title="步骤 1:新建测试类"></a>步骤 1:新建测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤-2-注入-Service-类"><a href="#步骤-2-注入-Service-类" class="headerlink" title="步骤 2:注入 Service 类"></a>步骤 2:注入 Service 类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤-3-编写测试方法"><a href="#步骤-3-编写测试方法" class="headerlink" title="步骤 3:编写测试方法"></a>步骤 3:编写测试方法</h2><p>我们先来对查询进行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 ID 查询，测试的结果为:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155806170-2079328457-20231127213207-c9eoif1.png" alt="image">​</p><p>查询所有，测试的结果为:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155806690-518214461-20231127213207-jcj96kf.png" alt="image">​</p><h1 id="5-PostMan-测试"><a href="#5-PostMan-测试" class="headerlink" title="5. PostMan 测试"></a>5. PostMan 测试</h1><h2 id="5-1-新增"><a href="#5-1-新增" class="headerlink" title="5.1 新增"></a>5.1 新增</h2><p><code>http://localhost/books</code>​</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;类别测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;书名测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;描述测试数据&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155807156-2088162009-20231127213207-vjauyuf.png" alt="image">​</p><h2 id="5-2-修改"><a href="#5-2-修改" class="headerlink" title="5.2 修改"></a>5.2 修改</h2><p><code>http://localhost/books</code>​</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;类别测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;书名测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;描述测试数据&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155807590-1173018371-20231127213208-ooimbje.png" alt="image">​</p><h2 id="5-3-删除"><a href="#5-3-删除" class="headerlink" title="5.3 删除"></a>5.3 删除</h2><p><code>http://localhost/books/13</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155808014-640341094-20231127213208-c1hqh4x.png" alt="image">​</p><h2 id="5-4-查询单个"><a href="#5-4-查询单个" class="headerlink" title="5.4 查询单个"></a>5.4 查询单个</h2><p><code>http://localhost/books/1</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155808455-1348561215-20231127213208-vtzoewe.png" alt="image">​</p><h2 id="5-5-查询所有"><a href="#5-5-查询所有" class="headerlink" title="5.5 查询所有"></a>5.5 查询所有</h2><p><code>http://localhost/books</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155808923-1038874493-20231127213208-zejdul0.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring整合系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-约束</title>
      <link href="/posts/fac97174.html"/>
      <url>/posts/fac97174.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p><strong>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</strong></p><p><strong>目的：保证数据库中数据的正确、有效性和完整性。</strong></p><p>分类:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102743391-1115602335-20231127200320-8z15694.png" alt="image-20230501090726321">​</p><blockquote><p><strong>注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。</strong></p></blockquote><h1 id="2-约束演示"><a href="#2-约束演示" class="headerlink" title="2. 约束演示"></a>2. 约束演示</h1><p>案例需求： 根据需求，完成表结构的创建。需求如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102743900-1950792058-20231127200320-ze6zhnl.png" alt="image-20230501090835632">​</p><p>对应的建表语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;ID唯一标识&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;姓名&#x27;</span> ,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> age <span class="type">int</span> <span class="keyword">check</span> (age <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> age <span class="operator">&lt;=</span> <span class="number">120</span>) COMMENT <span class="string">&#x27;年龄&#x27;</span> ,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> gender <span class="type">char</span>(<span class="number">1</span>) COMMENT <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>展示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> tb_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> status <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">1</span>       <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在为字段添加约束时，我们只需要在字段之后加上约束的关键字即可，需要关注其语法。我们执行上面 的 SQL 把表结构创建完成，然后接下来，就可以通过一组数据进行测试，从而验证一下，约束是否可以 生效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom1&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Tom2&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom3&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="keyword">null</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom3&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom4&#x27;</span>,<span class="number">80</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>,<span class="number">-1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>,<span class="number">121</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>,<span class="number">120</span>,<span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上面，我们是通过编写 SQL 语句的形式来完成约束的指定，那加入我们是通过图形化界面来创建表结构 时，又该如何来指定约束呢？ 只需要在创建表的时候，根据我们的需要选择对应的约束即可。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102744395-1718861358-20231127200321-2zvbays.png" alt="image-20230501095657271">​</p><h1 id="3-外键约束"><a href="#3-外键约束" class="headerlink" title="3.外键约束"></a>3.外键约束</h1><h2 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h2><blockquote><p><strong>外键：用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</strong></p></blockquote><p>我们来看一个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102744917-1379729215-20231127200321-15i26hf.png" alt="image-20230501095802662">​</p><p>左侧的 emp 表是员工表，里面存储员工的基本信息，包含员工的 ID、姓名、年龄、职位、薪资、入职日 期、上级主管 ID、部门 ID，在员工的信息中存储的是部门的 ID dept_id，而这个部门的 ID 是关联的 部门表 dept 的主键 id，那 emp 表的 dept_id 就是外键,关联的是另一张表的主键。</p><blockquote><p><strong>注意：目前上述两张表，只是在逻辑上存在这样一层关系；在数据库层面，并未建立外键关联， 所以是无法保证数据的一致性和完整性的。</strong></p></blockquote><p>没有数据库外键关联的情况下，能够保证一致性和完整性呢，我们来测试一下。</p><p>准备数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;部门名称&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept (id, name) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;研发部&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;市场部&#x27;</span>),(<span class="number">3</span>, <span class="string">&#x27;财务部&#x27;</span>), (<span class="number">4</span>,<span class="string">&#x27;销售部&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;总经办&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">job <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;职位&#x27;</span>,</span><br><span class="line">salary <span class="type">int</span> comment <span class="string">&#x27;薪资&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">managerid <span class="type">int</span> comment <span class="string">&#x27;直属领导ID&#x27;</span>,</span><br><span class="line">dept_id <span class="type">int</span> comment <span class="string">&#x27;部门ID&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, name, age, job,salary, entrydate, managerid, dept_id)<span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;金庸&#x27;</span>, <span class="number">66</span>, <span class="string">&#x27;总裁&#x27;</span>,<span class="number">20000</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="keyword">null</span>,<span class="number">5</span>),(<span class="number">2</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="number">20</span>,<span class="string">&#x27;项目经理&#x27;</span>,<span class="number">12500</span>, <span class="string">&#x27;2005-12-05&#x27;</span>, <span class="number">1</span>,<span class="number">1</span>),(<span class="number">3</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="number">33</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">8400</span>,<span class="string">&#x27;2000-11-03&#x27;</span>, <span class="number">2</span>,<span class="number">1</span>),(<span class="number">4</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">48</span>, <span class="string">&#x27;开发&#x27;</span>,<span class="number">11000</span>, <span class="string">&#x27;2002-02-05&#x27;</span>, <span class="number">2</span>,<span class="number">1</span>),(<span class="number">5</span>, <span class="string">&#x27;常遇春&#x27;</span>,<span class="number">43</span>, <span class="string">&#x27;开发&#x27;</span>,<span class="number">10500</span>, <span class="string">&#x27;2004-09-07&#x27;</span>, <span class="number">3</span>,<span class="number">1</span>),(<span class="number">6</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;程序员鼓励师&#x27;</span>,<span class="number">6600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">2</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102745370-843964216-20231127200321-m64hkrr.png" alt="image-20230501100356071">​</p><p>结果，我们看到删除成功，而删除成功之后，部门表不存在 id 为 1 的部门，而在 emp 表中还有很多的员 工，关联的为 id 为 1 的部门，此时就出现了数据的不完整性。 而要想解决这个问题就得通过数据库的 外键约束。</p><h2 id="3-2-语法"><a href="#3-2-语法" class="headerlink" title="3.2 语法"></a>3.2 语法</h2><blockquote><p><strong>1. 添加外键</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表 (主表列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名)</span><br><span class="line"><span class="keyword">REFERENCES</span> 主表 (主表列名) ;</span><br></pre></td></tr></table></figure><p>案例：</p><p>为 emp 表的 dept_id 字段添加外键约束,关联 dept 表的主键 id。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key (dept_id) <span class="keyword">references</span> dept(id);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102745841-1929959897-20231127200321-0lh07zi.png" alt="image-20230501100928391">​</p><p>添加了外键约束之后，我们再到 dept 表(父表)删除 id 为 1 的记录，然后看一下会发生什么现象。 此时 将会报错，不能删除或更新父表记录，因为存在外键约束。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102746286-2060850583-20231127200321-wq5sr1f.png" alt="image-20230501101202653">​</p><blockquote><p><strong>2. 删除外键</strong></p></blockquote><p>案例：</p><p>删除 emp 表的外键 fk_emp_dept_id。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_emp_id;</span><br></pre></td></tr></table></figure><p>执行成功</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102746655-1099079948-20231127200321-i2lkuz2.png" alt="image-20230501101450485">​</p><h2 id="3-3-删除-更新行为"><a href="#3-3-删除-更新行为" class="headerlink" title="3.3 删除/更新行为"></a>3.3 删除/更新行为</h2><p><strong>添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除/更新行为。</strong></p><p>具体的删除/更新行 为有以下几种:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102747148-1626119543-20231127200321-2m8iizm.png" alt="image-20230501101541309">​</p><p>具体语法为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段) <span class="keyword">REFERENCES</span></span><br><span class="line">主表名 (主表字段名) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-函数</title>
      <link href="/posts/65c29e.html"/>
      <url>/posts/65c29e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><blockquote><p><strong>函数： 是指一段可以直接被另一段程序调用的程序或代码。</strong></p></blockquote><p>使用场景：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090601622-1023274415-20231127133321-zsasasd.png" alt="image-20230430081024053">​</p><ol><li>在企业的 OA 或其他的人力系统中，经常会提供的有这样一个功能，每一个员工登录上来之后都能 够看到当前员工入职的天数。 而在数据库中，存储的都是入职日期，如 2000-11-12，那如果快速计 算出天数呢？</li><li>在做报表这类的业务需求中,我们要展示出学员的分数等级分布。而在数据库中，存储的是学生的 分数值，如 98/75，如何快速判定分数的等级呢？</li></ol><p>其实，上述的这一类的需求呢，我们通过 MySQL 中的函数都可以很方便的实现 。</p><blockquote><p>MySQL 中的函数主要分为以下四类： <strong>字符串函数、数值函数、日期函数、流程函数。</strong></p></blockquote><h1 id="2-字符串函数"><a href="#2-字符串函数" class="headerlink" title="2. 字符串函数"></a>2. 字符串函数</h1><p>MySQL 中内置了很多字符串函数，常用的几个如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090602216-1068891071-20231127133321-iib3thb.png" alt="image-20230430081249197">​</p><p>演示如下：</p><blockquote><p><strong>1. concat : 字符串拼接</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;Hello&#x27;</span> , <span class="string">&#x27; MySQL&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090602689-1726972087-20231127133321-3ctnt3o.png" alt="image-20230430081630547">​</p><blockquote><p><strong>2. lower : 全部转小写</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090603185-6116237-20231127133321-bc1pn5d.png" alt="image-20230430082052519">​</p><blockquote><p><strong>3. upper : 全部转大写</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090603698-2018602104-20231127133321-zwdhnsv.png" alt="image-20230430082245295">​</p><blockquote><p><strong>4. lpad : 左填充</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> lpad(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>意思是 ： 在字符串 01 的左边填充 - 然后填充的字符串加上 01 刚好有五个字符串</strong></p><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090604164-1025031415-20231127133321-r04e6z9.png" alt="image-20230430082630148">​</p><blockquote><p><strong>5. rpad : 右填充</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090604658-2045219695-20231127133321-rx3i189.png" alt="image-20230430082937425">​</p><blockquote><p><strong>6. trim : 去除空格</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="string">&#x27; Hello MySQL &#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090605091-563265028-20231127133322-d2b5j6r.png" alt="image-20230430083131686">​</p><blockquote><p><strong>7. substring : 截取子字符串</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;Hello MySQL&#x27;</span>,<span class="number">1</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090605526-1935867974-20231127133322-u1y1xsm.png" alt="image-20230430083316674">​</p><h1 id="3-数值函数"><a href="#3-数值函数" class="headerlink" title="3. 数值函数"></a>3. 数值函数</h1><p>常见的数值函数如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090606056-2107302551-20231127133322-4fkv578.png" alt="image-20230430083742802">​</p><p>演示如下：</p><blockquote><p><strong>1. ceil：向上取整</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">1.1</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090606499-1710334136-20231127133322-x69nttr.png" alt="image-20230430102856606">​</p><blockquote><p><strong>2. floor：向下取整</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1.9</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090606933-1562435198-20231127133322-ger7w8m.png" alt="image-20230430103252431">​</p><blockquote><p><strong>3. mod：取模</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">7</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p><strong>我的理解：前面的数除以后面的数然后进行取余</strong></p><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090607377-497998419-20231127133322-cznkdit.png" alt="image-20230430103513312">​</p><blockquote><p><strong>4. rand：获取随机数</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> rand();</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090607862-325489956-20231127133322-xll89xu.png" alt="image-20230430103618418">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090608335-1900154558-20231127133322-wrpe4e4.png" alt="image-20230430103631243">​</p><blockquote><p><strong>5. round：四舍五入</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="number">2.344</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>个人理解：<strong>round() 函数 ， 后面的数字是多少就前面的数字就保留多少位小数</strong></p><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090608790-371719217-20231127133322-em6s4xk.png" alt="image-20230430103830038">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090609270-904852070-20231127133322-4ied98j.png" alt="image-20230430104020371">​</p><h1 id="4-日期函数"><a href="#4-日期函数" class="headerlink" title="4.日期函数"></a>4.日期函数</h1><p>常见的日期函数如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090609745-920385974-20231127133322-cpxvcbb.png" alt="image-20230430104406323">​</p><p>演示如下：</p><blockquote><p><strong>1. curdate：当前日期</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> curdate();</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090610198-1192012608-20231127133323-lih51qo.png" alt="image-20230430105334675">​</p><blockquote><p><strong>2. curtime：当前时间</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> curtime();</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090610614-704134119-20231127133323-z5y5sue.png" alt="image-20230430105458165">​</p><blockquote><p><strong>3. now：当前日期和时间</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> now();</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090611040-1089457852-20231127133323-2vynl76.png" alt="image-20230430105617254">​</p><blockquote><p><strong>4. YEAR , MONTH , DAY：当前年、月、日</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">YEAR</span>(now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">MONTH</span>(now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DAY</span>(now());</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090611496-109435908-20231127133323-b22dhue.png" alt="image-20230430105853093">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090611997-1189255699-20231127133323-l28ya7s.png" alt="image-20230430105913533">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090612428-413806314-20231127133323-7ucvc0u.png" alt="image-20230430105927953">​</p><blockquote><p><strong>5. date_add：增加指定的时间间隔</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> date_add(now(), <span class="type">INTERVAL</span> <span class="number">70</span> <span class="keyword">YEAR</span> );</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090612879-343758205-20231127133323-cmm7zi7.png" alt="image-20230430110123657">​</p><blockquote><p><strong>6. datediff：获取两个日期相差的天数</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2021-10-01&#x27;</span>, <span class="string">&#x27;2021-12-01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090613291-1079571065-20231127133323-iu3292u.png" alt="image-20230430110252490">​</p><h1 id="5-流程函数"><a href="#5-流程函数" class="headerlink" title="5. 流程函数"></a>5. 流程函数</h1><p>流程函数也是很常用的一类函数，可以在 SQL 语句中实现条件筛选，从而提高语句的效率。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090613743-1243438736-20231127133323-admcmp7.png" alt="image-20230430124145323">​</p><p>演示如下：</p><blockquote><p><strong>1. if</strong></p><ul><li><strong>IF(value , t , f) ， 如果 value 为 true，则返回 t，否则返回 f</strong></li></ul></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if(<span class="literal">false</span>, <span class="string">&#x27;Ok&#x27;</span>, <span class="string">&#x27;Error&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090614186-406223395-20231127133323-pamwh9s.png" alt="image-20230430124322340">​</p><blockquote><p><strong>2. ifnull</strong></p><ul><li><strong>IFNULL(value1 , value2) , 如果 value1 不为空，返回 value1，否则 返 value2</strong></li></ul></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ifnull(<span class="string">&#x27;Ok&#x27;</span>,<span class="string">&#x27;Default&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;Default&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="keyword">null</span>,<span class="string">&#x27;Default&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><ol><li><p>value 不为空</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090614609-927475336-20231127133323-o7v7eul.png" alt="image-20230430124618453">​</p></li><li><p>valuel 为空</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090615055-1552296925-20231127133323-ycucsn9.png" alt="image-20230430124806458">​</p></li></ol><blockquote><p><strong>3. case when then else end</strong></p><ul><li><strong>CASE WHEN [ val1 ] THEN [res1] … ELSE [ default ] END , 如果 val1 为 true，返回 res1，… 否 则返回 default 默认值</strong></li></ul></blockquote><p>需求:</p><p>查询 emp 表的员工姓名和工作地址 (北京/上海 ——&gt; 一线城市 , 其他 ——&gt; 二线城市)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">name,</span><br><span class="line">( <span class="keyword">case</span> workaddress <span class="keyword">when</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">when</span> <span class="string">&#x27;上海&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">else</span></span><br><span class="line"><span class="string">&#x27;二线城市&#x27;</span> <span class="keyword">end</span> ) <span class="keyword">as</span> <span class="string">&#x27;工作地址&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">id <span class="type">int</span> comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">math <span class="type">int</span> comment <span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">english <span class="type">int</span> comment <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">chinese <span class="type">int</span> comment <span class="string">&#x27;语文&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;学员成绩表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(id, name, math, english, chinese) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">67</span>, <span class="number">88</span>, <span class="number">95</span>), (<span class="number">2</span>, <span class="string">&#x27;Rose&#x27;</span> , <span class="number">23</span>, <span class="number">66</span>, <span class="number">90</span>),(<span class="number">3</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">56</span>, <span class="number">98</span>, <span class="number">76</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090615457-1765753616-20231127133323-uqhdfgj.png" alt="image-20230430125214182">​</p><p>具体的 SQL 语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">id,</span><br><span class="line">name,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> math <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> math <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span> )</span><br><span class="line"><span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> english <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> english <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line"><span class="keyword">end</span> ) <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> chinese <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> chinese <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line"><span class="keyword">end</span> ) <span class="string">&#x27;语文&#x27;</span></span><br><span class="line"><span class="keyword">from</span> score;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090615881-19027710-20231127133324-lq2fkeq.png" alt="image-20230430125500146">​</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-SQL</title>
      <link href="/posts/fdab9a5f.html"/>
      <url>/posts/fdab9a5f.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-SQL"><a href="#1-SQL" class="headerlink" title="1. SQL"></a>1. SQL</h1><blockquote><p>全称 Structured Query Language，<strong>结构化查询语言</strong>。操作关系型数据库的编程语言，定义了 一套操作关系型数据库统一标准 。</p></blockquote><h1 id="2-SQL-通用语法"><a href="#2-SQL-通用语法" class="headerlink" title="2. SQL 通用语法"></a>2. SQL 通用语法</h1><p>1). SQL 语句可以单行或多行书写，<strong>以分号结尾。</strong></p><p>2). <strong>SQL 语句可以使用空格</strong>/<strong>缩进来增强语句的可读性。</strong></p><p>3). MySQL 数据库的 SQL 语句<strong>不区分大小写</strong>，关键字建议使用大写。</p><p>4). <strong>注释：</strong></p><blockquote><p>单行注释：— 注释内容 或 # 注释内容</p><p>多行注释：/<em> 注释内容 </em>/</p></blockquote><h1 id="3-SQL-分类"><a href="#3-SQL-分类" class="headerlink" title="3. SQL 分类"></a>3. SQL 分类</h1><blockquote><p>SQL 语句，根据其功能，主要分为四类：<strong>DDL、DML、DQL、DCL。</strong></p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center"><strong>DDL</strong></td><td>Data Definition Language</td><td>数据定义语言，用来定义<strong>数据库对象</strong>(<strong>数据库，表， 字段</strong>)</td></tr><tr><td style="text-align:center"><strong>DML</strong></td><td>Data Manipulation Language</td><td>数据操作语言，用来对<strong>数据库表中的数据进行增删改</strong></td></tr><tr><td style="text-align:center"><strong>DQL</strong></td><td>Data Query Language</td><td>数据查询语言，用来<strong>查询数据库中表的记录</strong></td></tr><tr><td style="text-align:center"><strong>DCL</strong></td><td>Data Control Language</td><td>数据控制语言，用来<strong>创建数据库用户、控制数据库的 访问权限</strong></td></tr></tbody></table></div><h1 id="4-DDL"><a href="#4-DDL" class="headerlink" title="4. DDL"></a>4. DDL</h1><blockquote><p>Data Definition Language，数据定义语言，<strong>用来定义数据库对象(数据库，表，字段) 。</strong></p></blockquote><h2 id="4-1-数据库操作"><a href="#4-1-数据库操作" class="headerlink" title="4.1 数据库操作"></a>4.1 数据库操作</h2><blockquote><p><strong>查询所有数据</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> student            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>查询当前数据库</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> database();</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> database() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> student    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>创建数据库</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database [ if <span class="keyword">not</span> <span class="keyword">exists</span> ] 数据库名 [ <span class="keyword">default</span> charset 字符集 ] [ <span class="keyword">collate</span> 排序规则 ] ;</span><br></pre></td></tr></table></figure><p>案例：</p><p>创建一个 itcast 数据库, 使用数据库默认的字符集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database itcast;</span><br></pre></td></tr></table></figure><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database itcast;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> itcast             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> student            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在同一个数据库服务器中，不能创建两个名称相同的数据库，否则将会报错。(也就是同一个数据库创建两遍会报错)</p><p><strong>报错的结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database itcast;</span><br><span class="line">ERROR <span class="number">1007</span> (HY000): Can<span class="string">&#x27;t create database &#x27;</span>itcast<span class="string">&#x27;; database exists</span></span><br><span class="line"><span class="string">mysql&gt; create database if not exists itcast;</span></span><br></pre></td></tr></table></figure><p>可以通过 i<strong>f not exists 参数</strong>来解决这个问题，数据库不存在, 则创建该数据库，如果存在，则不创建。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> extists itcast;</span><br></pre></td></tr></table></figure><p><strong>使用结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> itcast;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>创建一个 north 数据库，并且指定字符集</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database north <span class="keyword">default</span> charset utf8mb4 ;</span><br></pre></td></tr></table></figure><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database north <span class="keyword">default</span> charset utf8mb4</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> itcast             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> north              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> student            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>删除数据库</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [ if <span class="keyword">exists</span> ] 数据库名 ;</span><br></pre></td></tr></table></figure><p><strong>如果删除一个不存在的数据库，将会报错</strong>。此时，可以加上<strong>参数 if exists</strong> ，如果数据库存在，再 执行删除，否则不执行删除。</p><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database if <span class="keyword">exists</span> north;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221759330-800741048-20231127121716-x3ziv9h.png" alt="image-20230422173017680">​</p><blockquote><p><strong>切换数据库</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><p><strong>我们要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则是不能操作的。</strong>  比如，切换到 itcast 数据，执行如下 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use itcast;</span><br></pre></td></tr></table></figure><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use itcast</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h2 id="4-2-表操作"><a href="#4-2-表操作" class="headerlink" title="4.2 表操作"></a>4.2 表操作</h2><h3 id="4-2-1-表操作-—-gt-查询创建"><a href="#4-2-1-表操作-—-gt-查询创建" class="headerlink" title="4.2.1 表操作 —&gt; 查询创建"></a>4.2.1 表操作 —&gt; 查询创建</h3><blockquote><p><strong>查询当前数据库所有表</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p>注意 ：</p><ul><li><strong>使用表查询的前提是 use 当前的数据库</strong></li></ul><p>比如,我们可以切换到 sys 这个系统数据库,并查看系统数据库中的所有表结构。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use sys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p><strong>结果展示：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use sys;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_sys                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> host_summary                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> host_summary_by_file_io                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> host_summary_by_file_io_type                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> host_summary_by_stages                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> host_summary_by_statement_latency             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> host_summary_by_statement_type                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_stats_by_schema                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_stats_by_table                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_lock_waits                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> io_by_thread_by_latency                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> io_global_by_file_by_bytes                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> io_global_by_file_by_latency                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> io_global_by_wait_by_bytes                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> io_global_by_wait_by_latency                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> latest_file_io                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_by_host_by_current_bytes               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_by_thread_by_current_bytes             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_by_user_by_current_bytes               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_global_by_current_bytes                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_global_total                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> metrics                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> processlist                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ps_check_lost_instrumentation                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_auto_increment_columns                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_index_statistics                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_object_overview                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_redundant_indexes                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_table_lock_waits                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_table_statistics                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_table_statistics_with_buffer           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_tables_with_full_table_scans           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_unused_indexes                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> session                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> session_ssl_status                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statement_analysis                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statements_with_errors_or_warnings            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statements_with_full_table_scans              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statements_with_runtimes_in_95th_percentile   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statements_with_sorting                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statements_with_temp_tables                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys_config                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary_by_file_io                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary_by_file_io_type                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary_by_stages                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary_by_statement_latency             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary_by_statement_type                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> version                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> wait_classes_global_by_avg_latency            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> wait_classes_global_by_latency                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> waits_by_host_by_latency                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> waits_by_user_by_latency                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> waits_global_by_latency                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary_by_file_io                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary_by_file_io_type                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary_by_stages                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary_by_statement_latency           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary_by_statement_type              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$innodb_buffer_stats_by_schema               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$innodb_buffer_stats_by_table                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$innodb_lock_waits                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$io_by_thread_by_latency                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$io_global_by_file_by_bytes                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$io_global_by_file_by_latency                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$io_global_by_wait_by_bytes                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$io_global_by_wait_by_latency                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$latest_file_io                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$memory_by_host_by_current_bytes             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$memory_by_thread_by_current_bytes           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$memory_by_user_by_current_bytes             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$memory_global_by_current_bytes              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$memory_global_total                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$processlist                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$ps_digest_95th_percentile_by_avg_us         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$ps_digest_avg_latency_distribution          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$ps_schema_table_statistics_io               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_flattened_keys                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_index_statistics                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_table_lock_waits                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_table_statistics                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_table_statistics_with_buffer         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_tables_with_full_table_scans         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$session                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statement_analysis                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statements_with_errors_or_warnings          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statements_with_full_table_scans            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statements_with_runtimes_in_95th_percentile <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statements_with_sorting                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statements_with_temp_tables                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary_by_file_io                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary_by_file_io_type                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary_by_stages                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary_by_statement_latency           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary_by_statement_type              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$wait_classes_global_by_avg_latency          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$wait_classes_global_by_latency              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$waits_by_host_by_latency                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$waits_by_user_by_latency                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$waits_global_by_latency                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="number">101</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>查看指定表结构</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><p>通过这条指令，可以查看到<strong>指定表的字段，字段的类型、是否可以为 NULL</strong>，<strong>是否存在默认值等信息。</strong></p><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> tb_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>查询指定表的建表语句</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>通过这条指令，<strong>主要是用来查看建表语句的</strong>，而有部分参数我们在创建表的时候，并未指定也会查询 到，因为这部分是<strong>数据库的默认值</strong>，如：<strong>存储引擎、字符集等。</strong></p><p><strong>结果显示：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tb_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>   <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span></span><br><span class="line"></span><br><span class="line">                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> tb_user <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `gender` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>创建表结构</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [ COMMENT 字段<span class="number">1</span>注释 ],</span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释 ],</span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 [COMMENT 字段<span class="number">3</span>注释 ],</span><br><span class="line">......</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释 ]</span><br><span class="line">) [ COMMENT 表注释 ] ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：  <strong>[…] 内为可选参数，最后一个字段后面没有逗号</strong></p><p>比如，我们创建一张表 tb_user ，对应的结构如下，那么建表语句为：</p><div class="table-container"><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">age</th><th style="text-align:center">gender</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">陈平安</td><td style="text-align:center">19</td><td style="text-align:center">男</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">徐凤年</td><td style="text-align:center">23</td><td style="text-align:center">男</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">李长寿</td><td style="text-align:center">25</td><td style="text-align:center">男</td></tr></tbody></table></div><p><strong>创建语法展示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_user (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> gender <span class="type">varchar</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) comment <span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="4-2-2-表操作-—-gt-数据类型"><a href="#4-2-2-表操作-—-gt-数据类型" class="headerlink" title="4.2.2 表操作 —&gt; 数据类型"></a>4.2.2 表操作 —&gt; 数据类型</h3><p>MySQL 中的数据类型有很多，主要分为三类：<strong>数值类型</strong>、<strong>字符串类型</strong>、<strong>日期时间类</strong>型。</p><blockquote><p><strong>数值类型</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221759970-560171444-20231127121717-yhodmfy.png" alt="image-20230423090920746">​</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 年龄字段 <span class="comment">-- 不会出现负数, 而且人的年龄不会太大</span></span><br><span class="line">age tinyint unsigned</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 分数 <span class="comment">-- 总分100分, 最多出现一位小数</span></span><br><span class="line">score <span class="keyword">double</span>(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>字符串类型</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221800525-19883521-20231127121717-mrtip84.png" alt="image-20230423101815176">​</p><p><strong>注意：</strong></p><p><strong>char</strong> 与 <strong>varchar</strong> 都可以描述字符串，<strong>char 是定长字符串</strong>，<strong>指定长度多长，就占用多少个字符，和 字段值的长度无关</strong> 。<strong>而 varchar 是变长字符串，指定的长度为最大占用长度</strong> 。<strong>相对来说，char 的性 能会更高些。</strong></p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 用户名 username <span class="comment">------&gt; 长度不定, 最长不会超过50</span></span><br><span class="line">username <span class="type">varchar</span>(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 性别 gender <span class="comment">---------&gt; 存储值, 不是男,就是女</span></span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>). 手机号 phone <span class="comment">--------&gt; 固定长度为11</span></span><br><span class="line">phone <span class="type">char</span>(<span class="number">11</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>日期时间类型</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221801031-81344008-20231127121717-i9obu6x.png" alt="image-20230423102840777">​</p><p><strong>如：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 生日字段 birthday</span><br><span class="line">birthday <span class="type">date</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 创建时间 createtime</span><br><span class="line">createtime datetime</span><br></pre></td></tr></table></figure><h3 id="4-2-3-表操作-案例"><a href="#4-2-3-表操作-案例" class="headerlink" title="4.2.3 表操作-案例"></a>4.2.3 表操作-案例</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221801458-1949782738-20231127121717-0jrn8r2.png" alt="image-20230423103753973">​</p><p><strong>对应的建表语句如下:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">workno <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">idcard <span class="type">char</span>(<span class="number">18</span>) comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SQL 语句编写完毕之后，就可以在 MySQL 的命令行中执行 SQL，然后也可以通过 desc 指令查询表结构 信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>表结构创建好了，里面的 name 字段是 varchar 类型，最大长度为 10，也就意味着如果超过 10 将会报 错，如果我们想修改这个字段的类型 或 修改字段的长度该如何操作呢？接下来再来讲解 DDL 语句中， 如何操作表字段。</p><h3 id="4-2-4-表操作-修改"><a href="#4-2-4-表操作-修改" class="headerlink" title="4.2.4 表操作-修改"></a>4.2.4 表操作-修改</h3><blockquote><p><strong>添加字段</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure><p>案例：</p><p>为 emp 表增加一个新的字段”昵称”为 nickname，类型为 varchar(20)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> nickname <span class="type">varchar</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;昵称&#x27;</span>;</span><br></pre></td></tr></table></figure><p>效果显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> nickname <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;昵称&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>结果显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> nickname  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221801850-899687670-20231127121717-g1w1w0e.png" alt="image-20230423123706803">​</p><blockquote><p><strong>修改数据类型</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型 (长度)</span><br></pre></td></tr></table></figure><p>效果展示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp modify nickname <span class="type">varchar</span>(<span class="number">30</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221802198-201021965-20231127121717-5ewg2fq.png" alt="image-20230423124143177">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221802627-1668094539-20231127121717-xbozprc.png" alt="image-20230423124206923">​</p><blockquote><p><strong>修改字段名和字段类型</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><p>将 emp 表的 nickname 字段修改为 username，类型为 varchar(30)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp CHANGE nickname username <span class="type">varchar</span>(<span class="number">30</span>) COMMENT <span class="string">&#x27;昵称&#x27;</span>;</span><br></pre></td></tr></table></figure><p>效果展示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp change nickname username <span class="type">varchar</span>(<span class="number">30</span>) comment <span class="string">&#x27;昵称&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221803020-1547027412-20231127121717-hspl377.png" alt="image-20230423124605714">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> nickname  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221803427-166402159-20231127121717-uvnyaoh.png" alt="image-20230423124621768">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> username  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>删除字段</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><p>案例：</p><p>将 emp 表的字段 username 删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> username;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221803834-33311679-20231127121717-ce4lllv.png" alt="image-20230423124943398">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> username  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221804230-1409675547-20231127121718-4b5f6y7.png" alt="image-20230423124958626">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> username;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>修改表名</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure><p>案例:</p><p>将 emp 表的表名修改为 employee</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp RENAME <span class="keyword">TO</span> employee;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221804546-358246442-20231127121718-fs72rpx.png" alt="image-20230423125202943">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp rename <span class="keyword">to</span> employee;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221804903-858357145-20231127121718-473rj55.png" alt="image-20230423125338360">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_itcast <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> employee         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tb_user          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="4-2-5-表操作-删除"><a href="#4-2-5-表操作-删除" class="headerlink" title="4.2.5 表操作-删除"></a>4.2.5 表操作-删除</h3><blockquote><p><strong>删除表</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">EXISTS</span> ] 表名;</span><br></pre></td></tr></table></figure><p>可选项 <strong>IF EXISTS 代表，只有表名存在时才会删除该表，表名不存在，则不执行删除操作</strong>(<strong>如果不 加该参数项，删除一张不存在的表，执行将会报错</strong>)。</p><p>案例:</p><p>如果 tb_user 表存在，则删除 tb_user 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>执行前：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_itcast <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> employee         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tb_user          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>执行后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_itcast <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> employee         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>删除指定表, 并重新创建表</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">truncate</span> <span class="keyword">table</span> employee;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">truncate</span> <span class="keyword">table</span> employee;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_itcast <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> employee         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意: 在删除表的时候，表中的全部数据也都会被删除。</strong></p></blockquote><h1 id="5-图形化界面工具"><a href="#5-图形化界面工具" class="headerlink" title="5. 图形化界面工具"></a>5. 图形化界面工具</h1><h2 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1 安装"></a>5.1 安装</h2><ol><li><p>找到资料中准备好的安装包，双击开始安装</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221805268-1162203395-20231127121718-ltajb5c.png" alt="image-20230423130211231">​</p></li><li><p>点击 next，一步一步的完成安装</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221805770-1360948783-20231127121718-ts25kfj.png" alt="image-20230423130230386">​</p></li><li><p>选择 DataGrip 的安装目录，然后选择下一步</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221806319-1350096740-20231127121718-skmqjbh.png" alt="image-20230423130258571">​</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221806790-352462778-20231127121718-y8djxxy.png" alt="image-20230423130317687">​</p></li><li><p>下一步，执行安装</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221807208-1054886330-20231127121718-tpmihmb.png" alt="image-20230423130334254">​</p><p> <img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221807657-963900819-20231127121718-vn8xre7.png" alt="image-20230423130342663">​</p></li></ol><h2 id="5-2-使用"><a href="#5-2-使用" class="headerlink" title="5.2 使用"></a>5.2 使用</h2><blockquote><p><strong>1. 添加数据源</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221808194-1666694291-20231127121719-hvcuto6.png" alt="image-20230423130426665">​</p><p>配置以及驱动 jar 包下载完毕之后，就可以点击 “Test Connection” 就可以测试，是否可以连接 MySQL，如果出现 “<strong>Successed</strong>“，就表名连接成功了 。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221808692-1090481734-20231127121719-8qoqggh.png" alt="image-20230423130840015">​</p><blockquote><p><strong>2. 展示所有数据库</strong></p></blockquote><p>连接上了 MySQL 服务之后，并未展示出所有的数据库，此时，我们需要设置，展示所有的数据库，具体 操作如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221809068-1324353060-20231127121719-n6us21n.png" alt="image-20230423130901734">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221809436-1448677270-20231127121719-wy941go.png" alt="image-20230423130920225">​</p><blockquote><p><strong>3. 创建数据库</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221809906-372530165-20231127121719-l9vya1j.png" alt="image-20230423131000791">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">注意:</span><br><span class="line"></span><br><span class="line">以下两种方式都可以创建数据库：</span><br><span class="line"></span><br><span class="line">A. <span class="keyword">create</span> database db01;</span><br><span class="line"></span><br><span class="line">B. <span class="keyword">create</span> schema db01;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>4. 创建表</strong></p></blockquote><p>在指定的数据库上面右键，选择<strong>new —&gt; Table</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221810404-1491780438-20231127121719-2baoqhn.png" alt="image-20230423131113903">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221810977-589538117-20231127121719-xm9qnpw.png" alt="image-20230423131127797">​</p><blockquote><p><strong>5. 修改表结构</strong></p></blockquote><p>在需要修改的表上，右键选择  <strong>&quot;Modify Table…&quot;</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221811623-850205127-20231127121719-ydf2eif.png" alt="image-20230423131231755">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221812064-1684590522-20231127121720-azeeq7z.png" alt="image-20230423131244726">​</p><blockquote><p>如果想增加字段，直接点击+号，录入字段信息，然后点击 Execute 即可。</p><p>如果想删除字段，直接点击-号，就可以删除字段，然后点击 Execute 即可。</p><p>如果想修改字段，双击对应的字段，修改字段信息，然后点击 Execute 即可。</p><p>如果要修改表名，或表的注释，直接在输入框修改，然后点击 Execute 即可。</p><p><strong>6. 在 DataGrip 中执行 SQL 语句</strong></p></blockquote><p>在指定的数据库上，右键，选择 <strong>New —&gt; Query Console</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221812575-119534486-20231127121720-8z1hfef.png" alt="image-20230423131348053">​</p><p>然后就可以在打开的 Query Console 控制台，并在控制台中编写 SQL，执行 SQL。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221813037-1146047136-20231127121720-1pxp5mz.png" alt="image-20230423131403442">​</p><h1 id="6-DML"><a href="#6-DML" class="headerlink" title="6. DML"></a>6. DML</h1><p>DML 英文全称是 Data Manipulation Language(数据操作语言)，<strong>用来对数据库中表的数据记录进 行增、删、改操作。</strong></p><ul><li><strong>添加数据（INSERT）</strong></li><li><strong>修改数据（UPDATE）</strong></li><li><strong>删除数据（DELETE）</strong></li></ul><h2 id="6-1-添加数据"><a href="#6-1-添加数据" class="headerlink" title="6.1 添加数据"></a>6.1 添加数据</h2><blockquote><p><strong>1. 给指定字段添加数据</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>案例:</p><p>给 employee 表所有的字段添加数据 ；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(id,workno,name,gender,age,idcard,entrydate)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Itcast&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;123456789012345678&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>插入数据完成之后，我们有两种方式，查询数据库的数据：</p><p><strong>A. 方式一</strong></p><p>在左侧的表名上双击，就可以查看这张表的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221813424-1577950796-20231127121720-76nfjpv.png" alt="image-20230423195708841">​</p><p><strong>B. 方式二</strong></p><p>可以直接一条查询数据的 SQL 语句, 语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><p>查询结果如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> workno <span class="operator">|</span> name   <span class="operator">|</span> gender <span class="operator">|</span> age  <span class="operator">|</span> idcard             <span class="operator">|</span> entrydate  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span> 徐凤年 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">23</span> <span class="operator">|</span> <span class="number">333333333333333333</span> <span class="operator">|</span> <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>案例:</p><p>给 employee 表所有的字段添加数据</p><p>执行如下 SQL，添加的年龄字段值为-1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(id,workno,name,gender,age,idcard,entrydate)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Itcast&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">-1</span>,<span class="string">&#x27;123456789012345678&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行上述的 SQL 语句时，报错了，具体的错误信息如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> employee(id , workno , name , gender , age , idcard , entrydate) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Itcast&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">-1</span>,<span class="string">&#x27;123456789012345678&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1264</span> (<span class="number">22003</span>): <span class="keyword">Out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">value</span> <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>因为 employee 表的 age 字段类型为 <strong>tinyint</strong>，而且还是<strong>无符号的 unsigned</strong> ，所以<strong>取值只能在 0-255 之间。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221813821-820043321-20231127121720-1jx2vj4.png" alt="image-20230423200022139">​</p><blockquote><p><strong>2. 给全部字段添加数据</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>案例：</p><p>插入数据到 employee 表，具体的 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;张无忌&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;123456789012345670&#x27;</span>,<span class="string">&#x27;2005-01-</span></span><br><span class="line"><span class="string">01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">2</span> , <span class="string">&#x27;2&#x27;</span> , <span class="string">&#x27;张无忌&#x27;</span> , <span class="string">&#x27;男&#x27;</span> , <span class="number">18</span> , <span class="string">&#x27;123456789012345670&#x27;</span> , <span class="string">&#x27;2005-01-01&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> workno <span class="operator">|</span> name   <span class="operator">|</span> gender <span class="operator">|</span> age  <span class="operator">|</span> idcard             <span class="operator">|</span> entrydate  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span> 徐凤年 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">23</span> <span class="operator">|</span> <span class="number">333333333333333333</span> <span class="operator">|</span> <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span>      <span class="operator">|</span> 张无忌 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">123456789012345670</span> <span class="operator">|</span> <span class="number">2005</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>3. 批量添加数据</strong></p></blockquote><p><strong>语法：</strong></p><p>第一种：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值</span><br><span class="line"><span class="number">1</span>, 值<span class="number">2</span>, ...) ;</span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...) ;</span><br></pre></td></tr></table></figure><p>案例：</p><p>批量插入数据到 employee 表，具体的 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;韦一笑&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;123456789012345670&#x27;</span>,<span class="string">&#x27;2005-01-</span></span><br><span class="line"><span class="string">01&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;123456789012345670&#x27;</span>,<span class="string">&#x27;2005-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;韦一笑&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;123456789012345670&#x27;</span>,<span class="string">&#x27;2005-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;123456789012345670&#x27;</span>,<span class="string">&#x27;2005-01-01&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">Records: <span class="number">2</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> workno <span class="operator">|</span> name   <span class="operator">|</span> gender <span class="operator">|</span> age  <span class="operator">|</span> idcard             <span class="operator">|</span> entrydate  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span> 徐凤年 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">23</span> <span class="operator">|</span> <span class="number">333333333333333333</span> <span class="operator">|</span> <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span>      <span class="operator">|</span> 张无忌 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">123456789012345670</span> <span class="operator">|</span> <span class="number">2005</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="number">3</span>      <span class="operator">|</span> 韦一笑 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">38</span> <span class="operator">|</span> <span class="number">123456789012345670</span> <span class="operator">|</span> <span class="number">2005</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> <span class="number">4</span>      <span class="operator">|</span> 赵敏   <span class="operator">|</span> 女     <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">123456789012345670</span> <span class="operator">|</span> <span class="number">2005</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><strong>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</strong></li><li><strong>字符串和日期型数据应该包含在引号中。</strong></li><li><strong>插入的数据大小，应该在字段的规定范围内。</strong></li></ul><h2 id="6-2-修改数据"><a href="#6-2-修改数据" class="headerlink" title="6.2 修改数据"></a>6.2 修改数据</h2><blockquote><p><strong>修改数据的具体语法为:</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span> , 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span> , .... [ <span class="keyword">WHERE</span> 条件 ] ;</span><br></pre></td></tr></table></figure><p>案例：</p><p>A. 修改 id 为 1 的数据，将 name 修改为陈平安</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;陈平安&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221814232-369002850-20231127121720-qdo3ccd.png" alt="image-20230426083731355">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221814578-1062717177-20231127121720-bbxm7fl.png" alt="image-20230426084008534">​</p><p>B. 修改 id 为 1 的数据, 将 name 修改为小昭, gender 修改为 女</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;小昭&#x27;</span> , gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221814982-920438443-20231127121720-edhel6i.png" alt="image-20230426084114734">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221815412-661545022-20231127121720-6uuf4l5.png" alt="image-20230426084255680">​</p><p>C. 将所有的员工入职日期修改为 2008-01-01</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> entrydate <span class="operator">=</span> <span class="string">&#x27;2008-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221815770-1967120081-20231127121720-c5mgxr3.png" alt="image-20230426084349465">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221816162-1676998925-20231127121721-r58rw08.png" alt="image-20230426084506993">​</p><blockquote><p><strong>注意事项:</strong></p><p><strong>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</strong></p></blockquote><h2 id="6-3-删除数据"><a href="#6-3-删除数据" class="headerlink" title="6.3 删除数据"></a>6.3 删除数据</h2><blockquote><p><strong>删除数据的具体语法为</strong>：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [ <span class="keyword">WHERE</span> 条件 ] ;</span><br></pre></td></tr></table></figure><p>案例:</p><p>A. 删除 gender 为女的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> employee <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221816600-505597524-20231127121721-07e9awn.png" alt="image-20230426084840545">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221816990-750263586-20231127121721-oseref7.png" alt="image-20230426084913968">​</p><p>B. 删除所有员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221816990-750263586-20231127121721-t52w1dc.png" alt="image-20230426084913968">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221817297-740564317-20231127121721-m6syuuo.png" alt="image-20230426085111316">​</p><blockquote><p><strong>注意事项：</strong></p><ul><li><strong>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数 据。</strong></li><li><strong>DELETE 语句不能删除某一个字段的值(可以使用 UPDATE，将该字段值置为 NULL 即 可)。</strong></li><li><strong>当进行删除全部数据操作时，datagrip 会提示我们，询问是否确认删除，我们直接点击 Execute 即可。</strong></li></ul></blockquote><h1 id="7-DQL"><a href="#7-DQL" class="headerlink" title="7.DQL"></a>7.DQL</h1><p>DQL 英文全称是<code>Data Query Language(数据查询语言)</code>​，数据查询语言，<code>用来查询数据库中表的记录</code>​。</p><blockquote><p><strong>查询关键字: SELECT</strong></p></blockquote><p>在一个正常的业务系统中，查询操作的频次是要远高于增删改的，当我们去访问企业官网、电商网站， 在这些网站中我们所看到的数据，实际都是需要从数据库中查询并展示的。而且在查询的过程中，可能 还会涉及到条件、排序、分页等操作。</p><p><strong>数据准备</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">workno <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">idcard <span class="type">char</span>(<span class="number">18</span>) comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">workaddress <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;工作地址&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;00001&#x27;</span>, <span class="string">&#x27;柳岩666&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;123456789&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;00002&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;123456789012345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-09-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;00003&#x27;</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;123456789712345670&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2005-08-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;00004&#x27;</span>, <span class="string">&#x27;赵敏&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;123456757123845670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2009-12-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;00005&#x27;</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;123456769012345678&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2007-07-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;00006&#x27;</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;12345678931234567X&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2006-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;00007&#x27;</span>, <span class="string">&#x27;范瑶&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">40</span>, <span class="string">&#x27;123456789212345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;00008&#x27;</span>, <span class="string">&#x27;黛绮丝&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;123456157123645670&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;00009&#x27;</span>, <span class="string">&#x27;范凉凉&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">45</span>, <span class="string">&#x27;123156789012345678&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2010-04-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;00010&#x27;</span>, <span class="string">&#x27;陈友谅&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">53</span>, <span class="string">&#x27;123456789012345670&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2011-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;00011&#x27;</span>, <span class="string">&#x27;张士诚&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">55</span>, <span class="string">&#x27;123567897123465670&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;00012&#x27;</span>, <span class="string">&#x27;常遇春&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;123446757152345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2004-02-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;00013&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">88</span>, <span class="string">&#x27;123656789012345678&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2020-11-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;00014&#x27;</span>, <span class="string">&#x27;灭绝&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">65</span>, <span class="string">&#x27;123456719012345670&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;00015&#x27;</span>, <span class="string">&#x27;胡青牛&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">70</span>, <span class="string">&#x27;12345674971234567X&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2018-04-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">&#x27;00016&#x27;</span>, <span class="string">&#x27;周芷若&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="keyword">null</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2012-06-01&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="7-1-基本语法"><a href="#7-1-基本语法" class="headerlink" title="7.1 基本语法"></a>7.1 基本语法</h2><blockquote><p><strong>DQL 查询语句，语法结构如下：</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><p><strong>语法拆分：</strong></p><ul><li>基本查询（不带任何条件）</li><li>条件查询（WHERE）</li><li>聚合函数（count、max、min、avg、sum）</li><li>分组查询（group by）</li><li>排序查询（order by）</li><li>分页查询（limit）</li></ul><h2 id="7-2-基础查询"><a href="#7-2-基础查询" class="headerlink" title="7.2 基础查询"></a>7.2 基础查询</h2><p><strong>在基本查询的 DQL 语句中，不带任何的查询条件，查询的语法如下：</strong></p><blockquote><p><strong>1. 查询多个字段</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3</span> ... <span class="keyword">FROM</span> 表名 ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意 : * 号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）。</strong></p><p><strong>2. 字段设置别名</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [ <span class="keyword">AS</span> 别名<span class="number">1</span> ] , 字段<span class="number">2</span> [ <span class="keyword">AS</span> 别名<span class="number">2</span> ] ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [ 别名<span class="number">1</span> ] , 字段<span class="number">2</span> [ 别名<span class="number">2</span> ] ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><blockquote><p><strong>3. 去除重复记录</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>案例：</p><blockquote><p>A. 查询指定字段 name, workno, age 并返回</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,workno,age <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221817680-1204751724-20231127121721-zg8xt2j.png" alt="image-20230426095350030">​</p><blockquote><p>B. 查询返回所有字段</p></blockquote><p><strong>第一种：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id ,workno,name,gender,age,idcard,workaddress,entrydate <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><strong>第二种：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>结果显示是想同的 ， 不过更建议使用第一中方法：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221818153-54577779-20231127121721-jkwnab2.png" alt="image-20230426094712156">​</p><blockquote><p>C. 查询所有员工的工作地址,起别名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> workaddress <span class="keyword">as</span> <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- as可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> workaddress <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>没有起别名前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221818621-333086956-20231127121721-2f75nwk.png" alt="image-20230426095043443">​</p><p>起别名之后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221818986-862277531-20231127121721-6k49mim.png" alt="image-20230426095015969">​</p><blockquote><p>D. 查询公司员工的上班地址有哪些(不要重复)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> workaddress <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>使用该语法前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221819359-1153174317-20231127121721-ipe67pa.png" alt="image-20230426095233573">​</p><p>使用该语法之后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221819688-1228775014-20231127121721-e3c58tn.png" alt="image-20230426095310409">​</p><h2 id="7-3-条件查询"><a href="#7-3-条件查询" class="headerlink" title="7.3 条件查询"></a>7.3 条件查询</h2><blockquote><p><strong>1.语法</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表 ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>2. 条件</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221820070-605700995-20231127121721-d4k96xm.png" alt="image-20230427131853007">​</p><p><strong>常用的逻辑运算符如下:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221820526-1625811114-20231127121721-0ygr5lr.png" alt="image-20230427131911542">​</p><p>案例：</p><p>A. 查询年龄等于 88 的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">88</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221820935-1163852875-20231127121721-yiisgca.png" alt="image-20230427132112210">​</p><p>B. 查询年龄小于 20 的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221821430-226321716-20231127121722-k6rfup7.png" alt="image-20230427132243237">​</p><p>C. 查询年龄小于等于 20 的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221821887-387042361-20231127121722-fm3rfk6.png" alt="image-20230427132449264">​</p><p>D. 查询没有身份证号的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221822325-810683804-20231127121722-zloezrd.png" alt="image-20230427132639831">​</p><p>E. 查询有身份证号的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221822837-535928460-20231127121722-rbszlb3.png" alt="image-20230427135551768">​</p><p>F. 查询年龄不等于 88 的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">88</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;&gt;</span> <span class="number">88</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221823350-1683352113-20231127121722-xubjean.png" alt="image-20230427135745897">​</p><p>G. 查询年龄在 15 岁(包含) 到 20 岁(包含)之间的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">15</span> <span class="operator">&amp;&amp;</span> age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">15</span> <span class="keyword">and</span> age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="assets/net-img-2942345-20230429221823851-583667052-20231127121722-3igx7pa.png" alt="image-20230427140055874">​</p><p>H. 查询性别为 女 且年龄小于 25 岁的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">and</span> age <span class="operator">&lt;</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221824304-346197296-20231127121722-wgbfg51.png" alt="image-20230427140217223">​</p><p>I. 查询年龄等于 18 或 20 或 40 的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">20</span> <span class="keyword">or</span> age <span class="operator">=</span><span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="keyword">in</span>(<span class="number">18</span>,<span class="number">20</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221824752-2137500427-20231127121722-b8g8ptj.png" alt="image-20230427140405658">​</p><p>J. 查询姓名为两个字的员工信息 _ %</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221825240-954765200-20231127121723-h4ol96f.png" alt="image-20230427140633058">​</p><p>K. 查询身份证号最后一位是 X 的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;%X&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;_________________X&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221825695-1635507923-20231127121723-gwsc5r9.png" alt="image-20230427140839834">​</p><h2 id="7-4-聚合函数"><a href="#7-4-聚合函数" class="headerlink" title="7.4 聚合函数"></a>7.4 聚合函数</h2><p><strong>介绍：</strong></p><blockquote><p><strong>将一列数据作为一个整体，进行纵向计算 。</strong></p></blockquote><p><strong>常见的聚合函数</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221826054-126717578-20231127121723-sof9089.png" alt="image-20230428204930049">​</p><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数(字段列表) <span class="keyword">FROM</span> 表名 ;</span><br></pre></td></tr></table></figure><blockquote><p>注意 : NULL 值是不参与所有聚合函数运算的。</p></blockquote><p>对于 count 聚合函数，<strong>统计符合条件的总记录数，还可以通过 count(数字/字符串)的形式进行统计查询</strong>，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><blockquote><p>对于 count(*) 、count(字段)、 count(1) 的具体原理，我们在进阶篇中 SQL 优化部分会详 细讲解，此处大家只需要知道如何使用即可。</p></blockquote><h2 id="7-5-分组查询"><a href="#7-5-分组查询" class="headerlink" title="7.5 分组查询"></a>7.5 分组查询</h2><ol><li><p><strong>语法</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [ <span class="keyword">WHERE</span> 条件 ] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [ <span class="keyword">HAVING</span> 分组后过滤条件 ];</span><br></pre></td></tr></table></figure></li><li><strong>where 与 having 区别</strong></li></ol><ul><li><strong>执行时机不同</strong>：where 是分组之前进行过滤，不满足 where 条件，不参与分组；而 having 是分组 之后对结果进行过滤。</li><li><strong>判断条件不同：where 不能对聚合函数进行判断，而 having 可以。</strong></li></ul><blockquote><p>注意事项:</p><p>• 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</p><p>• 执行顺序: <strong>where &gt; 聚合函数 &gt; having </strong></p><p>• 支持多字段分组, 具体语法为 : <strong>group by columnA,columnB</strong></p></blockquote><h2 id="7-6-排序查询"><a href="#7-6-排序查询" class="headerlink" title="7.6 排序查询"></a>7.6 排序查询</h2><p>排序在日常开发中是非常常见的一个操作，有升序排序，也有降序排序。</p><ol><li><p><strong>语法：</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span> , 字段<span class="number">2</span> 排序方式<span class="number">2</span> ;</span><br></pre></td></tr></table></figure></li><li><p>排序方式</p><ul><li>ASC : 升序(默认值)</li><li><p>DESC: 降序</p><blockquote><p>注意事项：</p><ul><li>如果是升序, 可以不指定排序方式 ASC ;</li><li>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</li></ul></blockquote></li></ul></li></ol><p>案例：</p><p>A. 根据年龄对公司的员工进行升序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221826530-1647890493-20231127121723-y07w6ei.png" alt="image-20230429131551172">​</p><p>B. 根据入职时间, 对员工进行降序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>结果显示</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221827098-698755346-20231127121723-nr23kh5.png" alt="image-20230429131735436">​</p><p>C. 根据年龄对公司的员工进行升序排序 , 年龄相同 , 再按照入职时间进行降序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> , entrydate <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>结果显示</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221827620-557032807-20231127121723-n6udw5j.png" alt="image-20230429131941837">​</p><h2 id="7-7-分页查询"><a href="#7-7-分页查询" class="headerlink" title="7.7 分页查询"></a>7.7 分页查询</h2><p>分页操作在业务系统开发时，也是非常常见的一个功能，我们在网站中看到的各种各样的分页条，后台 都需要借助于数据库的分页操作。</p><ol><li><p><strong>语法：</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT 起始索引, 查询记录数 ;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p><ul><li><strong>起始索引从 0 开始，起始索引 = （查询页码 - 1）* 每页显示记录数。</strong></li><li><strong>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL 中是 LIMIT。</strong></li><li><strong>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10。</strong></li></ul></blockquote></li></ol><p>案例：</p><p>A. 查询第 1 页员工数据, 每页展示 10 条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221828091-1014453429-20231127121723-uilirsl.png" alt="image-20230429132320191">​</p><p>B. 查询第 2 页员工数据, 每页展示 10 条记录 ————&gt; (页码-1)*页展示记录数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">10</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221828563-1943528113-20231127121724-itg594h.png" alt="image-20230429132505487">​</p><h2 id="7-8-执行顺序"><a href="#7-8-执行顺序" class="headerlink" title="7.8 执行顺序"></a>7.8 执行顺序</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221828997-594190798-20231127121724-6n881fe.png" alt="image-20230429133850462">​</p><p>验证：</p><p>查询年龄大于 15 的员工姓名、年龄，并根据年龄进行升序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name , age <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221829501-382405608-20231127121724-wkgfekn.png" alt="image-20230429134116935">​</p><p>在查询时，我们给 emp 表起一个别名 e，然后在 select 及 where 中使用该别名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name , e.age <span class="keyword">from</span> emp e <span class="keyword">where</span> e.age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221829501-382405608-20231127121724-72hndt2.png" alt="image-20230429134116935">​</p><blockquote><p>执行上述 SQL 语句后，我们看到依然可以正常的查询到结果，此时就说明： from 先执行, 然后 where 和 select 执行。那 where 和 select 到底哪个先执行呢?</p></blockquote><p>此时我们可以给 select 后面的字段起别名，然后在 where 中使用这个别名，然后看看是否可 以执行成功。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name ename , e.age eage <span class="keyword">from</span> emp e <span class="keyword">where</span> eage <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>执行上述 SQL 报错了:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221829974-469592531-20231127121724-lvc2tne.png" alt="image-20230429134533105">​</p><blockquote><p>由此我们可以得出结论: <strong>from 先执行，然后执行 where ， 再执行 select 。</strong></p></blockquote><p>接下来，我们再执行如下 SQL 语句，查看执行效果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name ename , e.age eage <span class="keyword">from</span> emp e <span class="keyword">where</span> e.age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> eage <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221830424-858321476-20231127121724-r4qm64s.png" alt="image-20230429134733358">​</p><p>结果执行成功。 那么也就验证了: order by 是在 select 语句之后执行的。</p><blockquote><p>综上所述，我们可以看到 DQL 语句的<strong>执行顺序为： from … where … group by … having … select … order by … limit …</strong></p></blockquote><h1 id="8-DCL"><a href="#8-DCL" class="headerlink" title="8. DCL"></a>8. DCL</h1><blockquote><p>DCL 英文全称是 Data Control Language(数据控制语言)，<strong>用来管理数据库用户、控制数据库的访 问权限。</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221830900-2134093449-20231127121724-l8jyzx9.png" alt="image-20230429215032354">​</p><h2 id="8-1-管理用户"><a href="#8-1-管理用户" class="headerlink" title="8.1 管理用户"></a>8.1 管理用户</h2><blockquote><p><strong>1. 查询用户</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.user;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221831329-393013424-20231127121724-ypu2pkq.png" alt="image-20230429215243174">​</p><p>其中 <strong>Host 代表当前用户访问的主机</strong>, 如果为 localhost, 仅代表只能够在当前本机访问，是不可以 远程访问的。 <strong>User 代表的是访问该数据库的用户名</strong>。在 MySQL 中需要通过 Host 和 User 来唯一标识一 个用户。</p><blockquote><p><strong>2. 创建用户</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>3. 修改用户密码</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span> ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>4. 删除用户</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p><ul><li><strong>在 MySQL 中需要通过用户名@主机名的方式，来唯一标识一个用户。</strong></li><li><strong>主机名可以使用 % 通配。</strong></li><li><strong>这类 SQL 开发人员操作的比较少，主要是 DBA（ Database Administrator 数据库 管理员）使用。</strong></li></ul></blockquote><p>案例：</p><p>A. 创建用户 itcast, 只能够在当前主机 localhost 访问, 密码 123456;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221831863-1591669678-20231127121725-nn1n5d7.png" alt="image-20230429220415116">​</p><p>B. 创建用户 heima, 可以在任意主机访问该数据库, 密码 123456;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221832395-440530340-20231127121725-trol0ah.png" alt="image-20230429220728489">​</p><p>C. 修改用户 heima 的访问密码为 1234;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;1234&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221832962-1585160389-20231127121725-ismsqkb.png" alt="image-20230429221021218">​</p><p>D. 删除 itcast@localhost 用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221833564-1316229773-20231127121725-l0aeob7.png" alt="image-20230429221306572">​</p><h2 id="8-2-权限控制"><a href="#8-2-权限控制" class="headerlink" title="8.2 权限控制"></a>8.2 权限控制</h2><p>MySQL 中定义了很多种权限，但是常用的就以下几种：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221833965-675536777-20231127121725-j9owltd.png" alt="image-20230429221508473">​</p><blockquote><p><strong>1. 查询权限</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>2. 授予权限</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>3. 撤销权限</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><ul><li><strong>多个权限之间，使用逗号分隔</strong></li><li><strong>授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</strong></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-MySQL概述</title>
      <link href="/posts/629aaf98.html"/>
      <url>/posts/629aaf98.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据库相关概念"><a href="#1-数据库相关概念" class="headerlink" title="1. 数据库相关概念"></a>1. 数据库相关概念</h1><blockquote><p>数据库 ， 数据库管理系统 ，SQL</p></blockquote><div class="table-container"><table><thead><tr><th>名称</th><th>全称</th><th>简称</th></tr></thead><tbody><tr><td>数据库</td><td><strong>存储数据的仓库</strong>，数据是有组织的进行存储</td><td>DataBase（DB）</td></tr><tr><td>数据库管理系统</td><td>操纵和管理数据库的大型软件</td><td>DataBase Management System (DBMS)</td></tr><tr><td>SQL</td><td>操作关系型数据库的编程语言，定义了一套操作 关系型数据库统一<strong>标准</strong></td><td>Structured Query Language (SQL)</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230422164020280-1485291161-20231127093306-rizzj17.png" alt="image-20230422160458690">​</p><p>目前主流的关系型数据库管理系统的市场占有率排名如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230422164020778-714225309-20231127093306-5o140kg.png" alt="image-20230422160535747">​</p><ul><li>Oracle：大型的收费数据库，Oracle 公司产品，价格昂贵。</li><li>MySQL：开源免费的中小型数据库，后来 Sun 公司收购了 MySQL，而 Oracle 又收购了 Sun 公司。 目前 Oracle 推出了收费版本的 MySQL，也提供了免费的社区版本。</li><li>SQL Server：Microsoft 公司推出的收费的中型数据库，C#、.net 等语言常用</li><li>PostgreSQL：开源免费的中小型数据库。 DB2：IBM 公司的大型收费数据库产品。</li><li>SQLLite：嵌入式的微型数据库。Android 内置的数据库采用的就是该数据库。</li><li>MariaDB：开源免费的中小型数据库。是 MySQL 数据库的另外一个分支、另外一个衍生产品，与 MySQL 数据库有很好的兼容性。</li></ul><blockquote><p>而不论我们使用的是上面的哪一个关系型数据库，最终在操作时，都是使用 SQL 语言来进行统一操作， 因为我们前面讲到 SQL 语言，是操作关系型数据库的 <strong>统一标准</strong></p></blockquote><h1 id="2-MySQL-数据库"><a href="#2-MySQL-数据库" class="headerlink" title="2. MySQL 数据库"></a>2. MySQL 数据库</h1><h2 id="2-1-MySQL-的下载安装"><a href="#2-1-MySQL-的下载安装" class="headerlink" title="2.1 MySQL 的下载安装"></a>2.1 MySQL 的下载安装</h2><p><strong>详见</strong>： <a href="https://www.cnblogs.com/NorthPoet/p/16901095.html">https://www.cnblogs.com/NorthPoet/p/16901095.html</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><blockquote><p>其中 ： -u 指定连接用户名 ，-p 指定连接密码</p></blockquote><h2 id="2-2-数据模型"><a href="#2-2-数据模型" class="headerlink" title="2.2 数据模型"></a>2.2 数据模型</h2><h3 id="2-2-1-关系型数据库（RDBMS）"><a href="#2-2-1-关系型数据库（RDBMS）" class="headerlink" title="2.2.1 关系型数据库（RDBMS）"></a>2.2.1 关系型数据库（RDBMS）</h3><blockquote><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库。</p></blockquote><p>而所谓二维表，指的是由行和列组成的表，如下图（<strong>就类似于 Excel 表格数据，有表头、有列、有行， 还可以通过一列关联另外一个表格中的某一列数据</strong>）。我们之前提到的 MySQL、Oracle、DB2、 SQLServer 这些都是属于关系型数据库，里面都是基于二维表存储数据的。简单说，基于二维表存储 数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230422164021137-2021991269-20231127093306-rgg297h.png" alt="image-20230422163441345">​</p><p><strong>特点：</strong></p><ul><li><strong>使用表存储数据，格式统一，便于维护。</strong></li><li><strong>使用 SQL 语言操作，标准统一，使用方便。</strong></li></ul><h3 id="2-2-2-数据模型"><a href="#2-2-2-数据模型" class="headerlink" title="2.2.2 数据模型"></a>2.2.2 数据模型</h3><blockquote><p>MySQL 是关系型数据库，是基于二维表进行数据存储的，具体的结构图下:</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230422164021517-247250016-20231127093306-8n5flg2.png" alt="image-20230422163705424">​</p><ul><li><strong>我们可以通过 MySQL 客户端连接数据库管理系统 DBMS，然后通过 DBMS 操作数据库。</strong></li><li><strong>可以使用 SQL 语句，通过数据库管理系统操作数据库，以及操作数据库中的表结构及数据。</strong></li><li><strong>一个数据库服务器中可以创建多个数据库</strong>，<strong>一个数据库中也可以包含多张表</strong>，<strong>而一张表中又可以包 含多行记录。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. IDEA的安装与使用（上）</title>
      <link href="/posts/ed8ba887.html"/>
      <url>/posts/ed8ba887.html</url>
      
        <content type="html"><![CDATA[<h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194227836-518611559.png" alt="第1阶段：Java基本语法-第04章" style="zoom:50%;" /></p><hr><p> <strong>【Why IDEA ?】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194235723-907595215-20230929073515-e3hopcz.png" alt="image-20221018105217845">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194228436-291230161.jpg" alt="2022-10-18_11-00-29" style="zoom:80%;" /></p><blockquote><p>【注】JetBrains官方说明：</p><p>尽管我们采取了多种措施确保受访者的代表性，但结果可能会略微偏向 JetBrains 产品的用户，因为这些用户更有可能参加调查。</p></blockquote><p>此外，2022年，某美国软件开发商在对近千名专业的Java开发者调研后，发布了《2022年Java开发者生产力报告》。报告提到：JetBrains 的 IntelliJ IDEA是最受欢迎的 Java IDE，占 <code>48%</code>​，其次是 Eclipse，占 24%，Visual Studio Code 占 18%。</p><hr><p>本着”<code>工欲善其事必先利其器</code>​”的精神，本章从IDEA的介绍、安装、设置入手，讲解IDEA中项目的创建、快捷键与模板的使用、断点调试、常用插件等。</p><h2 id="1-认识IntelliJ-IDEA"><a href="#1-认识IntelliJ-IDEA" class="headerlink" title="1. 认识IntelliJ IDEA"></a>1. 认识IntelliJ IDEA</h2><h3 id="1-1-JetBrains-公司介绍"><a href="#1-1-JetBrains-公司介绍" class="headerlink" title="1.1 JetBrains  公司介绍"></a>1.1 JetBrains  公司介绍</h3><p>IDEA，是 JetBrains (<a href="https://www.jetbrains.com/)公司的产品，该公司成立于2000年，总部位于捷克的布拉格，致力于为开发者打造最高效智能的开发工具。">https://www.jetbrains.com/)公司的产品，该公司成立于2000年，总部位于捷克的布拉格，致力于为开发者打造最高效智能的开发工具。</a></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194228810-972333514.png" alt="1576217376761" style="zoom:80%;" /></p><p>公司旗下还有其它产品，比如：</p><ul><li>WebStorm：用于开发 JavaScript、HTML5、CSS3 等前端技术</li><li>PyCharm：用于开发 python</li><li>PhpStorm：用于开发 PHP</li><li>RubyMine：用于开发 Ruby/Rails</li><li>AppCode：用于开发 Objective - C/Swift</li><li>CLion：用于开发 C/C++</li><li>DataGrip：用于开发数据库和 SQL</li><li>Rider：用于开发.NET</li><li>GoLand：用于开发 Go</li></ul><p>用于开发 Android的Android Studio，也是Google 基于 IDEA 社区版进行迭代的。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194236236-408473233-20230929073515-x0io18d.png" alt="1593264471351">​</p><h3 id="1-2-IntelliJ-IDEA-介绍"><a href="#1-2-IntelliJ-IDEA-介绍" class="headerlink" title="1.2 IntelliJ IDEA  介绍"></a>1.2 IntelliJ IDEA  介绍</h3><p>IDEA，全称 <code>IntelliJ IDEA</code>​，是 Java 语言的集成开发环境，目前已经（基本）<code>代替</code>​了Eclipse的使用。IDEA 在业界被公认为是最好的 Java 开发工具（之一），因其<code>功能强悍</code>​、<code>设置人性化</code>​，而深受Java、大数据、移动端程序员的喜爱。</p><p>IntelliJ IDEA 在 2015 年的官网上这样介绍自己：</p><blockquote><p>Excel at enterprise, mobile and web development with Java, Scala and Groovy,with all the latest modern technologies and frameworks available out of thebox.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194236685-278185348-20230929073515-eobkuqq.png" alt="image-20221018104714861">​</p><h3 id="1-3-IDEA的主要优势：-vs-Eclipse"><a href="#1-3-IDEA的主要优势：-vs-Eclipse" class="headerlink" title="1.3 IDEA的主要优势：(vs Eclipse)"></a>1.3 IDEA的主要优势：(vs Eclipse)</h3><p><strong>功能强大：</strong></p><p>① 强大的整合能力。比如：Git、Maven、Spring等</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194229253-380322136.png" alt="1576218068631" style="zoom: 67%;" /></p><p>② 开箱即用的体验（集成版本控制系统、多语言支持的框架随时可用，无需额外安装插件）</p><p><strong>符合人体工程学：</strong></p><p>① 高度智能（快速的智能代码补全、实时代码分析、可靠的重构工具）</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194237253-1537148626-20230929073516-g60yd5m.png" alt="image-20221018104821144">​</p><p>② 提示功能的快速、便捷、范围广</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194237705-1899984618-20230929073516-1vtz1bf.jpg" alt="img">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194238178-1316620354-20230929073516-fp7fff7.png" alt="image-20221018104942633">​</p><p>③ 好用的快捷键和代码模板</p><p>④ 精准搜索</p><h3 id="1-4-IDEA-的下载"><a href="#1-4-IDEA-的下载" class="headerlink" title="1.4 IDEA  的下载"></a>1.4 IDEA  的下载</h3><ul><li>下载网址： <a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></li><li>IDEA 分为两个版本： <code>旗舰版(Ultimate)</code>​和 <code>社区版(Community)</code>​。</li><li>IDEA的大版本每年迭代一次，大版本下的小版本（如：2022.x）迭代时间不固定，一般每年3个小版本。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194238706-1676965488-20230929073516-5pcuzfk.png" alt="image-20220606191620253">​</p><p>两个不同版本的详细对比，可以参照官网：<br><a href="https://www.jetbrains.com/idea/features/editions_comparison_matrix.html">https://www.jetbrains.com/idea/features/editions_comparison_matrix.html</a></p><p>官网提供的详细使用文档：<br><a href="https://www.jetbrains.com/help/idea/meet-intellij-idea.html">https://www.jetbrains.com/help/idea/meet-intellij-idea.html</a></p><h2 id="2-卸载与安装"><a href="#2-卸载与安装" class="headerlink" title="2. 卸载与安装"></a>2. 卸载与安装</h2><h3 id="2-1-卸载过程"><a href="#2-1-卸载过程" class="headerlink" title="2.1 卸载过程"></a>2.1 卸载过程</h3><p>这里以卸载2022.1.2版本为例说明。在【控制面板】找到【卸载程序】</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194229753-1145913340.png" alt="image-20221019120032582" style="zoom: 80%;" /></p><p>右键点击或左键双击IntelliJ IDEA 2022.1.2进行卸载：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194230218-951489097.png" alt="image-20221019121258294" style="zoom:80%;" /></p><p>如果需要保留下述数据，就不要打√。如果想彻底删除IDEA所有数据，那就打上√。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194230646-885029392.png" alt="image-20221019122135368" style="zoom:80%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194230990-1164009663.png" alt="image-20221019122323575" style="zoom:80%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194231392-1953551018.png" alt="image-20221019122349195" style="zoom:80%;" /></p><p>软件卸载完以后，还需要删除其它几个位置的残留：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194239173-1357870981-20230929073516-e00blyy.png" alt="image-20221019161147552">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194239610-146454590-20230929073516-16u9o5o.png" alt="image-20221019161226843">​</p><h3 id="2-2-安装前的准备"><a href="#2-2-安装前的准备" class="headerlink" title="2.2 安装前的准备"></a>2.2 安装前的准备</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194240027-1891562264-20230929073516-8c9jpjr.png" alt="image-20221018110944516">​</p><ul><li>64 位 Microsoft Windows 11、10、8</li><li>最低 2 GB 可用 RAM，推荐 8 GB 系统总 RAM</li><li>2.5 GB 硬盘空间，推荐 SSD</li><li>最低屏幕分辨率 1024x768</li></ul><p>从安装上来看，IntelliJ IDEA 对硬件的要求<code>似乎不是很高</code>​。可是在实际开发中并不是这样的，因为 IntelliJ IDEA 执行时会有大量的缓存、索引文件，所以如果你正在使用 Eclipse / MyEclipse，想通过 IntelliJ IDEA 来解决计算机的卡、慢等问题，这基本上是不可能的，本质上你应该对自己的硬件设备进行升级。</p><h3 id="2-3-安装过程"><a href="#2-3-安装过程" class="headerlink" title="2.3 安装过程"></a>2.3 安装过程</h3><p>1、下载完安装包，双击直接安装<img src="assets/net-img-2942345-20230912194240424-2139381526-20230929073516-1vv6kmv.png" alt="image-20220606191800719">​</p><p>2、欢迎安装</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194240887-553855849-20230929073516-drr0e2z.png" alt="image-20220606191825728">​</p><p>3、是否删除电脑上低版本的IDEA（如果有，可以选择忽略）</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194241405-1076476098-20230929073516-a71i7qt.png" alt="image-20220606191838180">​</p><ul><li>如果电脑上有低版本的IDEA，可以选择删除或保留。</li><li>这里没有卸载旧版本，如果需要卸载，记得勾选下面的保留旧的设置和配置。</li></ul><p>4、选择安装目录</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194241875-1523028171-20230929073516-oskdeqg.png" alt="image-20220606191942308">​</p><p>选择安装目录，目录中要避免中文和空格。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194242376-83701423-20230929073516-7900ofv.png" alt="image-20220606192004081">​</p><p>5、创建桌面快捷图标等</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194242816-1717771425-20230929073516-5asst39.png" alt="image-20220606192053432">​</p><p>确认是否与.java、.groovy、.kt 格式文件进行关联。这里建议不关联。</p><p>6、在【开始】菜单新建一个文件夹（这里需要确认文件夹的名称），来管理IDEA的相关内容。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194243238-1303878791-20230929073516-tkiyoga.png" alt="image-20220606192126130">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194243615-2093318529-20230929073516-xlzcbj1.png" alt="image-20220606192135684">​</p><p>7、完成安装</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194244006-547923071-20230929073516-zg3labp.png" alt="image-20220606192148284">​</p><p>重启以后，单击登录：<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194244353-1674973491-20230929073516-76rnvp6.png" alt="image-20220615164056349">​</p><h3 id="2-4-注册"><a href="#2-4-注册" class="headerlink" title="2.4 注册"></a>2.4 注册</h3><p>首先，需要通过用户协议：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194231879-905647570.png" alt="image-20221019170223226" style="zoom:80%;" /></p><p>是否同意发送用户数据（特性、使用的插件、硬件与软件配置等），建议选择：不发送。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194232333-428945710.png" alt="image-20221019170301256" style="zoom:80%;" /></p><p>接着，会提示我们进行注册。</p><ul><li><p>选择1：试用30天。在IDEA2022.1.2版本中，需要先登录，才能开启试用。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194232796-157843387.png" alt="image-20221019170638164" style="zoom:80%;" /><br>{: id=”20230929073511-tfi4kk2” updated=”20230929073511”}</p></li><li><p>选择2：付费购买旗舰版</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194233190-1216314629.png" alt="image-20221019170740875" style="zoom:80%;" /><br>{: id=”20230929073511-ej4wblu” updated=”20230929073511”}</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194233565-1038953548.png" alt="image-20221019170820975" style="zoom:50%;" /><br>{: id=”20230929073511-k0m0z46” updated=”20230929073511”}</p></li><li><p>选择3：（推荐）</p><ul><li>大家参照《<code>.\03-资料\01-IDEA 2022.1 注册文档\IntelliJ IDEA2022.1注册文档.docx</code>​》操作即可。</li><li>由于存在时效性，如果失效，大家可以自行搜索注册方式即可。</li></ul></li></ul><h3 id="2-5-闪退问题"><a href="#2-5-闪退问题" class="headerlink" title="2.5 闪退问题"></a>2.5 闪退问题</h3><p>问题描述：2022.1启动不了，双击桌面图标，没有响应。</p><p>解决办法：</p><p>打开<code>C:\Users\songhk\AppData\Roaming\JetBrains\IntelliJIdea2022.1\idea64.exe.vmoptions</code>​ 这个文件。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194244781-92192023-20230929073516-6g9esc0.png" alt="image-20220606195927066">​</p><p>内容如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194245259-1742388707-20230929073516-u9s8aj2.png" alt="image-20220606195938517">​</p><p>删除红框的数据以后，再登录即可正常进入。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194245794-1799239633-20230929073516-t8u7krh.png" alt="image-20220606200011927">​</p><p>原因：之前使用过的比如2021.2.2版本，pojie了。新版IEDA太智能了，把现有的启运参数也都复制过去了。又因为最新的IDEA，不兼容pojie程序-javaagent:D:\develop_tools\IDEA\IntelliJ IDEA 2021.2.2\bin\jetbrains-agent.jar了，所以报错了，所以JVM结束了，所以没有启动画面，凉凉了。</p><h2 id="3-HelloWorld的实现"><a href="#3-HelloWorld的实现" class="headerlink" title="3. HelloWorld的实现"></a>3. HelloWorld的实现</h2><h3 id="3-1-新建Project-Class"><a href="#3-1-新建Project-Class" class="headerlink" title="3.1 新建Project - Class"></a>3.1 新建Project - Class</h3><p>选择”New Project”：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194233937-1891610836.png" alt="image-20221019174051967" style="zoom:80%;" /></p><p>指名工程名、使用的JDK版本等信息。如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194246308-1771840502-20230929073516-nmogpto.png" alt="image-20221019174355370">​</p><p>接着创建Java类：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194246766-679413562-20230929073516-znfz05c.png" alt="image-20221019174505876">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194247103-225814896-20230929073516-prvy6vs.png" alt="image-20221019174551606">​</p><h3 id="3-2-编写代码"><a href="#3-2-编写代码" class="headerlink" title="3.2 编写代码"></a>3.2 编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-运行"><a href="#3-3-运行" class="headerlink" title="3.3 运行"></a>3.3 运行</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194247484-180648714-20230929073516-9odvmxb.png" alt="image-20221019174716442">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194247903-1113445732-20230929073516-m0y3lkx.png" alt="image-20221019174801370">​</p><h2 id="4-JDK相关设置"><a href="#4-JDK相关设置" class="headerlink" title="4. JDK相关设置"></a>4. JDK相关设置</h2><h3 id="4-1-项目的JDK设置"><a href="#4-1-项目的JDK设置" class="headerlink" title="4.1 项目的JDK设置"></a>4.1 项目的JDK设置</h3><p><code>File--&gt;Project Structure...--&gt;Platform Settings --&gt;SDKs</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194248369-120035111-20230929073516-ak7zlj0.png" alt="image-20221019174847921">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194248834-170038069-20230929073516-6jjqhe5.png" alt="image-20221019175030852">​</p><ul><li>注1：SDKs全称是Software Development Kit ，这里一定是选择JDK的安装根目录，不是JRE的目录。</li><li>注2：这里还可以从本地添加多个JDK。使用“+”即可实现。</li></ul><h3 id="4-2-out目录和编译版本"><a href="#4-2-out目录和编译版本" class="headerlink" title="4.2 out目录和编译版本"></a>4.2 out目录和编译版本</h3><p><code>File--&gt;Project Structure...--&gt;Project Settings --&gt;Project</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194249321-918421480-20230929073517-pgvqjxh.png" alt="image-20221019175358200">​</p><h2 id="5-详细设置"><a href="#5-详细设置" class="headerlink" title="5. 详细设置"></a>5. 详细设置</h2><h3 id="5-1-如何打开详细配置界面"><a href="#5-1-如何打开详细配置界面" class="headerlink" title="5.1 如何打开详细配置界面"></a>5.1 如何打开详细配置界面</h3><p>1、显示工具栏</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194249785-2069116566-20230929073517-861jsyg.png" alt="image-20221019175536721">​</p><p>2、选择详细配置菜单或按钮</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194250377-1700631500-20230929073517-94yj9wv.png" alt="image-20221019175620422">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194250886-1871125442-20230929073517-32w5yyc.png" alt="image-20221019175953767">​</p><h3 id="5-2-系统设置"><a href="#5-2-系统设置" class="headerlink" title="5.2 系统设置"></a>5.2 系统设置</h3><h4 id="1、默认启动项目配置"><a href="#1、默认启动项目配置" class="headerlink" title="1、默认启动项目配置"></a>1、默认启动项目配置</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194251486-371356783-20230929073517-dz3gp1d.png" alt="image-20221019180050832">​</p><p>启动IDEA时，默认自动打开上次开发的项目？还是自己选择？</p><p>如果去掉Reopen projects on startup前面的对勾，每次启动IDEA就会出现如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194251873-2143268425-20230929073517-3l5zmj0.png" alt="image-20221019180304644">​</p><h4 id="2、取消自动更新"><a href="#2、取消自动更新" class="headerlink" title="2、取消自动更新"></a>2、取消自动更新</h4><p>Settings—&gt;Appearance &amp; Behavior-&gt;System Settings -&gt; Updates</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194252299-458528170-20230929073517-n5sfv6a.png" alt="image-20221019180428323">​</p><p>默认都打√了，建议检查IDE更新的√去掉，检查插件更新的√选上。</p><h3 id="5-3-设置整体主题"><a href="#5-3-设置整体主题" class="headerlink" title="5.3 设置整体主题"></a>5.3 设置整体主题</h3><h4 id="1、选择主题"><a href="#1、选择主题" class="headerlink" title="1、选择主题"></a>1、选择主题</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194252690-1618838387-20230929073517-ynnjso0.png" alt="image-20221019180637822">​</p><h4 id="2、设置菜单和窗口字体和大小"><a href="#2、设置菜单和窗口字体和大小" class="headerlink" title="2、设置菜单和窗口字体和大小"></a>2、设置菜单和窗口字体和大小</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194253103-969942172-20230929073517-6oszvtn.png" alt="1655136527800">​</p><h4 id="3、设置IDEA背景图"><a href="#3、设置IDEA背景图" class="headerlink" title="3、设置IDEA背景图"></a>3、设置IDEA背景图</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194253674-2057886748-20230929073517-0mtlth7.png" alt="image-20221018204241748">​</p><p>选择一张合适的图片作为背景，即可。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194254181-397049076-20230929073517-e1zgr2r.png" alt="image-20221018204305159">​</p><h3 id="5-4-设置编辑器主题样式"><a href="#5-4-设置编辑器主题样式" class="headerlink" title="5.4 设置编辑器主题样式"></a>5.4 设置编辑器主题样式</h3><h4 id="1、编辑器主题"><a href="#1、编辑器主题" class="headerlink" title="1、编辑器主题"></a>1、编辑器主题</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194254617-809465157-20230929073517-q1bfpfk.png" alt="1655136655026">​</p><h4 id="2、字体大小"><a href="#2、字体大小" class="headerlink" title="2、字体大小"></a>2、字体大小</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194255041-1968073051-20230929073517-qhdhbw3.png" alt="1655136907073">​</p><p>更详细的字体与颜色如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194255595-1251292545-20230929073517-ooyzgz9.png" alt="image-20221019182625234">​</p><blockquote><p>温馨提示：如果选择某个font字体，中文乱码，可以在fallback font（备选字体）中选择一个支持中文的字体。</p></blockquote><h4 id="3、注释的字体颜色"><a href="#3、注释的字体颜色" class="headerlink" title="3、注释的字体颜色"></a>3、注释的字体颜色</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194256121-1891196296-20230929073517-34b005m.png" alt="image-20220616121435182">​</p><ul><li>Block comment：修改多行注释的字体颜色</li><li>Doc Comment –&gt; Text：修改文档注释的字体颜色</li><li>Line comment：修改单行注释的字体颜色</li></ul><h3 id="5-5-显示行号与方法分隔符"><a href="#5-5-显示行号与方法分隔符" class="headerlink" title="5.5 显示行号与方法分隔符"></a>5.5 显示行号与方法分隔符</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194256654-1272688065-20230929073517-v4njfcb.png" alt="1655137441471">​</p><h3 id="5-6-代码智能提示功能"><a href="#5-6-代码智能提示功能" class="headerlink" title="5.6 代码智能提示功能"></a>5.6 代码智能提示功能</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194257059-1910554282-20230929073517-kczzjzi.png" alt="1655137649491">​</p><p>IntelliJ IDEA 的代码提示和补充功能有一个特性：<code>区分大小写</code>​。 如果想不区分大小写的话，就把这个对勾去掉。<code>建议去掉勾选</code>​。</p><h3 id="5-7-自动导包配置"><a href="#5-7-自动导包配置" class="headerlink" title="5.7 自动导包配置"></a>5.7 自动导包配置</h3><ul><li>默认需要自己手动导包，Alt+Enter快捷键</li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194257521-1134987162-20230929073517-d7jdv6k.png" alt="1655138308426">​</p><ul><li><p>自动导包设置</p><ul><li>动态导入明确的包：Add unambiguous imports on the fly，该设置具有全局性；</li><li>优化动态导入的包：Optimize imports on the fly，该设置只对当前项目有效；</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194257927-1441568449-20230929073517-s17qvey.png" alt="1655138465774">​</p><h3 id="5-8-设置项目文件编码（一定要改）"><a href="#5-8-设置项目文件编码（一定要改）" class="headerlink" title="5.8 设置项目文件编码（一定要改）"></a>5.8 设置项目文件编码（一定要改）</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194258351-1782940890-20230929073517-cy7zjzx.png" alt="image-20220615190832482">​</p><p>说明： Transparent native-to-ascii conversion主要用于转换ascii，显式原生内容。一般都要勾选。</p><h3 id="5-9-设置控制台的字符编码"><a href="#5-9-设置控制台的字符编码" class="headerlink" title="5.9 设置控制台的字符编码"></a>5.9 设置控制台的字符编码</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194258749-2136801684-20230929073517-hce4wk2.png" alt="image-20221019003153265">​</p><h3 id="5-10-修改类头的文档注释信息"><a href="#5-10-修改类头的文档注释信息" class="headerlink" title="5.10 修改类头的文档注释信息"></a>5.10 修改类头的文档注释信息</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194259154-1678565654-20230929073517-kys3ume.png" alt="image-20221018114632127">​</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ClassName: $&#123;NAME&#125;</span></span><br><span class="line"><span class="comment">* Package: $&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">* Description: </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Create</span> $&#123;DATE&#125; $&#123;TIME&#125; </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0   </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>常用的预设的变量，这里直接贴出官网给的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PACKAGE_NAME&#125; - the name of the target <span class="keyword">package</span> where the <span class="keyword">new</span> <span class="title class_">class</span> or <span class="keyword">interface</span> <span class="title class_">will</span> be created. </span><br><span class="line">$&#123;PROJECT_NAME&#125; - the name of the current project. </span><br><span class="line">$&#123;FILE_NAME&#125; - the name of the PHP file that will be created. </span><br><span class="line">$&#123;NAME&#125; - the name of the <span class="keyword">new</span> <span class="title class_">file</span> which you specify in the New File dialog box during the file creation. </span><br><span class="line">$&#123;USER&#125; - the login name of the current user. </span><br><span class="line">$&#123;DATE&#125; - the current system date. </span><br><span class="line">$&#123;TIME&#125; - the current system time. </span><br><span class="line">$&#123;YEAR&#125; - the current year. </span><br><span class="line">$&#123;MONTH&#125; - the current month. </span><br><span class="line">$&#123;DAY&#125; - the current day of the month. </span><br><span class="line">$&#123;HOUR&#125; - the current hour. </span><br><span class="line">$&#123;MINUTE&#125; - the current minute. </span><br><span class="line">$&#123;PRODUCT_NAME&#125; - the name of the IDE in which the file will be created. </span><br><span class="line">$&#123;MONTH_NAME_SHORT&#125; - the first <span class="number">3</span> letters of the month name. Example: Jan, Feb, etc. </span><br><span class="line">$&#123;MONTH_NAME_FULL&#125; - full name of a month. Example: January, February, etc.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-11-设置自动编译"><a href="#5-11-设置自动编译" class="headerlink" title="5.11 设置自动编译"></a>5.11 设置自动编译</h3><p><code>Settings--&gt;Build,Execution,Deployment--&gt;Compiler</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194234403-2017146150.png" alt="1655109415450" style="zoom: 67%;" /></p><h3 id="5-12-设置为省电模式-可忽略"><a href="#5-12-设置为省电模式-可忽略" class="headerlink" title="5.12 设置为省电模式 (可忽略)"></a>5.12 设置为省电模式 (可忽略)</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194259580-1312602859-20230929073517-dag0pjp.png" alt="image-20220616121851207">​</p><p>IntelliJ IDEA 有一种叫做<code>省电模式</code>​的状态，开启这种模式之后 IntelliJ IDEA 会<code>关掉代码检查</code>​和<code>代码提示</code>​等功能。所以一般也可认为这是一种<code>阅读模式</code>​，如果你在开发过程中遇到突然代码文件不能进行检查和提示，可以来看看这里是否有开启该功能。</p><h3 id="5-13-取消双击shift搜索"><a href="#5-13-取消双击shift搜索" class="headerlink" title="5.13 取消双击shift搜索"></a>5.13 取消双击shift搜索</h3><p>因为我们按shift切换中英文输入方式，经常被按到，总是弹出搜索框，太麻烦了。可以取消它。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194234852-614399732.png" alt="1659191272699" style="zoom:80%;" /></p><ul><li>方式1：适用于IDEA 2022.1.2版本</li></ul><p>在2022.1版本中，采用如下方式消双击shift出现搜索框：搜索double即可，勾选Disable double modifier key shortcuts，禁用这个选项。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194259947-316321090-20230929073517-lxnyna9.png" alt="1659190132458">​</p><ul><li>方式2：适用于IDEA 2022.1.2之前版本</li></ul><p>双击shift 或 ctrl + shift + a，打开如下搜索窗口：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194300364-681809275-20230929073517-hht8c2a.png" alt="1577243967254">​</p><p>选择registry…，找到”ide.suppress.double.click.handler”，把复选框打上勾就可以取消双击shift出现搜索框了。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194300746-175411444-20230929073517-c0prii4.png" alt="1577244045320">​</p><h2 id="6-工程与模块管理"><a href="#6-工程与模块管理" class="headerlink" title="6. 工程与模块管理"></a>6. 工程与模块管理</h2><h3 id="6-1-IDEA项目结构"><a href="#6-1-IDEA项目结构" class="headerlink" title="6.1 IDEA项目结构"></a>6.1 IDEA项目结构</h3><p><strong>层级关系：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project(工程) - module(模块) - package(包) - class(类)</span><br></pre></td></tr></table></figure><p><strong>具体的：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一个project中可以创建多个module</span><br><span class="line"></span><br><span class="line">一个module中可以创建多个package</span><br><span class="line"></span><br><span class="line">一个package中可以创建多个class</span><br></pre></td></tr></table></figure><blockquote><p>这些结构的划分，是为了方便管理功能代码。</p></blockquote><h3 id="6-2-Project和Module的概念"><a href="#6-2-Project和Module的概念" class="headerlink" title="6.2 Project和Module的概念"></a>6.2 Project和Module的概念</h3><p>在 IntelliJ IDEA 中，提出了Project和Module这两个概念。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194235237-1837431122.png" alt="image-20220523014358169" style="zoom:80%;" /></p><p>在 IntelliJ IDEA 中Project是<code>最顶级的结构单元</code>​，然后就是Module。目前，主流的大型项目结构基本都是多Module的结构，这类项目一般是<code>按功能划分</code>​的，比如：user-core-module、user-facade-module和user-hessian-module等等，模块之间彼此可以<code>相互依赖</code>​，有着不可分割的业务关系。因此，对于一个Project来说：</p><ul><li>当为单Module项目的时候，这个单独的Module实际上就是一个Project。</li><li>当为多Module项目的时候，多个模块处于同一个Project之中，此时彼此之间具有<code>互相依赖</code>​的关联关系。</li><li>当然多个模块没有建立依赖关系的话，也可以作为单独一个“小项目”运行。</li></ul><h3 id="6-3-Module和Package"><a href="#6-3-Module和Package" class="headerlink" title="6.3 Module和Package"></a>6.3 Module和Package</h3><p>在一个module下，可以声明多个包（package），一般命名规范如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.不要有中文</span><br><span class="line">2.不要以数字开头</span><br><span class="line">3.给包取名时一般都是公司域名倒着写,而且都是小写</span><br><span class="line">  比如：尚硅谷网址是www.atguigu.com</span><br><span class="line">  那么我们的package包名应该写成：com.atguigu.子名字。</span><br></pre></td></tr></table></figure><h3 id="6-4-创建Module"><a href="#6-4-创建Module" class="headerlink" title="6.4 创建Module"></a>6.4 创建Module</h3><p>建议创建“Empty空工程”，然后创建多模块，每一个模块可以独立运行，相当于一个小项目。JavaSE阶段不涉及到模块之间的依赖。后期再学习模块之间的依赖。</p><p>步骤：</p><p>（1）选择创建模块</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194301162-1796630310-20230929073518-iom3w1z.png" alt="1655167625885">​</p><p>（2）选择模块类型：这里选择创建Java模块，给模块命名，确定存放位置</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194301596-1802245120-20230929073518-brb4t14.png" alt="1659191966074">​</p><p>（4）模块声明在工程下面</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194301996-910689322-20230929073518-jbk15qc.png" alt="1659192028623">​</p><h3 id="6-5-删除模块"><a href="#6-5-删除模块" class="headerlink" title="6.5 删除模块"></a>6.5 删除模块</h3><p>（1）移除模块</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194302472-587735023-20230929073518-i32qtsy.png" alt="1659192150052">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194302893-1707347031-20230929073518-nj5u8i6.png" alt="1659192180062">​</p><p>（2）彻底删除模块</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194303321-478368801-20230929073518-2320zun.png" alt="1659192241224">​</p><h3 id="6-6-导入老师的模块"><a href="#6-6-导入老师的模块" class="headerlink" title="6.6 导入老师的模块"></a>6.6 导入老师的模块</h3><p>（1）将老师的模块<code>teacher_chapter04</code>​整个的复制到自己IDEA项目的路径下</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194303705-127263840-20230929073518-do60h2e.png" alt="1659192514219">​</p><p>接着打开自己IDEA的项目，会在项目目录下看到拷贝过来的module，只不过不是以模块的方式呈现。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194304071-1707998036-20230929073518-kcmxy57.png" alt="1659192692658">​</p><p>（2）查看Project Structure，选择import module</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194304424-239117705-20230929073518-5je4j80.png" alt="image-20220615213827271">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194304785-642925561-20230929073518-dq0scas.png" alt="image-20220615214746952">​</p><p>（3）选择要导入的module：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194305215-580345398-20230929073518-ch7erhj.png" alt="1659192850055">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194305605-1220953808-20230929073518-x8daq0g.png" alt="image-20220615214916374">​</p><p>（4）接着可以一路Next下去，最后选择Overwrite</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194306022-1579200053-20230929073518-iuauyk3.png" alt="1659192928140">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194306401-1883872760-20230929073518-d0ah94d.png" alt="1659192995900">​</p><p>最后点击OK即可了。</p><h3 id="6-7-同时打开两个IDEA项目工程"><a href="#6-7-同时打开两个IDEA项目工程" class="headerlink" title="6.7 同时打开两个IDEA项目工程"></a>6.7 同时打开两个IDEA项目工程</h3><h4 id="1、两个IDEA项目工程效果"><a href="#1、两个IDEA项目工程效果" class="headerlink" title="1、两个IDEA项目工程效果"></a>1、两个IDEA项目工程效果</h4><p>有些同学想要把上课练习代码和作业代码分开两个IDEA项目工程。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194306751-1251973248-20230929073518-owvjbd4.png" alt="image-20211229111753237">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194307157-1919097052-20230929073518-a5et1xh.png" alt="image-20211229111906342">​</p><h4 id="2、新建一个IDEA项目"><a href="#2、新建一个IDEA项目" class="headerlink" title="2、新建一个IDEA项目"></a>2、新建一个IDEA项目</h4><p>注意：第一次需要新建，之后直接打开项目工程即可</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194307562-1094331305-20230929073518-g3pb3dq.png" alt="1655170522054">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194307960-98842931-20230929073518-7a1m5nu.png" alt="1655170341953">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194308318-632950082-20230929073518-wq2ldqu.png" alt="1655170765902">​</p><h4 id="3、打开两个IDEA项目"><a href="#3、打开两个IDEA项目" class="headerlink" title="3、打开两个IDEA项目"></a>3、打开两个IDEA项目</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194308657-1216190818-20230929073518-cymbqi1.png" alt="image-20211229112314671">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194309024-200263753-20230929073518-wxlo2c8.png" alt="image-20211229112343470">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194309428-1073623061-20230929073518-5haaxvq.png" alt="1655173351720">​</p><h3 id="6-8-导入前几章非IDEA工程代码"><a href="#6-8-导入前几章非IDEA工程代码" class="headerlink" title="6.8 导入前几章非IDEA工程代码"></a>6.8 导入前几章非IDEA工程代码</h3><p><strong>1、创建chapter01、chapter02、chapter03等章节的module</strong></p><p>将相应章节的源文件粘贴到module的src下。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194310229-2144490223-20230929073518-qtw865e.png" alt="image-20220615220728669">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194310659-1149507918-20230929073518-ptgyv2r.png" alt="image-20220615220755529">​</p><p>打开其中各个源文件，会发现有乱码。比如：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194311172-988500429-20230929073518-2a20xtu.png" alt="image-20220615220846097">​</p><p><strong>2、设置编码</strong></p><p>当前项目是UTF-8。如果原来的.java文件都是GBK的（如果原来.java文件有的是GBK，有的是UTF-8就比较麻烦了）。</p><p>可以单独把这两个模块设置为GBK编码的。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194311721-1830147432-20230929073518-kv6kdok.png" alt="image-20220615220544760">​</p><p>改为GBK，确认即可。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194312102-1756266896-20230929073518-iizltey.png" alt="image-20220615220950214">​</p><h2 id="7-代码模板的使用"><a href="#7-代码模板的使用" class="headerlink" title="7. 代码模板的使用"></a>7. 代码模板的使用</h2><h3 id="7-1-查看Postfix-Completion模板-后缀补全"><a href="#7-1-查看Postfix-Completion模板-后缀补全" class="headerlink" title="7.1 查看Postfix Completion模板(后缀补全)"></a>7.1 查看Postfix Completion模板(后缀补全)</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194312511-1839601235-20230929073518-0f27xfz.png" alt="1655173712802">​</p><h3 id="7-2-查看Live-Templates模板-实时模板"><a href="#7-2-查看Live-Templates模板-实时模板" class="headerlink" title="7.2 查看Live Templates模板(实时模板)"></a>7.2 查看Live Templates模板(实时模板)</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194313070-1777143258-20230929073518-nknowmq.jpg" alt="img">​</p><h3 id="7-3-常用代码模板"><a href="#7-3-常用代码模板" class="headerlink" title="7.3 常用代码模板"></a>7.3 常用代码模板</h3><h4 id="1、非空判断"><a href="#1、非空判断" class="headerlink" title="1、非空判断"></a>1、非空判断</h4><ul><li>变量.null：if(变量 == null)</li><li>变量.nn：if(变量 != null)</li><li>变量.notnull：if(变量 != null)</li><li>ifn：if(xx  == null)</li><li>inn：if(xx  != null)</li></ul><h4 id="2、遍历数组和集合"><a href="#2、遍历数组和集合" class="headerlink" title="2、遍历数组和集合"></a>2、遍历数组和集合</h4><ul><li>数组或集合变量.fori：for循环</li><li>数组或集合变量.for：增强for循环</li><li>数组或集合变量.forr：反向for循环</li><li>数组或集合变量.iter：增强for循环遍历数组或集合</li></ul><h4 id="3、输出语句"><a href="#3、输出语句" class="headerlink" title="3、输出语句"></a>3、输出语句</h4><ul><li>sout：相当于System.out.println</li><li>soutm：打印当前方法的名称</li><li>soutp：打印当前方法的形参及形参对应的实参值</li><li>soutv：打印方法中声明的最近的变量的值</li><li>变量.sout：打印当前变量值</li><li>变量.soutv：打印当前变量名及变量值</li></ul><h4 id="4、对象操作"><a href="#4、对象操作" class="headerlink" title="4、对象操作"></a>4、对象操作</h4><ul><li><p>创建对象</p><ul><li>Xxx.new  .var ：创建Xxx类的对象，并赋给相应的变量</li><li>Xxx.new  .field：会将方法内刚创建的Xxx对象抽取为一个属性</li></ul></li><li><p>强转</p><ul><li>对象.cast：将对象进行强转</li><li>对象.castvar：将对象强转后，并赋给一个变量</li></ul></li></ul><h4 id="5、静态常量声明"><a href="#5、静态常量声明" class="headerlink" title="5、静态常量声明"></a>5、静态常量声明</h4><ul><li>psf：public static final</li><li>psfi：public static final int</li><li>psfs：public static final String</li><li>prsf：private static final</li></ul><h3 id="7-4-自定义代码模板"><a href="#7-4-自定义代码模板" class="headerlink" title="7.4 自定义代码模板"></a>7.4 自定义代码模板</h3><h4 id="7-4-1-自定义后缀补全模板"><a href="#7-4-1-自定义后缀补全模板" class="headerlink" title="7.4.1 自定义后缀补全模板"></a>7.4.1 自定义后缀补全模板</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194313543-791346049-20230929073518-2yvu8ll.png" alt="image-20221018143204667">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194313955-1533535497-20230929073518-221kng1.png" alt="image-20221018143606913">​</p><h4 id="7-4-2-自定义Live-Templates"><a href="#7-4-2-自定义Live-Templates" class="headerlink" title="7.4.2 自定义Live Templates"></a>7.4.2 自定义Live Templates</h4><p>例如：定义sop代表System.out.print();语句</p><p>①在Live Templates中增加模板</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194314353-573600504-20230929073519-mgol3f0.png" alt="1576467339631">​</p><p>②先定义一个模板的组，这样方便管理所有自定义的代码模板</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194314719-1409113897-20230929073519-4lzm3nv.png" alt="1576467395084">​</p><p>③在模板组里新建模板</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194315313-2144793827-20230929073519-88nkz2i.png" alt="1576467478993">​</p><p>④定义模板（以输出语句为例）</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194315808-1688455517-20230929073519-xodlks1.png" alt="1576467712251">​</p><ul><li>Abbreviation：模板的缩略名称</li><li>Description：模板的描述</li><li>Template text：模板的代码片段</li><li>模板应用范围。比如点击Define。选择如下：应用在java代码中。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194316149-654333864-20230929073519-svg35gh.png" alt="1576467768103">​</p><p><strong>其它模板1：单元测试模板：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test$var1$()&#123;</span><br><span class="line">    $var2$</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194316544-2138927463-20230929073519-9yn90gy.png" alt="image-20220612124137427">​</p><p><strong>其它模板2：创建多线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        $<span class="keyword">var</span>$</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194316937-546630050-20230929073519-80mm8dw.png" alt="image-20220612124221967">​</p><p><strong>其它模板3：冒泡排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">$INDEX$</span> <span class="operator">=</span> <span class="number">1</span>; $INDEX$ &lt; $ARRAY$.length; $INDEX$++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">$INDEX2$</span> <span class="operator">=</span> <span class="number">0</span>; $INDEX2$ &lt; $ARRAY$.length-$INDEX$; $INDEX2$++) &#123;</span><br><span class="line">        <span class="keyword">if</span>($ARRAY$[$INDEX2$] &gt; $ARRAY$[$INDEX2$+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="type">$ELEMENT_TYPE$</span> <span class="variable">temp</span> <span class="operator">=</span> $ARRAY$[$INDEX2$];</span><br><span class="line">            $ARRAY$[$INDEX2$] = $ARRAY$[$INDEX2$+<span class="number">1</span>];</span><br><span class="line">            $ARRAY$[$INDEX2$+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194317378-1669912902-20230929073519-4wv82aw.png" alt="image-20220612124541378">​</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java基础 </tag>
            
            <tag> IDEA的基本使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.变量与运算符</title>
      <link href="/posts/cca6755e.html"/>
      <url>/posts/cca6755e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1. 关键字"></a>1. 关键字</h2><ul><li>定义 ： 被Java语言赋予了特殊含义 ， 用作专门用途的字符串 ， 如： <code>public</code>​</li><li>特点： 全部关键字都是小写字母</li><li><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">官方网址</a></li></ul><h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符"></a>2. 标识符</h2><ul><li>凡是自己命名的地方都叫标识符</li><li><p>标识符的命名规则（必须遵守）</p><ul><li>由26个英文字母大小写，0-9 ，_或 $ 组成</li><li>数字不可以开头。</li><li>不可以使用关键字和保留字，但能包含关键字和保留字。</li><li>Java中严格区分大小写，长度无限制。</li><li>标识符不能包含空格。</li></ul></li><li><p>标识符的命名规范</p><ul><li>包名： 多单词组成时所有字母都小写：xxxyyyzzz。</li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ul></li></ul><blockquote><p>为提高阅读性 ， 起名字要 ‘见名知意’</p></blockquote><p>‍</p><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><ul><li><p>为何需要变量</p><ul><li>变量是程序中不可或缺的组成单位 ， 最基本的存储单元</li></ul></li><li><p>变量的概念</p><ul><li>内存中的一个存储区域 ， 该区域的数据可以再同一类型范围内不断变化</li><li>变量的构成含三个要素 ： 数据类型 ，变量名  ， 存储的值</li><li>Java中变量声明的格式 <strong>：</strong>​<code>数据类型 变量名 = 变量值</code>​</li></ul></li><li>变量的作用 ： 用于内存中保存数据</li><li><p>==使用变量注意==</p><ul><li>Java中的每个变量必须先声明 ， 后使用</li><li>使用变量名来访问这这块区域的数据</li><li>变量的作用域： 其定义所在的一对 <code>&#123;&#125;</code>​内</li><li>变量只有再起<strong>作用域</strong>内才有效 ， 除了作用域 ， 变量不可以再被调用</li><li>同一个作用域内 ， 不能定义重名的变量</li></ul></li><li><p>==Java中变量的数据类型==</p><ul><li><em>基本数据类型</em> ： 包括 <strong>整数类型</strong> ， <strong>浮点数类型</strong> ， <strong>字符类型</strong> ， <strong>布尔类型</strong></li><li><p><em>引用数据类型</em>： 包括 <strong>数组</strong> ， <strong> 类</strong> ，<strong>接口 </strong> ， <strong>枚举 </strong> ， <strong>注解 </strong> ， <strong>记录</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224530302-2045461424-20230928215553-5monb2p.png" alt="image">​</p></li></ul></li><li><p>变量的使用</p><ul><li><p>变量的声明</p><ul><li>格式 ： 数据类型 变量名；</li><li>注意： 变量的数据类型可以是基本数据类型 ， 也可以是引用数据类型</li></ul></li><li><p>变量的赋值</p><ul><li>理解： 给变量赋值，就是把“值”存到该变量代表的<strong>内存空间中</strong>。同时，给变量赋的值类型必须与变量声明的类型一致或兼容。</li><li>变量赋值的语法格式 ： 变量名 = 值；</li></ul></li></ul></li></ul><p>‍</p><h2 id="4-基本数据类型"><a href="#4-基本数据类型" class="headerlink" title="4. 基本数据类型"></a>4. 基本数据类型</h2><h3 id="整数类型-：-byte-short-int-long"><a href="#整数类型-：-byte-short-int-long" class="headerlink" title="整数类型 ： byte , short , int , long"></a>整数类型 ： byte , short , int , long</h3><p>‍</p><ul><li>Java个整数类型有固定的表数范围和字段长度 ，不受具体操作系统的印象 ， 以保证Java程序的可移植性</li><li>定义long类型的变量 ，赋值时需要以 <code>l</code>​或<code>L</code>​作为后缀</li><li>Java程序中变量通常声明为int型 ， 除非不醉仪表室较大的数 ， 才使用long</li><li><p>Java的整型常量爱你规默认为int型</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224530786-1838249163-20230928215553-nanqkfr.png" alt="image">​</p></li><li><p>==补充 ： 计算机存储单位==</p><ul><li><strong>字节（Byte）：</strong> 是计算机用于<code>计量存储容量</code>​的<code>基本</code>​单位，一个字节等于8 bit。</li><li><strong>位（bit）：</strong> 是数据存储的<code>最小</code>​单位。二进制数系统中，每个0或1就是一个位，叫做bit（比特），其中8 bit 就称为一个字节(Byte)。</li><li><p><strong>转换关系：</strong></p><ul><li><strong>8 bit = 1 Byte</strong></li><li><strong>1024 Byte = 1 KB</strong></li><li><strong>1024 KB = 1 MB</strong></li><li><strong>1024 MB = 1 GB</strong></li><li><strong>1024 GB = 1 TB</strong></li></ul></li></ul></li></ul><h3 id="浮点类型-：-float-double"><a href="#浮点类型-：-float-double" class="headerlink" title="浮点类型 ： float , double"></a>浮点类型 ： float , double</h3><p>‍</p><ul><li>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</li><li><p>浮点型常量有两种表示形式</p><ul><li>十进制数形式。如：5.12       512.0f        .512   (必须有小数点）</li><li>科学计数法形式。如：5.12e2      512E2     100E-2</li></ul></li><li><strong>float：</strong>​<code>单精度</code>​，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。</li><li><strong>double：</strong>​<code>双精度</code>​，精度是float的两倍。通常采用此类型。</li><li><strong>定义float类型的变量，赋值时需要以&quot;</strong>​<code>f</code>​”或”<code>F</code>​”作为后缀。</li><li><strong>Java 的浮点型</strong>​<code>常量默认为double型</code>​。</li><li><p>==浮点型精度的说明==</p><ul><li>并不是所有的小数都能可以精确的用二进制浮点数表示。二进制浮点数不能精确的表示0.1、0.01、0.001这样10的负次幂。</li><li><strong>浮点类型float、double的数据不适合在</strong>​<code>不容许舍入误差</code>​的金融计算领域。如果需要<code>精确</code>​数字计算或保留指定位数的精度，需要使用<code>BigDecimal类</code>​。</li></ul></li></ul><h3 id="字符类型-：-char"><a href="#字符类型-：-char" class="headerlink" title="字符类型 ： char"></a>字符类型 ： char</h3><p>‍</p><ul><li>char型数据用于表示通常意义上<code>字符</code>​（占两个字节）</li><li>Java中的所有字符都使用Unicode编码，<strong>故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</strong></li><li><p>字符型变量的三种表现形式</p><ul><li>形式1 ： 使用单引号(‘’)括起来的单个字符</li><li>形式2 ： 直接使用<code>unicode值</code>​来表示字符型城来那个 <code>\uXXX</code>​其中 ， XXX代表一个十六制整数 ， 如 ： \u0023表示 <code>#</code>​</li><li><strong>形式3：</strong> Java中还允许使用<code>转义字符‘\’</code>​来将其后的字符转变为特殊字符型常量。</li></ul></li></ul><h3 id="布尔类型-：-boolean"><a href="#布尔类型-：-boolean" class="headerlink" title="布尔类型 ： boolean"></a>布尔类型 ： boolean</h3><ul><li>boolean类型用于判断逻辑条件 ， 一般用于流程控制语句中</li><li><p>boolean类型数据只有两个值 true , false , 无其他</p><ul><li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li><li>拓展：Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。——《java虚拟机规范 8版》</li></ul></li></ul><h2 id="5-基本数据类型变量间运算规则"><a href="#5-基本数据类型变量间运算规则" class="headerlink" title="5. 基本数据类型变量间运算规则"></a>5. 基本数据类型变量间运算规则</h2><p>在Java程序中 ， 不同的基本数据类型(只有7中 ， 不包含boolean类型)变量的值经常需要进行相互转换</p><p>转换的方式有两种 ， <strong>自动类型提升</strong> 和 <strong>强制类型转换</strong></p><h3 id="5-1-自动类型提升"><a href="#5-1-自动类型提升" class="headerlink" title="5.1 自动类型提升"></a>5.1 自动类型提升</h3><p>规则 ： 将取值范围小的类型自动提升为取值范围大的类型</p><p>基本数据类型的转换规则如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224531169-62890660-20230928215553-xu4cuse.png" alt="image">​</p><p>‍</p><h3 id="5-2-强制类型转换"><a href="#5-2-强制类型转换" class="headerlink" title="5.2 强制类型转换"></a>5.2 强制类型转换</h3><p>规则 ： 将取值范围大的类型强制转换成取值范围小的类型</p><p>转换格式 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = (数据类型) 被强转数据值 <span class="comment">// （） 中的数据类型必须 = 变量值的数据类型</span></span><br></pre></td></tr></table></figure><p>‍</p><p>注意 :</p><ol><li>当把范围大的值强制转换为存储范围小的变量时 ， 可能会出现 损失精度或溢出</li><li>当某个值想要提升数据类型时，也可以使用强制类型转换。这种情况的强制类型转换是<code>没有风险</code>​的，通常省略。</li><li>声明long类型变量时，可以出现省略后缀的情况。float则不同</li></ol><h3 id="5-3-基本数据类型与String的运算"><a href="#5-3-基本数据类型与String的运算" class="headerlink" title="5.3 基本数据类型与String的运算"></a>5.3 基本数据类型与String的运算</h3><ul><li><p>字符串类型 ： String</p><ul><li>String 不是基本数据类型 ， 属于引用数据类型</li><li>使用一对 “” 来表示一个字符串 ， 内部可以包括0个 ， 1个或多个字符串</li><li>声明方式与基本数据类型类似</li></ul></li><li><p>运算规则</p><ul><li>任意八种基本数据类型的数据与String类型只能进行连接“+”运算，且结果一定也是String类型</li><li>String类型不能通过强制类型()转换，转为其他的类型</li></ul></li></ul><h2 id="6-运算符"><a href="#6-运算符" class="headerlink" title="6. 运算符"></a>6. 运算符</h2><p>运算符是一种特殊的符号 ， 用以表示数据的运算 ， 赋值和比较等</p><p>‍</p><p>==运算符的分类==</p><ul><li><p><strong>按照</strong>​<code>功能</code>​分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、Lambda运算符</p><p>|<strong>分类</strong>|<strong>运算符</strong>|<br>| —| —|<br>|<strong>算术运算符（7个）</strong>| <strong>+、-、*、/、%、++、—</strong>|<br>|<strong>赋值运算符（12个）</strong>| <strong>=、+=、-=、*=、/=、%=、&gt;&gt;=、&lt;&lt;=、&gt;&gt;&gt;=、&amp;=、</strong>|<br>|<strong>比较(或关系)运算符（6个）</strong>| <strong>&gt;、&gt;=、&lt;、&lt;=、==、!=</strong>|<br>|<strong>逻辑运算符（6个）</strong>| <strong>&amp;、</strong>|<br>|<strong>位运算符（7个）</strong>| <strong>&amp;、</strong>|<br>|<strong>条件运算符（1个）</strong>| <strong>(条件表达式)?结果1:结果2</strong>|<br>|<strong>Lambda运算符（1个）</strong>| <strong>-&gt;（第18章时讲解）</strong>|</p></li><li><p><strong>按照</strong>​<code>操作数个数</code>​分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</p><p>|<strong>分类</strong>|<strong>运算符</strong>|<br>| —| —|<br>|<strong>一元运算符（单目运算符）</strong>|<strong>正号（+）、负号（-）、++、—、!、~</strong>|<br>|<strong>二元运算符（双目运算符）</strong>|<strong>除了一元和三元运算符剩下的都是二元运算符</strong>|<br>|<strong>三元运算符 （三目运算符）</strong>| <strong>(条件表达式)?结果1:结果2</strong>|</p></li></ul><h3 id="6-1-算术运算符"><a href="#6-1-算术运算符" class="headerlink" title="6.1 算术运算符"></a>6.1 算术运算符</h3><ul><li><p>==基本语法==</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224531667-1895469365-20230928215553-3ac8r3i.png" alt="image">​</p></li></ul><h3 id="6-2-赋值运算符"><a href="#6-2-赋值运算符" class="headerlink" title="6.2 赋值运算符"></a>6.2 赋值运算符</h3><ul><li><p>基本语法</p><ul><li><p>符号 ： =</p><ul><li>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li><li>支持连续赋值</li></ul></li><li><p>扩展赋值运算符 ： +=、 -=、*=、 /=、%=</p><p>|<strong>赋值运算符</strong>|<strong>符号解释</strong>|<br>| ———| ————————————————|<br>|​<code>+=</code>​|<strong>将符号</strong>​<code>左边的值</code>​和<code>右边的值</code>​进行<code>相加</code>​操作，最后将结果<code>赋值给左边的变量</code>​|<br>|​<code>-=</code>​|<strong>将符号</strong>​<code>左边的值</code>​和<code>右边的值</code>​进行<code>相减</code>​操作，最后将结果<code>赋值给左边的变量</code>​|<br>|​<code>*=</code>​|<strong>将符号</strong>​<code>左边的值</code>​和<code>右边的值</code>​进行<code>相乘</code>​操作，最后将结果<code>赋值给左边的变量</code>​|<br>|​<code>/=</code>​|<strong>将符号</strong>​<code>左边的值</code>​和<code>右边的值</code>​进行<code>相除</code>​操作，最后将结果<code>赋值给左边的变量</code>​|<br>|​<code>%=</code>​|<strong>将符号</strong>​<code>左边的值</code>​和<code>右边的值</code>​进行<code>取余</code>​操作，最后将结果<code>赋值给左边的变量</code>​|</p></li></ul></li></ul><h3 id="6-3-比较-关系-运算符"><a href="#6-3-比较-关系-运算符" class="headerlink" title="6.3 比较(关系)运算符"></a>6.3 比较(关系)运算符</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224532261-475127645-20230928215553-wx4yoj9.png" alt="image">​</p><ul><li>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</li><li><strong>&gt;</strong>    &lt;   &gt;=  &lt;= ：只适用于基本数据类型（除boolean类型之外） ==   != ：适用于基本数据类型和引用数据类型</li><li>‍</li><li><strong>比较运算符“</strong>​<code>==</code>​”不能误写成“<code>=</code>​”</li></ul><h3 id="6-4-逻辑运算符"><a href="#6-4-逻辑运算符" class="headerlink" title="6.4 逻辑运算符"></a>6.4 逻辑运算符</h3><ul><li>逻辑与运算符 ， 操作的都是boolean类型的变量或敞亮 ， 而且运算的结果也是boolean类型的值</li><li><p>运算符说明：</p><ul><li>&amp; 和 &amp;&amp;：表示”且”关系，当符号左右两边布尔值都是true时，结果才能为true。否则，为false。</li><li>| 和 || ：表示”或”关系，当符号两边布尔值有一边为true时，结果为true。当两边都为false时，结果为false</li><li>! ：表示”非”关系，当变量布尔值为true时，结果为false。当变量布尔值为false时，结果为true。</li><li><p>^ ：当符号左右两边布尔值不同时，结果为true。当两边布尔值相同时，结果为false。</p><ul><li><strong>理解：</strong>​<code>异或，追求的是“异”！</code>​</li></ul></li><li>逻辑运算符用于连接布尔型表达式，在Java中不可以写成 3 &lt; x &lt; 6，应该写成x &gt; 3 &amp; x &lt; 6 。</li></ul></li><li><p>==区分“&amp;”和“&amp;&amp;”：==</p><ul><li>相同点 ： 如果符号左边是true ， 则二者都执行符号右边的操作</li><li><p>不同点 ：</p><ul><li>&amp; ： 如果符号左边是false ， 则继续执行符号右边的操作</li><li>&amp;&amp;  ： 如果符号左边是false ， 则不再继续执行符号右边的操作</li></ul></li><li>建议 ： 开发中  ， 推荐使用 &amp;&amp;</li></ul><p>‍</p></li><li><p>==区分 ‘|’ 和 ‘||’==</p><ul><li>相同点 ： 如果如好左边是false ， 则二者都执行符号右边的操作</li><li><p>不同点 ：</p><ul><li>| ： 如果符号左边是true  ， 则继续执行符号右边的操作</li><li>|| ： 如果符号左边是true ， 则不再继续执行符号右边的操作</li></ul></li><li>建议： 开发中 ， 推荐只用 ||</li></ul></li></ul><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp; 与，且；有false则false</span></span><br><span class="line">System.out.println((a &gt; b) &amp; (a &gt; c)); </span><br><span class="line">System.out.println((a &gt; b) &amp; (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) &amp; (a &gt; c)); </span><br><span class="line">System.out.println((a &lt; b) &amp; (a &lt; c)); </span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// | 或；有true则true</span></span><br><span class="line">System.out.println((a &gt; b) | (a &gt; c)); </span><br><span class="line">System.out.println((a &gt; b) | (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) | (a &gt; c));</span><br><span class="line">System.out.println((a &lt; b) | (a &lt; c));</span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// ^ 异或；相同为false，不同为true</span></span><br><span class="line">System.out.println((a &gt; b) ^ (a &gt; c));</span><br><span class="line">System.out.println((a &gt; b) ^ (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) ^ (a &gt; c)); </span><br><span class="line">System.out.println((a &lt; b) ^ (a &lt; c)); </span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// ! 非；非false则true，非true则false</span></span><br><span class="line">System.out.println(!<span class="literal">false</span>);</span><br><span class="line">System.out.println(!<span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//&amp;和&amp;&amp;的区别</span></span><br><span class="line">        System.out.println((a &gt; b) &amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a &gt; b) &amp;&amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a == b) &amp;&amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//|和||的区别</span></span><br><span class="line">        System.out.println((a &gt; b) | (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a &gt; b) || (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a == b) || (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="6-5-位运算符"><a href="#6-5-位运算符" class="headerlink" title="6.5 位运算符"></a>6.5 位运算符</h3><blockquote><p>位运算符的运算过程都是基于二进制的补码运算</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224532746-546165521-20230928215553-orfba23.png" alt="image">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224533246-1043083331-20230928215553-svxwseg.png" alt="image">​</p><p>‍</p><h3 id="6-6-条件运算符"><a href="#6-6-条件运算符" class="headerlink" title="6.6 条件运算符"></a>6.6 条件运算符</h3><ul><li><p>条件运算符格式 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(条件表达式) ? 表达式<span class="number">1</span> ： 表达式<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>说明：条件表达式是boolean类型的结果，根据boolean的值选择表达式1或表达式2</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224533675-1858298247-20230928215553-s8ngnhr.png" alt="image">​</p></li><li>如果运算后的结果赋给新的变量，要求表达式1和表达式2为同种或兼容的类型</li><li><p>==与 if-else的转换关系==</p><ul><li>凡是可以使用条件运算符的地方 ， 都可以改为if-else 结构 ， 反之， 不成立</li><li>开发中，如果既可以使用条件运算符，又可以使用if-else，推荐使用条件运算符。因为执行效率稍高。</li></ul></li></ul><h3 id="6-7-运算符优先级"><a href="#6-7-运算符优先级" class="headerlink" title="6.7 运算符优先级"></a>6.7 运算符优先级</h3><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算符顺序。</p><p><strong>开发建议：</strong></p><ol><li>不要过多的依赖运算的优先级来控制表达式的执行顺序，这样可读性太差，尽量<code>使用()来控制</code>​表达式的执行顺序。</li><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，则把它<code>分成几步</code>​来完成。例如：(num1 + num2) * 2 &gt; num3 &amp;&amp; num2 &gt; num3 ? num3 : num1 + num2;</li></ol><h2 id="7-关于字符集"><a href="#7-关于字符集" class="headerlink" title="7. 关于字符集"></a>7. 关于字符集</h2><ul><li>字符集</li><li>ASCII码</li><li>ISO-8859-1字符集</li><li>GBxxx字符集</li><li>Unicode码</li><li>UTF-8</li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224533982-803131751-20230928215554-onckvwl.png" alt="image">​</p><p>注意：在中文操作系统上，ANSI（美国国家标准学会、AMERICAN NATIONAL STANDARDS INSTITUTE: ANSI）编码即为GBK；在英文操作系统上，ANSI编码即为ISO-8859-1。</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Java语言概述</title>
      <link href="/posts/3e69d26.html"/>
      <url>/posts/3e69d26.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Java技术体系"><a href="#1-Java技术体系" class="headerlink" title="1. Java技术体系"></a>1. Java技术体系</h2><ul><li>Java SE(Java Standard Edition)标准版</li><li>Java EE(Java Enterprise Edition)企业版</li><li>Java ME(Java Micro Edition)小型版</li></ul><h2 id="2-Java开发环境介绍"><a href="#2-Java开发环境介绍" class="headerlink" title="2. Java开发环境介绍"></a>2. Java开发环境介绍</h2><p>‍</p><ul><li><strong>JDK</strong>  (java Development kit)：是Java程序开发工具包，包含JRE 和开发人员使用的工具。</li><li><strong>JRE</strong> (Java Runtime Environment) ：是Java程序的运行时环境，包含JVM和运行时所需要的<code>核心类库</code>​。</li></ul><p>==Java 8.0 Platform：==</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911193326119-1565088420-20230928215632-00gihxc.png" alt="image">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911193330222-20589390-20230928215632-rq4dc1t.png" alt="image">​</p><p>‍</p><p>其中 ：</p><ul><li>JDK = JRE + 开发工具集（eg: javac编译工具等）</li><li>JRE = JVM + JavaSE标准库</li></ul><h2 id="3-注释"><a href="#3-注释" class="headerlink" title="3. 注释"></a>3. 注释</h2><ul><li><p>什么是注释？、</p><ul><li>源文件中用于解释 ， 说明程序的文字就是注释</li></ul></li><li><p>注释的类型</p><ul><li>单行注释</li><li>多行注释</li><li>文档注释</li></ul></li><li><p>注释的作用</p><ul><li>提高了程序的可读性</li><li>调试程序的重要方法</li></ul></li></ul><h2 id="4-Java-Api-文档"><a href="#4-Java-Api-文档" class="headerlink" title="4. Java Api 文档"></a>4. Java Api 文档</h2><ul><li>API （Application Programming Interface，应用程序编程接口）是 Java 提供的基本编程接口。</li></ul><h2 id="5-Java核心机制-：-JVM"><a href="#5-Java核心机制-：-JVM" class="headerlink" title="5. Java核心机制 ： JVM"></a>5. Java核心机制 ： JVM</h2><p>Java语言的优缺点</p><ul><li><p>优点</p><ul><li>跨平台性</li><li>面向对象性</li><li>健壮性</li><li>安全性高</li><li>简单性高性能</li></ul></li><li><p>缺点</p><ul><li>语法过于复杂 ， 严谨</li><li>架构较重</li><li>并非适用于所有领域</li></ul></li></ul><p>==JVM功能说明==</p><p><strong>JVM</strong>（<code>J</code>​ava <code>V</code>​irtual <code>M</code>​achine ，Java虚拟机）：是一个虚拟的计算机，是Java程序的运行环境。JVM具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911193332592-614675216-20230928215632-zdre7h1.png" alt="image">​</p><p>‍</p><ul><li>功能1 ： 实现Java程序的跨平台性</li><li><p>功能2 ： 自动内存管理(内存分配 ， 内存回收)</p><ul><li><strong>Java程序在运行过程中，涉及到运算的</strong>​<code>数据的分配</code>​、<code>存储</code>​等都由JVM来完成</li><li>Java消除了程序员回收无用内存空间的职责。提供了一种系统级线程跟踪存储空间的分配情况，在内存空间达到相应阈值时，检查并释放可被释放的存储器空间。</li><li>GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上<code>减少了</code>​因为没有释放空间而导致的<code>内存泄漏</code>​</li><li><p>==面试题==</p><ul><li>Java程序还会出现内存溢出和内存泄漏的问题吗？ Yes!</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.流程控制语句</title>
      <link href="/posts/fffd9e73.html"/>
      <url>/posts/fffd9e73.html</url>
      
        <content type="html"><![CDATA[<p>程序设计中规定的三种流程结构</p><ul><li><p>顺序结构</p><ul><li>程序从上到下逐行执行 ， 中间没有任何判断和跳转</li></ul></li><li><p>分支结构</p><ul><li>根据条件 ， 选择地执行某段代码</li><li>有<code>if...else</code>​和<code>switch-case</code>​两种分支语句</li></ul></li><li><p>循环结构</p><ul><li>根据循环条件 ， 重复的执行某段代码</li><li>有<code>for , while , do-while</code>​三种循环语句</li><li>补充：JDK5.0 提供了<code>foreach</code>​循环，方便的遍历集合、数组元素。</li></ul></li></ul><h2 id="1-循环结构"><a href="#1-循环结构" class="headerlink" title="1. 循环结构"></a>1. 循环结构</h2><blockquote><p>语句从上到下逐行执行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912193925433-1211275088-20230929073420-forpo09.png" alt="image">​</p><p>‍</p><h2 id="2-分支语句"><a href="#2-分支语句" class="headerlink" title="2. 分支语句"></a>2. 分支语句</h2><h3 id="2-1-if-else-条件判断结构"><a href="#2-1-if-else-条件判断结构" class="headerlink" title="2.1 if - else 条件判断结构"></a>2.1 if - else 条件判断结构</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==单分支条件判断 ： if==</p><p>说明： 条件表达式必须是布尔表达式(关系表达式或逻辑表达式)或布尔变量</p><p>执行流程</p><ol><li><strong>首先判断条件表达式看其结果是true还是false</strong></li><li><strong>如果是true就执行语句块</strong></li><li><strong>如果是false就不执行语句块</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912193926077-1409822041-20230929073420-nxxgw5s.png" alt="image">​</p><p>‍</p><p>==双分支条件判断 ：if … else==</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">语句块<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912193926593-395848992-20230929073420-bzvmnmf.png" alt="image">​</p><p>==多分支条件判断 ： if…else if…lese==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">  语句块<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">  语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (条件表达式n) &#123;</span><br><span class="line"> 语句块n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  语句块n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>说明：</code>​一旦条件表达式为true，则进入执行相应的语句块。执行完对应的语句块之后，就跳出当前结构。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912193927120-1096512791-20230929073420-7sfutjx.png" alt="image">​</p><p>‍</p><p>==if…else嵌套==</p><p>在 if 的语句块中，或者是在else语句块中，又包含了另外一个条件判断（可以是单分支、双分支、多分支），就构成了<code>嵌套结构</code>​。</p><p><strong>执行特点：</strong></p><p>（1）如果是嵌套在if语句块中的，只有当外部的if条件满足，才会去判断内部的条件</p><p> （2）如果是嵌套在else语句块中的，只有当外部的if条件不满足，进入else后，才会去判断内部的条件</p><h3 id="2-2-switch-case选择结构"><a href="#2-2-switch-case选择结构" class="headerlink" title="2.2 switch-case选择结构"></a>2.2 switch-case选择结构</h3><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//break;</span></span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//break; </span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   [<span class="keyword">default</span>:</span><br><span class="line">        语句块n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912193927606-360875804-20230929073420-d2w7kf1.png" alt="image">​</p><p>执行过程</p><p>第1步：根据switch中表达式的值，依次匹配各个case。如果表达式的值等于某个case中的常量值，则执行对应case中的执行语句。</p><p>第2步：执行完此case的执行语句以后</p><ul><li>情况1：如果遇到break,则执行break并跳出当前的switch-case结构</li><li>情况2：如果没有遇到break，则会继续执行当前case之后的其它case中的执行语句。—-&gt;case穿透</li><li>……</li><li>直到遇到break关键字或执行完所有的case及default的执行语句，跳出当前的switch-case结构</li></ul><p>==使用注意点：==</p><ul><li>switch（表达式）中表达式的值必须是这几种类型 ： byte ， short , char , int , 枚举(JDK 5.0) , String(JDK 7.0)</li><li>case子句中的值必须是敞亮 ， 所有case子句中的敞亮相互不相同</li><li>同一个switch语句 ， 所有case子句中的敞亮值互不相同</li><li>break语句用来执行完一个case分支后使程序跳出swtich语句块 ， <strong>如果没有break , 程序会顺序执行到switch结尾</strong></li><li>default子句是可选的 ， 同时 ， 位置也是灵活的 ， 当没有匹配的case时 ， 执行default语句</li></ul><h2 id="3-循环语句"><a href="#3-循环语句" class="headerlink" title="3. 循环语句"></a>3. 循环语句</h2><ul><li>理解：循环语句具有在<code>某些条件</code>​满足的情况下，<code>反复执行</code>​特定代码的功能。</li><li><p>循环结构分类</p><ul><li>for 循环</li><li>while 循环</li><li>do -while 循环</li></ul></li><li><p>循环结构四要素</p><ul><li>初始化部分</li><li>循环条件部分</li><li>循环体部分</li><li>迭代部分</li></ul></li></ul><h3 id="3-1-for循环"><a href="#3-1-for循环" class="headerlink" title="3.1 for循环"></a>3.1 for循环</h3><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化部分 ; 循环条件部分 ; 迭代部分) &#123;</span><br><span class="line">循环体部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>for(;;)中的两个；不能多也不能少</li><li>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔</li><li>②循环条件部分为boolean类型表达式，当值为false时，退出循环</li><li>④可以有多个变量更新，用逗号分隔</li></ul><h3 id="3-2-while循环"><a href="#3-2-while循环" class="headerlink" title="3.2 while循环"></a>3.2 while循环</h3><p>语法格式 : 先判断再执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化部分</span><br><span class="line"><span class="keyword">while</span>(循环条件部分) &#123;</span><br><span class="line">循环体部分;</span><br><span class="line">迭代部分;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="3-3-do-while-循环"><a href="#3-3-do-while-循环" class="headerlink" title="3.3 do-while 循环"></a>3.3 do-while 循环</h3><p>语法格式 ： 先执行再判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化部分;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">循环体部分;</span><br><span class="line">迭代部分;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="4-关键字break-和-continue的使用"><a href="#4-关键字break-和-continue的使用" class="headerlink" title="4. 关键字break 和 continue的使用"></a>4. 关键字break 和 continue的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">适用范围在循环结构中使用的作用相同点</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span><span class="keyword">switch</span>-<span class="keyword">case</span></span><br><span class="line">循环结构一旦执行，就结束(或跳出)当前循环结构    此关键字的后面，不能声明语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>循环结构一旦执行，就结束(或跳出)当次循环结构    此关键字的后面，不能声明语句</span><br></pre></td></tr></table></figure><p>此外，很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它，但使程序容易出错。Java中的break和continue是不同于goto的。</p><h2 id="5-Scanner-键盘输入功能的实现"><a href="#5-Scanner-键盘输入功能的实现" class="headerlink" title="5. Scanner : 键盘输入功能的实现"></a>5. Scanner : 键盘输入功能的实现</h2><p>键盘输入代码的四个步骤</p><ol><li>导包</li><li>创建Scanner类型的对象</li><li>调用Scanner类的相关方法</li><li>释放资源</li></ol><p>注意 ： 需要根据相应的方法 ， 来输入指定类型的值 ， 入股输入的数据类型与要求的类型不匹配时 ， 会报异常导致程序终止</p><p>键盘录入基本代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键盘录入</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">nextLine</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;你输入的数据为：&quot;</span> + nextLine);</span><br><span class="line">scanner.close();</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="6-如何获取一个随机数"><a href="#6-如何获取一个随机数" class="headerlink" title="6. 如何获取一个随机数"></a>6. 如何获取一个随机数</h2><p>1、Math类的random()的调用，会返回一个[0,1)范围的一个double型值</p><p><strong>2、Math.random() * 100  —-&gt;  [0,100)</strong>  <strong>      (int)(Math.random() * 100)</strong>     <strong>—-&gt; [0,99]</strong>  <strong>      (int)(Math.random() * 100) + 5  ——&gt; [5,104]</strong></p><p><strong>3、</strong> 如何获取<code>[a,b]</code>​范围内的随机整数呢？<code>(int)(Math.random() * (b - a + 1)) + a</code>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机数获取</span></span><br><span class="line"><span class="type">double</span> <span class="variable">random</span> <span class="operator">=</span> Math.random();</span><br><span class="line">System.out.println(random);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">System.out.println(number);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 入门篇</title>
      <link href="/posts/f82b2580.html"/>
      <url>/posts/f82b2580.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-初始-Redis"><a href="#1-初始-Redis" class="headerlink" title="1. 初始 Redis"></a>1. 初始 Redis</h1><h2 id="1-1-认识NoSQL"><a href="#1-1-认识NoSQL" class="headerlink" title="1.1 认识NoSQL"></a>1.1 认识NoSQL</h2><p>‍</p><blockquote><p><strong>NoSql</strong>可以翻译做Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是<code>相对于传统关系型数据库而言，有很大差异的一种特殊的数据库</code>​，因此也称之为<strong>非关系型数据库</strong>。</p></blockquote><p>‍</p><h3 id="1-1-1-结构化与非结构化"><a href="#1-1-1-结构化与非结构化" class="headerlink" title="1.1.1 结构化与非结构化"></a>1.1.1 结构化与非结构化</h3><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102322129-956652897-20231006090927-guh2wae.png" alt="image">​</p><h3 id="1-1-2-关系型与非关系型的差异"><a href="#1-1-2-关系型与非关系型的差异" class="headerlink" title="1.1.2 关系型与非关系型的差异"></a>1.1.2 关系型与非关系型的差异</h3><ul><li><p>存储方式</p><ul><li>关系型数据库基于磁盘进行存储，会有大量的磁盘IO，对性能有一定影响</li><li>非关系型数据库，他们的操作更多的是依赖于内存来操作，内存的读写速度会非常快，性能自然会好一些</li></ul></li><li><p>扩展性</p><ul><li>关系型数据库集群模式一般是主从，主从数据一致，起到数据备份的作用，称为垂直扩展。</li><li>非关系型数据库可以将数据拆分，存储在不同机器上，可以保存海量数据，解决内存大小有限的问题。称为水平扩展。</li><li>关系型数据库因为表之间存在关联关系，如果做水平扩展会给数据查询带来很多麻烦</li></ul></li></ul><h2 id="1-2-认识-Redis"><a href="#1-2-认识-Redis" class="headerlink" title="1.2 认识 Redis"></a>1.2 认识 Redis</h2><p>Redis诞生于2009年全称是<strong>Re</strong>mote <strong>D</strong>ictionary <strong>S</strong>erver 远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p><p><strong>特征</strong>：</p><ul><li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存.IO多路复用.良好的编码）。</li><li>支持数据持久化</li><li>支持主从集群.分片集群</li><li>支持多语言客户端</li></ul><p><strong>作者</strong>：Antirez</p><p>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p><p>‍</p><h2 id="1-3-安装Redis"><a href="#1-3-安装Redis" class="headerlink" title="1.3 安装Redis"></a>1.3 安装Redis</h2><p><a href="https://www.cnblogs.com/NorthPoet/p/17658437.html">Redis的安装步骤</a></p><p>‍</p><h1 id="2-Redis-的常见命令"><a href="#2-Redis-的常见命令" class="headerlink" title="2. Redis 的常见命令"></a>2. Redis 的常见命令</h1><h2 id="2-1-Redis-数据结构介绍"><a href="#2-1-Redis-数据结构介绍" class="headerlink" title="2.1 Redis 数据结构介绍"></a>2.1 Redis 数据结构介绍</h2><p>‍</p><blockquote><p>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样：</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102322653-1660980008-20231006090927-1uyoju7.png" alt="image">​</p><p>‍</p><p><strong>贴心小建议：命令不要死记，学会查询就好啦</strong></p><p>Redis为了方便我们学习，将操作不同数据类型的命令也做了分组，在官网（ <a href="https://redis.io/commands">https://redis.io/commands</a> ）可以查看到不同的命令：</p><p>‍</p><p>当然我们也可以通过Help命令来帮助我们去查看命令</p><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102323098-751575621-20231006090927-hh2gn1t.png" alt="image">​</p><p>‍</p><h2 id="2-2-Redis-通用命令"><a href="#2-2-Redis-通用命令" class="headerlink" title="2.2 Redis 通用命令"></a>2.2 Redis 通用命令</h2><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li>KEYS：查看符合模板的所有key</li><li>DEL：删除一个指定的key</li><li>EXISTS：判断key是否存在</li><li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li><li>TTL：查看一个KEY的剩余有效期</li></ul><p>通过help [command] 可以查看一个命令的具体用法，例如：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102323565-1312772143-20231006090927-ofcpfpr.png" alt="image">​</p><p>‍</p><p>实例代码如下：</p><ul><li>KEYS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询以a开头的key</span></span><br><span class="line">127.0.0.1:6379&gt; keys a*</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p><strong>贴心小提示：在生产环境下，不推荐使用keys 命令，因为这个命令在key过多的情况下，效率不高</strong></p><ul><li>DEL</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> del</span><br><span class="line"></span><br><span class="line">  DEL key [key ...]</span><br><span class="line">  summary: Delete a key</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del name <span class="comment">#删除单个</span></span><br><span class="line">(<span class="built_in">integer</span>) 1  <span class="comment">#成功删除1个</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 <span class="comment">#批量添加数据</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">4) <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del k1 k2 k3 k4</span><br><span class="line">(<span class="built_in">integer</span>) 3   <span class="comment">#此处返回的是成功删除的key，由于redis中只有k1,k2,k3 所以只成功删除3个，最终返回</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment">#再查询全部的key</span></span><br><span class="line">1) <span class="string">&quot;age&quot;</span><span class="comment">#只剩下一个了</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p><strong>贴心小提示：同学们在拷贝代码的时候，只需要拷贝对应的命令哦~</strong></p><ul><li>EXISTS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> EXISTS</span><br><span class="line"></span><br><span class="line">  EXISTS key [key ...]</span><br><span class="line">  summary: Determine <span class="keyword">if</span> a key exists</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><ul><li>EXPIRE</li></ul><p><strong>贴心小提示</strong>：内存非常宝贵，对于一些数据，我们应当给他一些过期时间，当过期时间到了之后，他就会自动被删除~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire age 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2  <span class="comment">#当这个key过期了，那么此时查询出来就是-2 </span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 10 <span class="comment">#如果没有设置过期时间</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -1  <span class="comment"># ttl的返回值就是-1</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="2-3-Redis命令-String命令"><a href="#2-3-Redis命令-String命令" class="headerlink" title="2.3 Redis命令-String命令"></a>2.3 Redis命令-String命令</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增.自减操作</li><li>float：浮点类型，可以做自增.自减操作</li></ul><p>‍</p><p>String的常见命令有：</p><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><p>‍</p><p><strong>贴心小提示</strong>：以上命令除了INCRBYFLOAT 都是常用命令</p><p>‍</p><ul><li><p>SET 和GET: 如果key不存在则是新增，如果存在则是修改</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102323946-1688473773-20231006090927-rb0dxsd.png" alt="image">​</p></li><li><p>MSET和MGET ： 可以批量增加 ， 查看</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102324301-692434923-20231006090927-7qvnsys.png" alt="image">​</p></li><li><p>INCR和INCRBY和DECY</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102324670-728610435-20231006090927-xay7dwl.png" alt="image">​</p></li><li><p>SETNX ： 添加一个String类型的键值对，前提是这个key不存在，否则不执行</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102325095-1453449874-20231006090927-7k3ofyc.png" alt="image">​</p></li><li><p>SETEX ： 添加一个String类型的键值对，并且指定有效期</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102325471-1126477018-20231006090927-sdmparn.png" alt="image">​</p></li></ul><h2 id="2-4-Redis命令-Key的层级结构"><a href="#2-4-Redis命令-Key的层级结构" class="headerlink" title="2.4 Redis命令-Key的层级结构"></a>2.4 Redis命令-Key的层级结构</h2><p>Redis没有类似MySQL中的<code>Table的概念</code>​，我们该如何区分不同类型的key呢？</p><p>例如，需要存储用户.商品信息到redis，有一个用户id是1，有一个商品id恰好也是1，此时如果使用id作为key，那就会冲突了，该怎么办？</p><p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p><p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：</p><blockquote><p>项目名：业务名：id</p></blockquote><p>‍</p><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如我们的项目名称叫 heima，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul><li>user相关的key：<strong>heima:user:1</strong></li><li>product相关的key：<strong>heima:product:1</strong></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p><div class="table-container"><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>heima:user:1</td><td>{“id”:1, “name”: “Jack”, “age”: 21}</td></tr><tr><td>heima:product:1</td><td>{“id”:1, “name”: “小米11”, “price”: 4999}</td></tr></tbody></table></div><p>一旦我们向redis采用这样的方式存储，那么在可视化界面中，redis会以层级结构来进行存储，形成类似于这样的结构，更加方便Redis获取数据</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102325786-1916973410-20231006090927-txngi2v.png" alt="image">​</p><p>‍</p><h2 id="2-5-Redis命令-Hash命令"><a href="#2-5-Redis命令-Hash命令" class="headerlink" title="2.5 Redis命令-Hash命令"></a>2.5 Redis命令-Hash命令</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102326192-1655456787-20231006090927-moy29j8.png" alt="image">​</p><p>‍</p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102326568-653593757-20231006090927-4a1szi1.png" alt="image">​</p><p>‍</p><p><strong>Hash类型的常见命令</strong></p><ul><li>HSET key field value：添加或者修改hash类型key的field的值</li><li>HGET key field：获取一个hash类型key的field的值</li><li>HMSET：批量添加多个hash类型key的field的值</li><li>HMGET：批量获取多个hash类型key的field的值</li><li>HGETALL：获取一个hash类型的key中的所有的field和value</li><li>HKEYS：获取一个hash类型的key中的所有的field</li><li>HINCRBY:让一个hash类型key的字段值自增并指定步长</li><li>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</li></ul><p><strong>贴心小提示</strong>：哈希结构也是我们以后实际开发中常用的命令哟</p><ul><li>HSET和HGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> name Lucy<span class="comment">//大key是 heima:user:3 小key是name，小value是Lucy</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> age <span class="number">21</span><span class="comment">// 如果操作不存在的数据，则是新增</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> age <span class="number">17</span> <span class="comment">//如果操作存在的数据，则是修改</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET heima:user:<span class="number">3</span> name </span><br><span class="line"><span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET heima:user:<span class="number">3</span> age</span><br><span class="line"><span class="string">&quot;17&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HMSET和HMGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">4</span> name HanMeiMei</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">4</span> name LiLei age <span class="number">20</span> sex man</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMGET heima:user:<span class="number">4</span> name age sex</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HGETALL</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HKEYS和HVALS</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HKEYS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HINCRBY</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HINCRBY  heima:user:<span class="number">4</span> age <span class="number">2</span></span><br><span class="line">(integer) <span class="number">22</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;22&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HINCRBY  heima:user:<span class="number">4</span> age -<span class="number">2</span></span><br><span class="line">(integer) <span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li>HSETNX</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSETNX heima:user4 sex <span class="title function_">woman</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSETNX heima:user:<span class="number">3</span> sex <span class="title function_">woman</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;woman&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-6-Redis命令-List命令"><a href="#2-6-Redis命令-List命令" class="headerlink" title="2.6 Redis命令-List命令"></a>2.6 Redis命令-List命令</h2><p>redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p><strong>List的常见命令有：</strong></p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102327028-1003929740-20231006090927-9vkfowl.png" alt="image">​</p><p>‍</p><ul><li>LPUSH和RPUSH</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH users <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPUSH users <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">(integer) <span class="number">6</span></span><br></pre></td></tr></table></figure><ul><li>LPOP和RPOP</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPOP users</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPOP users</span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br></pre></td></tr></table></figure><ul><li>LRANGE</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE users <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="2-7-Redis命令-Set命令"><a href="#2-7-Redis命令-Set命令" class="headerlink" title="2.7 Redis命令-Set命令"></a>2.7 Redis命令-Set命令</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集.并集.差集等功能</li></ul><p><strong>Set类型的常见命令</strong></p><ul><li>SADD key member … ：向set中添加一个或多个元素</li><li>SREM key member … : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2 … ：求key1与key2的交集</li><li>SDIFF key1 key2 … ：求key1与key2的差集</li><li>SUNION key1 key2 ..：求key1和key2的并集</li></ul><p>例如两个集合：s1和s2:</p><p>求交集：SINTER s1 s2</p><p>求s1与s2的不同：SDIFF s1 s2</p><p><strong>具体命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd s1 a b <span class="title function_">c</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s1</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srem s1 <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER s1 <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER s1 <span class="title function_">b</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SCARD <span class="title function_">s1</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><ul><li>将下列数据用Redis的Set集合来存储：</li><li>张三的好友有：李四.王五.赵六</li><li>李四的好友有：王五.麻子.二狗</li><li>利用Set的命令实现下列功能：</li><li>计算张三的好友有几人</li><li>计算张三和李四有哪些共同好友</li><li>查询哪些人是张三的好友却不是李四的好友</li><li>查询张三和李四的好友总共有哪些人</li><li>判断李四是否是张三的好友</li><li>判断张三是否是李四的好友</li><li>将李四从张三的好友列表中移除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD zs lisi wangwu <span class="title function_">zhaoliu</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD ls wangwu mazi <span class="title function_">ergou</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SCARD <span class="title function_">zs</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SINTER zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SDIFF zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SUNION zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;mazi&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;ergou&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER zs <span class="title function_">lisi</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER ls <span class="title function_">zhangsan</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SREM zs <span class="title function_">lisi</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SMEMBERS zs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;wangwu&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-8-Redis命令-SortedSet类型"><a href="#2-8-Redis命令-SortedSet类型" class="headerlink" title="2.8 Redis命令-SortedSet类型"></a>2.8 Redis命令-SortedSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF.ZINTER.ZUNION：求差集.交集.并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</li><li><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</li></ul><p>‍</p><h1 id="3-Redis的Java客户端-Jedis"><a href="#3-Redis的Java客户端-Jedis" class="headerlink" title="3. Redis的Java客户端-Jedis"></a>3. Redis的Java客户端-Jedis</h1><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/docs/clients/">https://redis.io/docs/clients/</a></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102327499-2139679226-20231006090927-xzi31de.png" alt="image">​</p><p>其中Java客户端也包含很多：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102328113-59714361-20231006090927-rqazat4.png" alt="image">​</p><p>标记为❤的就是推荐使用的java客户端，包括：</p><ul><li>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此我们后期会直接以SpringDataRedis来学习。</li><li>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map.Queue等，而且支持跨进程的同步机制：Lock.Semaphore等待，比较适合用来实现特殊的功能需求。</li></ul><h2 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1 快速入门"></a>3.1 快速入门</h2><ol><li>创建Maven工程</li><li><p>引入依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jedis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建立连接</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 建立连接</span></span><br><span class="line"><span class="comment">//        jedis = new Jedis(&quot;192.168.146.129&quot; , 6379);</span></span><br><span class="line">        jedis = JedisConnectionFactory.getJedis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 设置密码</span></span><br><span class="line"><span class="comment">//        jedis.auth(&quot;north&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 选择库</span></span><br><span class="line">        jedis.select(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 存数据</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;陈平安&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">       <span class="comment">// 取数据</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">hset</span> <span class="operator">=</span> jedis.hset(<span class="string">&quot;user:1&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;石昊&quot;</span>);</span><br><span class="line">       <span class="type">Long</span> <span class="variable">hset1</span> <span class="operator">=</span> jedis.hset(<span class="string">&quot;user:1&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;19&quot;</span>);</span><br><span class="line">    </span><br><span class="line">       Map&lt;String, String&gt; hgetAll = jedis.hgetAll(<span class="string">&quot;user:1&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;hgetAll = &quot;</span> + hgetAll);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>释放资源</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-2-Jedis连接池"><a href="#3-2-Jedis连接池" class="headerlink" title="3.2 Jedis连接池"></a>3.2 Jedis连接池</h2><p><strong>Jedis本身是线程不安全的</strong>，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用<strong>Jedis连接池代替Jedis的直连方式</strong></p><p>有关池化思想，并不仅仅是这里会使用，很多地方都有，比如说我们的数据库连接池，比如我们tomcat中的线程池，这些都是<code>池化思想</code>​的体现。</p><h3 id="3-2-1-创建Jedis的连接池"><a href="#3-2-1-创建Jedis的连接池" class="headerlink" title="3.2.1 创建Jedis的连接池"></a>3.2.1 创建Jedis的连接池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 配置连接池</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">poolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        poolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        poolConfig.setMaxWaitMillis(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 创建连接池对象</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(poolConfig , <span class="string">&quot;192.168.146.129&quot;</span> , <span class="number">6379</span> , <span class="number">1000</span> , <span class="string">&quot;north&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码说明：</strong></p><ul><li>1） JedisConnectionFacotry：工厂设计模式是实际开发中非常常用的一种设计模式，我们可以使用工厂，去降低代的耦合，比如Spring中的Bean的创建，就用到了工厂设计模式</li><li>2）静态代码块：随着类的加载而加载，确保只能执行一次，我们在加载当前工厂类的时候，就可以执行static的操作完成对 连接池的初始化</li><li>3）最后提供返回连接池中连接的方法.</li></ul><p>‍</p><p><strong>对于这段代码的理解：</strong></p><p>这段代码是一个用于连接 Redis 数据库的 Java 类 <code>JedisConnectionFactory</code>​。它使用了 Jedis 库，这是一个流行的 Redis 客户端库，用于在 Java 程序中与 Redis 服务器进行通信。</p><p>让我解释一下这段代码的主要部分：</p><ol><li><code>public class JedisConnectionFactory</code>: 这是一个公共类的定义，类名为 <code>JedisConnectionFactory</code>​，用于创建 Redis 连接工厂。</li><li><code>private static final JedisPool jedisPool;</code>: 这是一个私有的静态常量，用于保存连接到 Redis 服务器的连接池实例。连接池是一种管理和维护与 Redis 服务器连接的机制，可以提高连接的复用和性能。</li><li><p><code>static &#123; ... &#125;</code>: 这是一个静态代码块，在类被加载时执行。在这个代码块中，你可以看到配置了一个 Jedis 连接池。以下是对配置选项的解释：</p><ul><li><code>JedisPoolConfig poolConfig = new JedisPoolConfig();</code>: 创建一个 Jedis 连接池的配置对象。</li><li><code>poolConfig.setMaxTotal(8);</code>: 设置连接池中最大连接数为 8。</li><li><code>poolConfig.setMaxIdle(8);</code>: 设置连接池中最大空闲连接数为 8。</li><li><code>poolConfig.setMinIdle(0);</code>: 设置连接池中最小空闲连接数为 0。</li><li><p><code>poolConfig.setMaxWaitMillis(1000);</code>: 设置从连接池获取连接的最大等待时间为 1000 毫秒。</p><p>然后，使用这些配置项创建一个 Jedis 连接池实例：</p></li><li><p><code>jedisPool = new JedisPool(poolConfig, &quot;192.168.146.129&quot;, 6379, 1000, &quot;north&quot;);</code>​</p><ul><li><code>poolConfig</code>: 使用之前配置的连接池配置对象。</li><li><code>&quot;192.168.146.129&quot;</code>: Redis 服务器的 IP 地址。</li><li><code>6379</code>: Redis 服务器的端口号。</li><li><code>1000</code>: 连接超时时间（毫秒）。</li><li><code>&quot;north&quot;</code>: 连接到 Redis 服务器的密码（如果有密码保护）。</li></ul></li></ul></li><li><code>public static Jedis getJedis()</code>: 这是一个公共静态方法，用于从连接池中获取一个可用的 Redis 连接（Jedis 对象）。通过调用 <code>jedisPool.getResource()</code>​ 来获取连接。</li></ol><p>这段代码的作用是创建一个连接到 Redis 数据库的连接池，以便在应用程序中可以轻松地获取和管理与 Redis 服务器的连接。通过调用 <code>getJedis()</code>​ 方法，你可以获取一个可用的 Redis 连接并开始执行对 Redis 的操作。要确保在使用完连接后，将其释放回连接池以供其他地方使用。</p><h3 id="3-2-2-改造原始代码"><a href="#3-2-2-改造原始代码" class="headerlink" title="3.2.2 改造原始代码"></a>3.2.2 改造原始代码</h3><p><strong>代码说明:</strong></p><p>1.在我们完成了使用工厂设计模式来完成代码的编写之后，我们在获得连接时，就可以通过工厂来获得。</p><p>，而不用直接去new对象，降低耦合，并且使用的还是连接池对象。</p><p>2.当我们使用了连接池后，当我们关闭连接其实并不是关闭，而是将Jedis还回连接池的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@BeforeEach</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">//建立连接</span></span><br><span class="line">     <span class="comment">/*jedis = new Jedis(&quot;127.0.0.1&quot;,6379);*/</span></span><br><span class="line">     jedis = JedisConnectionFacotry.getJedis();</span><br><span class="line">      <span class="comment">//选择库</span></span><br><span class="line">     jedis.select(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</span><br><span class="line">         jedis.close();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="4-Redis的Java客户端-SpringDataRedis"><a href="#4-Redis的Java客户端-SpringDataRedis" class="headerlink" title="4. Redis的Java客户端-SpringDataRedis"></a>4. Redis的Java客户端-SpringDataRedis</h1><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK.JSON.字符串.Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102328570-539085503-20231006090927-v8ynnm1.png" alt="image">​</p><p>‍</p><h2 id="4-1-快速入门"><a href="#4-1-快速入门" class="headerlink" title="4.1 快速入门"></a>4.1 快速入门</h2><ol><li><p>导入坐标</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--common-pool--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--Jackson依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span>  <span class="comment">#最大连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span>   <span class="comment">#最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>   <span class="comment">#最小空闲连接</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">100ms</span> <span class="comment">#连接等待时间</span></span><br></pre></td></tr></table></figure></li><li><p>test</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 写入一条String数据</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span> , <span class="string">&quot;徐凤年&quot;</span>);</span><br><span class="line">    <span class="comment">// 取出数据</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user:100&quot;</span> , <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李七夜&quot;</span> , <span class="number">19</span>));</span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">o</span> <span class="operator">=</span> (User) redisTemplate.opsForValue().get(<span class="string">&quot;user:100&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;o = &quot;</span> + o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>‍</p><p><strong>贴心小提示：SpringDataJpa使用起来非常简单，记住如下几个步骤即可</strong></p><p>SpringDataRedis的使用步骤：</p><ul><li>引入spring-boot-starter-data-redis依赖</li><li>在application.yml配置Redis信息</li><li>注入RedisTemplate</li></ul><h2 id="4-2-数据序列化器"><a href="#4-2-数据序列化器" class="headerlink" title="4.2 数据序列化器"></a>4.2 数据序列化器</h2><p>RedisTemplate可以接收任意Object作为值写入Redis：</p><p>只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的：</p><p>缺点：</p><ul><li>可读性差</li><li>内存占用较大</li></ul><p>我们可以自定义RedisTemplate的序列化方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 创建JSON序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// 设置Key的序列化</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置Value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里采用了JSON序列化来代替默认的JDK序列化方式。最终结果如图</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.north.pojo.User&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李七夜&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。</p><h2 id="4-3-StringRedisTemplate"><a href="#4-3-StringRedisTemplate" class="headerlink" title="4.3 StringRedisTemplate"></a>4.3 StringRedisTemplate</h2><p>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.north.pojo.User&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李七夜&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>为了在反序列化时知道对象的类型，<code>JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销</code>​。</p><p>为了减少内存的消耗，我们可以采用<code>手动序列化的方式</code>​，换句话说，就是<code>不借助默认的序列化器，而是我们自己来控制序列化的动作</code>​，同时，我们只<strong>采用String的序列化器</strong>，这样，在存储value时，我们就不需要在内存中就不用多存储数据，从而节约我们的内存空间</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102329214-631754004-20231006090927-73zp0qe.png" alt="image">​</p><p>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</p><p>‍</p><p><strong>手动序列化实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;String , Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">    <span class="comment">// 创建RedisTemplate 对象</span></span><br><span class="line">    RedisTemplate&lt;String , Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置连接工厂</span></span><br><span class="line">    redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置序列化工具</span></span><br><span class="line">    <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key 和 hashKey 采用String序列化</span></span><br><span class="line">    redisTemplate.setKeySerializer(jsonRedisSerializer);</span><br><span class="line">    redisTemplate.setHashKeySerializer(jsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// value 和 hashValue 采用JSON序列化</span></span><br><span class="line">    redisTemplate.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">    redisTemplate.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们再来看一看存储的数据，小伙伴们就会发现那个class数据已经不在了，节约了我们的空间~</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;徐凤年&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">22</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>‍</p><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON 工具</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStringTemplate</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">// 准备数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;徐凤年&quot;</span> , <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入一条数据到redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:200&quot;</span> , json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:200&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.readValue(result, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user1 = &quot;</span> + user1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后小总结：</p><p>RedisTemplate的两种序列化实践方案：</p><ul><li><p>方案一：</p><ul><li>自定义RedisTemplate</li><li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li></ul></li><li><p>方案二：</p><ul><li>使用StringRedisTemplate</li><li>写入Redis时，手动把对象序列化为JSON</li><li>读取Redis时，手动把读取到的JSON反序列化为对象</li></ul></li></ul><h2 id="4-4-Hash结构操作"><a href="#4-4-Hash结构操作" class="headerlink" title="4.4 Hash结构操作"></a>4.4 Hash结构操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;虎哥&quot;</span>);</span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object, Object&gt; entries = stringRedisTemplate.opsForHash().entries(<span class="string">&quot;user:400&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;entries = &quot;</span> + entries);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天空之城</title>
      <link href="/posts/29f0725f.html"/>
      <url>/posts/29f0725f.html</url>
      
        <content type="html"><![CDATA[<p>题记-我们都是昭阳，生命中却没有米彩、乐瑶、简薇。</p><p>其实题记里没打，怕破坏氛围，我还想打上甚至没有罗本、CC甚至小五等人。就像作者微博里说的，你们有随叫随到陪你喝酒的人么，至少我没有。作者以第一人称的写作手法，很容易让我们带入到昭阳的情感中去，就像我题记说的，我们都是昭阳，生命中却没有米彩、乐瑶、简薇这种视我们为生命的女人。可人生是一道单选题，最后昭阳选择了米彩，辜负了乐瑶和简薇。我没有，你有，却辜负了，这大概就是我们最意难平的地方。</p><p>一乐瑶。</p><p>乐瑶是这部小说最低开高走的一个角色，也是最悲情的角色。(之所以不叫她肖瑶，是因为乐瑶才是和昭阳鬼混两年的小透明，才是把昭阳当成全部世界的一个小麻烦。改名我觉得更多的意思是要和过去那个傻傻爱着昭阳的乐瑶告别的)。乐瑶也是我最喜欢的角色。我多希望第一章乐瑶生下孩子放弃当大腕的梦，昭阳为了孩子和她在一起，故事结束。那时候米彩没有和昭阳纠缠在一起，以后和小海龟在一起，接手母亲米国生意，平淡的过一辈子，也不错。薇薇简可能就悲剧些，不过讲了那么多故事，最后结局时薇薇简不也一样远走米国了么。从第一3章开始薇薇简就已经受伤了，这个没办法，那个烈火一样的女子不肯放过自己。好了扯远了，回来说乐瑶。我之所以说乐瑶是最悲情的，不仅仅是她从来没得到昭阳的爱，还被昭阳喝多了睡了(可能一边睡一边还喊着简薇)，还中奖了，还打胎了。而是作者可能从一开始没想写这么一个角色，开篇乐瑶是以一个混吧的炮友的形象出现的，读完全篇回头再看昭阳开篇对她有多污蔑，我就觉得有多割裂，生命中那么重要的红颜知己居然以炮友形象出现。其实开篇这里出现几个逻辑BUG，开篇昭阳对乐瑶的感觉是炮友，是因为长的好看睡的，一口一个以后别联系了。后来呢，把乐瑶当妹妹，抛弃订婚对象，伤父母的心也要回来帮她，还为她借了100W。试问大家你们为了炮友能做到这地步么。昭阳对乐瑶的感情应该是开篇之前两年鬼混养成的，而不是以打胎为起点。还有说方圆是这座城市唯一的朋友。那罗本和CC就不乐意了，昭阳，你忘了桥洞子唱歌的罗本了么。你忘了无数次照顾喝多的你的CC了么。好了又扯远了，继续说乐瑶。乐瑶可能是全篇活的最明白的一个人了，只有她是生活中的高手，星途她很坦荡，就算之后嫁给了曹公子也没过的不好，她之所以在感情中没做好高手，只是她自己一直不愿意走出来而已，换句话说是对昭阳爱的深沉。乐瑶这个角色丰满实在一次次加戏中体现的，比如被昭阳怂恿偷烟、视罗本为哥哥，爱上昭阳等等。不管如何，作者还是塑造出这么一个让我们又爱又心疼的古怪精灵的乐瑶，视昭阳为全部世界的乐瑶。我猜乐瑶不让昭阳去她的婚礼现场可能是怕她忍不住冲下去求婚昭阳吧。还有拍的那个电影，怀里男主的孩子死了，最后活在男主心里，拍摄完乐瑶那场大哭，我想乐瑶是愿意这不是电影而是生活吧。作者总说米彩不能被辜负是可怜的孩子，母亲抛弃，父亲去世。可乐瑶呢，父亲抛弃，母亲后文提过也成家了，没人疼没人爱，只有乐瑶一个人孤苦伶仃的生活，还被只想着红的前男友抛弃，谁又不是不能辜负的小可怜呢？只许她房客大小姐可怜么，一遍遍的提，又有谁想到我们一直保持微笑的乐瑶有多苦。</p><p>如果留下孩子，如果放弃大腕的梦，如果相信昭阳能养得起她们的孩子，如果早一些表达心意，有太多的如果。那样乐瑶就会是最幸福的人。也不睡着的时候假装死了几回了。意难平。</p><p>二、简薇</p><p>薇薇简是一个纯粹的女人，是火一样的女人。是有着强烈精神洁癖的女人。她说她的人生不可能完美了，她就向她的车一样带着伤痕，提醒自己，惩罚自己。这里先说她为什么和昭阳分手。其实全篇作者给了很多暗示，方圆出轨时候扎手，薇薇简无动于衷，并且说她手上也有伤痕。她和昭阳说过我从没想过要背叛你，还有一段薇薇简做梦时候还喊她精神没有背叛(大概是这个意思吧)，有一段薇薇简和向晨争吵，突然说要我把事情都说出来么，向晨立马怂了，还有一段昭阳偷看向晨简薇的短信是这样的(“向晨，你很恶心，你知道吗？就冲你对我和昭阳做的一切，你就恶心！……我已经是这个样子了，没有什么是豁不出去的，你最好从我的视线里滚的越远越好。”)最后银行经理说方圆说过向晨对不起薇薇简和昭阳。还有一段薇薇简说昭阳果然和别的女的鬼混，还说她在美国多么多么辛苦。还有向晨出国一段时间。那么答案很明显，向晨出国陪薇薇简去了，造谣昭阳出轨，灌醉也好下Y也好怎么也好，睡了薇薇简一次(我觉得向晨可能就睡那么一次，之后薇薇简同意和向晨交往也是薇薇简亲眼看见昭阳说米彩是自己女朋友之后，同昭阳一样不想表现太不堪而做出的举动，她心里直到结局也一直爱着昭阳，这样一个强烈精神洁癖的女人怎么会和向晨同居。向晨机关算尽也没能得到简薇，最后才和简薇分手找那个谁)。醒来的薇薇简觉得自己对不起昭阳(或者自己精神中完美的爱情)割腕自杀，虽然救过来了但是她不肯原谅自己和昭阳分手了。这也是故事的开篇。其实薇薇简我觉得是除了乐瑶第二苦情的。那么完美刚烈的一个女子，却遇到向晨这样的小人。错过了与昭阳的完美爱情。她穿着一件白色T恤，惊艳了我一整个夏天。这是昭阳对她最后的回忆，却终究是错过了。我看完小说逛了逛作者微博还有知乎关于这本小说的评价，不少人说简薇能与昭阳一起死，淋汽油和跳护城河那两段。其实我想说乐瑶和米彩也一定做得到。她们对昭阳的爱完全不逊色与薇薇简，乐瑶电影里的坟墓，莫子石说漏了说米彩不顾自己的性命，也无怨无悔(我觉得这段应该是米彩生宝宝难产，不顾自己性命也想给昭阳一个孩子)。但是这种镜头一定要给简薇。她是那么刚烈，她不肯原谅自己的过错，活着每一天都是对自己的折磨，那么死了，或者为了昭阳死、陪着昭阳死，对她来说都是一种完美的结局，只是作者也心疼这个强颜欢笑的女子，最后也给了她一个还算美好的结局。</p><p>如果没有父母反对，如果没有向晨这个小人，如果薇薇简能原谅自己和昭阳好好沟通，如果方圆婚礼昭阳没说米彩是自己女友。有太多的如果，那样薇薇简也会是最幸福的女人。也不用最后远走米国了。意难平。</p><p>三、米彩</p><p>房客大小姐做为天命女主角应该是最幸福的一个了，这个不用意难平了。从最初打打闹闹，到爱上昭阳，再到各种矛盾，再到落魄回徐州结婚(话说这段真的为了惨而惨啊，有那么穷么，投资那花店多钱呢。突然就几万都没有了，作者也真是的。)再到婚礼中昭阳跑了去看前女友，直到最后有了孩子。挺好的，一路风风雨雨，结局是美好的就好。说个有意思的事，我看到米彩第一次和昭阳在一起的时候我发现进度才20%，我就觉得事情没那么简单。人生看小说10多年第一次直接去看了结局，我当时想结局昭阳和米彩在一起我就继续看，不在一起我就不看了。还好结局是好的，我才继续看。可见作者这小说有多虐。有很多人说米彩不爱昭阳，她不爱昭阳会顶着所有人反对和昭阳在一起么，会为了她吃那么多醋么，会和昭阳回徐州做一个小助理么。平平淡淡是昭阳的梦想不是米彩的。大小姐角色之所以让人喜欢，是她完美的出场，完美的形象，作者把她描写的真就像不问俗世的仙子。她没有男女感情经理，没喜欢过除了昭阳以外的别人，所以对感情的表达上显得很生疏，很多时候没有乐瑶的无微不至。但这也是让我们着迷的地方，一个不理尘世的仙子突然为了你下凡笨手笨脚的适应你的一切，想想就很梦幻。所以大小姐不能辜负，大小姐众万所归和昭阳在一起了。(大小姐卑就惹人心疼。乐瑶和薇薇简就是活该，我又酸了不好意思)。</p><p>四年前你是我的房客，四年后你是我的妻子。祝渣阳和房客大小姐幸福吧。</p><p>四，方圆和颜妍夫妇</p><p>方圆做为本书最高开低走的角色，我觉得最后洗白也没什么作用。简薇和昭阳分手方圆是罪魁祸首之一，偷拍昭阳给向晨，让向晨持续不断的给简薇看照片。还反过头来有模有样的说昭阳过的不好不上进。我呸，恶心。昭阳做为男主，如果没和简薇分手，以书里昭阳的超能力，你方圆是个屁啊。至于最后的背叛米彩，我觉得更像是小丑的闹剧。另外在颜妍和方圆离婚之后有几次和昭阳欲言又止的对话中，应该是她也知道方圆的所作所为。还拿昭阳当弟弟，拿简薇当闺蜜。我也只能是呵呵了。好了就这样吧，配角而已不愿意多说，就像向晨我根本不写他，他不配。</p><p>五、罗本和CC以及女教师</p><p>这就是一场错误的典范，罗本选择和前任结果错过了。女教师选择和前任，最后也回小山村了。所以这里告诉我们，不能和前任和好，要向前看。最后罗本和女歌手，CC闪婚了，女教师陪走了一个之后找个二婚的教师。无关爱情，却也是不错的结局，不是么。就像是板爹也是有故事的人，最后选择了昭阳妈妈，过的不也一样挺好么。爱情是爱情，生活是生活。</p><p>六、昭阳</p><p>其实我们就是一个又一个的昭阳，虽然没有他有超能力，让那么多女性爱上他，让钱来的那么容易。可是我们也是苦海中沉浮的人。不说了，读过所有鸡汤也不一定过好一生。如人饮水，冷暖自知。说小说里人物行，劝大家我张不开嘴 说点拜年话吧，祝大家都能过的幸福。</p><p>最后，附上一首辛弃疾的词，自己理解。</p><p>丑奴儿·书博山道中壁 [宋]辛弃疾</p><p>少年不识愁滋味，爱上层楼。爱上层楼，为赋新 词强说愁。</p><p>而今识尽愁滋味，欲说还休。欲说还休，却道天 凉好个秋。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我在人间凑数的日子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web期末大作业</title>
      <link href="/posts/5596f2.html"/>
      <url>/posts/5596f2.html</url>
      
        <content type="html"><![CDATA[<h2 id="首页展示"><a href="#首页展示" class="headerlink" title="首页展示"></a>首页展示</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115054-wkmufes.png" alt="image">​​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115153-xbmfrtr.png" alt="image">​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115313-k8u9gdp.png" alt="image">​​​​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115219-j69g751.png" alt="image">​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115233-ryw65qz.png" alt="image">​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115249-vvr26cq.png" alt="image">​​​</p><p>‍</p><h2 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h2><blockquote><p>QQ音乐 ， Listen1</p></blockquote><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验九 图的创建与遍历</title>
      <link href="/posts/8712b9be.html"/>
      <url>/posts/8712b9be.html</url>
      
        <content type="html"><![CDATA[<p><strong>实验时间：</strong> 第11周</p><p><strong>实验目的：</strong> 掌握图的邻接矩阵、邻接表两种存储结构，能够实现在任意一种存储结构上的创建和遍历两种基本操作</p><p><strong>实验要求：</strong></p><p>1、认真阅读和掌握教材上和本实验相关内容和算法（见P161~170）。</p><p>2、上机将图的任意一种存储表示的创建和遍历（DFS和BFS至少实现一种）算法实现。</p><p>3、实现下面实验内容要求的功能，并能够进行简单的输入输出验证。</p><p><strong>实验内容：</strong></p><p>1、 图的创建部分</p><p>编程实现图的任意一种存储表示的创建算法，要求能够进行简单的输入输出验证。</p><p>2、 图的遍历操作部分</p><p>编程实现图的遍历操作，至少实现图的深度优先搜索和广度优先搜索两种遍历算法中的一种，要求能够进行简单的输入输出验证。</p><h2 id="图的创建与遍历（使用邻接矩阵）"><a href="#图的创建与遍历（使用邻接矩阵）" class="headerlink" title="图的创建与遍历（使用邻接矩阵）"></a>图的创建与遍历（使用邻接矩阵）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTICES 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Representation of Graph using Adjacency Matrix</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> V; <span class="comment">// Number of vertices</span></span><br><span class="line">    <span class="type">int</span> **matrix; <span class="comment">// Adjacency matrix</span></span><br><span class="line">&#125; GraphAdjMatrix;</span><br><span class="line"></span><br><span class="line">GraphAdjMatrix* <span class="title function_">createGraphAdjMatrix</span><span class="params">(<span class="type">int</span> vertices)</span> &#123;</span><br><span class="line">    GraphAdjMatrix* graph = (GraphAdjMatrix*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphAdjMatrix));</span><br><span class="line">    graph-&gt;V = vertices;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate memory for adjacency matrix</span></span><br><span class="line">    graph-&gt;matrix = (<span class="type">int</span>**)<span class="built_in">malloc</span>(vertices * <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertices; ++i) &#123;</span><br><span class="line">        graph-&gt;matrix[i] = (<span class="type">int</span>*)<span class="built_in">calloc</span>(vertices, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addEdgeAdjMatrix</span><span class="params">(GraphAdjMatrix* graph, <span class="type">int</span> src, <span class="type">int</span> dest)</span> &#123;</span><br><span class="line">    <span class="comment">// Assuming it&#x27;s an undirected graph, assigning 1 for both directions</span></span><br><span class="line">    graph-&gt;matrix[src][dest] = <span class="number">1</span>;</span><br><span class="line">    graph-&gt;matrix[dest][src] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraphAdjMatrix</span><span class="params">(GraphAdjMatrix* graph)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Adjacency Matrix:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; graph-&gt;V; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; graph-&gt;V; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, graph-&gt;matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeGraphAdjMatrix</span><span class="params">(GraphAdjMatrix* graph)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; graph-&gt;V; ++i) &#123;</span><br><span class="line">        <span class="built_in">free</span>(graph-&gt;matrix[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(graph-&gt;matrix);</span><br><span class="line">    <span class="built_in">free</span>(graph);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">4</span>; <span class="comment">// Number of vertices</span></span><br><span class="line">    GraphAdjMatrix* g = createGraphAdjMatrix(V);</span><br><span class="line"></span><br><span class="line">    addEdgeAdjMatrix(g, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    addEdgeAdjMatrix(g, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    addEdgeAdjMatrix(g, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    addEdgeAdjMatrix(g, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    printGraphAdjMatrix(g);</span><br><span class="line"></span><br><span class="line">    freeGraphAdjMatrix(g);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图的创建与遍历（使用邻接表）"><a href="#图的创建与遍历（使用邻接表）" class="headerlink" title="图的创建与遍历（使用邻接表）"></a>图的创建与遍历（使用邻接表）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Node to store adjacent vertices in Adjacency List</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> dest;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adjacency List representation of Graph</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> V; <span class="comment">// Number of vertices</span></span><br><span class="line">    Node** <span class="built_in">array</span>; <span class="comment">// Array of adjacency lists</span></span><br><span class="line">&#125; GraphAdjList;</span><br><span class="line"></span><br><span class="line">Node* <span class="title function_">createNode</span><span class="params">(<span class="type">int</span> dest)</span> &#123;</span><br><span class="line">    Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;dest = dest;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GraphAdjList* <span class="title function_">createGraphAdjList</span><span class="params">(<span class="type">int</span> vertices)</span> &#123;</span><br><span class="line">    GraphAdjList* graph = (GraphAdjList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphAdjList));</span><br><span class="line">    graph-&gt;V = vertices;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create an array of adjacency lists</span></span><br><span class="line">    graph-&gt;<span class="built_in">array</span> = (Node**)<span class="built_in">malloc</span>(vertices * <span class="keyword">sizeof</span>(Node*));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertices; ++i) &#123;</span><br><span class="line">        graph-&gt;<span class="built_in">array</span>[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addEdgeAdjList</span><span class="params">(GraphAdjList* graph, <span class="type">int</span> src, <span class="type">int</span> dest)</span> &#123;</span><br><span class="line">    <span class="comment">// Add edge from src to dest</span></span><br><span class="line">    Node* newNode = createNode(dest);</span><br><span class="line">    newNode-&gt;next = graph-&gt;<span class="built_in">array</span>[src];</span><br><span class="line">    graph-&gt;<span class="built_in">array</span>[src] = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For undirected graph, uncomment the lines below</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    newNode = createNode(src);</span></span><br><span class="line"><span class="comment">    newNode-&gt;next = graph-&gt;array[dest];</span></span><br><span class="line"><span class="comment">    graph-&gt;array[dest] = newNode;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraphAdjList</span><span class="params">(GraphAdjList* graph)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Adjacency List:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; graph-&gt;V; ++i) &#123;</span><br><span class="line">        Node* temp = graph-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Adjacency list of vertex %d: &quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, temp-&gt;dest);</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeGraphAdjList</span><span class="params">(GraphAdjList* graph)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; graph-&gt;V; ++i) &#123;</span><br><span class="line">        Node* current = graph-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            Node* next = current-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(current);</span><br><span class="line">            current = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(graph-&gt;<span class="built_in">array</span>);</span><br><span class="line">    <span class="built_in">free</span>(graph);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">4</span>; <span class="comment">// Number of vertices</span></span><br><span class="line">    GraphAdjList* g = createGraphAdjList(V);</span><br><span class="line"></span><br><span class="line">    addEdgeAdjList(g, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    addEdgeAdjList(g, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    addEdgeAdjList(g, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    addEdgeAdjList(g, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    printGraphAdjList(g);</span><br><span class="line"></span><br><span class="line">    freeGraphAdjList(g);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构综合实验</title>
      <link href="/posts/b42f7f50.html"/>
      <url>/posts/b42f7f50.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用C语言进行实现 ， 程序实验报告待完成！</p></blockquote><h1 id="1-其它-请同学们完成综合设计性实验内容，题目可以从以下选择。（二选一）"><a href="#1-其它-请同学们完成综合设计性实验内容，题目可以从以下选择。（二选一）" class="headerlink" title="1.  (其它) 请同学们完成综合设计性实验内容，题目可以从以下选择。（二选一）"></a>1.  <strong>(其它)</strong> 请同学们完成综合设计性实验内容，题目可以从以下选择。（二选一）</h1><p>要求：将以上题目完成并填写综合设计性实验报告，报告最后附加上源代码。完成后将报告按照正确的命名格式上传</p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>‍</p><blockquote><p>输入n个字母及其权值，对其进行哈夫曼编码。</p></blockquote><p>‍</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_NODES 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结点结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> letter; <span class="comment">// 字母</span></span><br><span class="line">    <span class="type">int</span> freq;    <span class="comment">// 频率</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">left</span>, *<span class="title">right</span>;</span> <span class="comment">// 左右子节点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈夫曼树的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">root</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新结点</span></span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">newNode</span><span class="params">(<span class="type">char</span> letter, <span class="type">int</span> freq)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">node</span> =</span> (<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    node-&gt;letter = letter;</span><br><span class="line">    node-&gt;freq = freq;</span><br><span class="line">    node-&gt;left = node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建哈夫曼树</span></span><br><span class="line"><span class="keyword">struct</span> HuffmanTree* <span class="title function_">buildHuffmanTree</span><span class="params">(<span class="type">char</span> letters[], <span class="type">int</span> freqs[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建初始节点列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">nodes</span>[<span class="title">MAX_NODES</span>];</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        nodes[i] = newNode(letters[i], freqs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建哈夫曼树</span></span><br><span class="line">    <span class="keyword">while</span> (size &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> min1 = <span class="number">0</span>, min2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出频率最小的两个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodes[i]-&gt;freq &lt; nodes[min1]-&gt;freq) &#123;</span><br><span class="line">                min2 = min1;</span><br><span class="line">                min1 = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodes[i]-&gt;freq &lt; nodes[min2]-&gt;freq) &#123;</span><br><span class="line">                min2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新节点作为父节点</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">mergedNode</span> =</span> newNode(<span class="string">&#x27;$&#x27;</span>, nodes[min1]-&gt;freq + nodes[min2]-&gt;freq);</span><br><span class="line">        mergedNode-&gt;left = nodes[min1];</span><br><span class="line">        mergedNode-&gt;right = nodes[min2];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将已经处理过的节点移至列表末尾</span></span><br><span class="line">        nodes[min1] = mergedNode;</span><br><span class="line">        nodes[min2] = nodes[size - <span class="number">1</span>];</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建哈夫曼树并返回</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span>* <span class="title">tree</span> =</span> (<span class="keyword">struct</span> HuffmanTree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> HuffmanTree));</span><br><span class="line">    tree-&gt;root = nodes[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印哈夫曼编码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printCodes</span><span class="params">(<span class="keyword">struct</span> Node* root, <span class="type">int</span> arr[], <span class="type">int</span> top)</span> &#123;</span><br><span class="line">    <span class="comment">// 达到叶子节点后打印编码</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">        arr[top] = <span class="number">0</span>;</span><br><span class="line">        printCodes(root-&gt;left, arr, top + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">        arr[top] = <span class="number">1</span>;</span><br><span class="line">        printCodes(root-&gt;right, arr, top + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(root-&gt;left) &amp;&amp; !(root-&gt;right)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c: &quot;</span>, root-&gt;letter);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; top; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符的个数: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> letters[MAX_NODES];</span><br><span class="line">    <span class="type">int</span> freqs[MAX_NODES];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符和频率:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot; %c %d&quot;</span>, &amp;letters[i], &amp;freqs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span>* <span class="title">tree</span> =</span> buildHuffmanTree(letters, freqs, n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> codes[MAX_NODES], top = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Huffman Codes:\n&quot;</span>);</span><br><span class="line">    printCodes(tree-&gt;root, codes, top);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果演示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/north_img/img/image-20231120233318-r9z7o78.png" alt="image">​</p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>‍</p><blockquote><p>用连通网中的顶点表示城市，边上的权值表示在这两个两个城市建立通信所花费的代价。求要连通所有的城市所花费的最小代价，要求构造最小生成树。</p></blockquote><p>‍</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTICES 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> graph[MAX_VERTICES][MAX_VERTICES];</span><br><span class="line"><span class="type">int</span> numVertices;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">minKey</span><span class="params">(<span class="type">int</span> key[], <span class="type">bool</span> mstSet[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> min = INT_MAX, min_index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; numVertices; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mstSet[v] == <span class="literal">false</span> &amp;&amp; key[v] &lt; min) &#123;</span><br><span class="line">            min = key[v];</span><br><span class="line">            min_index = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printMST</span><span class="params">(<span class="type">int</span> parent[])</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Edge \tWeight\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numVertices; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d - %d \t%d \n&quot;</span>, parent[i], i, graph[i][parent[i]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">primMST</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> parent[MAX_VERTICES];</span><br><span class="line">    <span class="type">int</span> key[MAX_VERTICES];</span><br><span class="line">    <span class="type">bool</span> mstSet[MAX_VERTICES];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertices; i++) &#123;</span><br><span class="line">        key[i] = INT_MAX;</span><br><span class="line">        mstSet[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    key[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    parent[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; numVertices - <span class="number">1</span>; count++) &#123;</span><br><span class="line">        <span class="type">int</span> u = minKey(key, mstSet);</span><br><span class="line">        mstSet[u] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; numVertices; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (graph[u][v] &amp;&amp; mstSet[v] == <span class="literal">false</span> &amp;&amp; graph[u][v] &lt; key[v]) &#123;</span><br><span class="line">                parent[v] = u;</span><br><span class="line">                key[v] = graph[u][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printMST(parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入城市的个数: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;numVertices);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入城市的成本矩阵:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertices; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numVertices; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;graph[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小生成的树为:\n&quot;</span>);</span><br><span class="line">    primMST();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果演示</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/north_img/img/image-20231120234753-vyoc9cw.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构作业 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
