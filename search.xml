<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>7. Maven 文档资料</title>
      <link href="/posts/edab46fe.html"/>
      <url>/posts/edab46fe.html</url>
      
        <content type="html"><![CDATA[<h1>什么是Maven</h1><h2 id="Maven的概念">Maven的概念</h2><p>Maven 是自动化构建工具。</p><p>Maven 是 Apache 软件基金会组织维护的一款自动化构建工具，专注服务于 Java 平台的项目构建和依赖管理。Maven 这个单词的本意是：专家，内行。</p><p>Maven 是目前最流行的自动化构建工具，对于生产环境下多框架、多模块整合开发有重要作用，Maven 是一款在大型项目开发过程中不可或缺的重要工具。</p><h2 id="为什么要使用Maven">为什么要使用Maven</h2><p>我们知道，项目开发不仅仅是写写代码而已，期间会伴随着各种必不可少的事情要做，例如：</p><ol><li class="lvl-3"><p>我们需要引用各种 jar 包，尤其是比较大的工程，引用的 jar 包往往有几十个乃至上百个，每个都要到不同的官网去下载，而且每次用到的 jar 包，都需要手动引入工程目录，而且经常遇到各种让人抓狂的 jar 包冲突，版本冲突，Maven可以自动下载jar包及依赖包添加到项目中，大大减轻了工作负担。</p></li><li class="lvl-3"><p>我们开发的 Java 文件，都是需要将它编译成二进制字节码文件。好在这项工作可以由各种集成开发工具帮我们完成，Eclipse、IDEA 等都可以将代码即时编译。但有时候我们需要多个模块同时编译，就必须要借助于Maven工具了。</p></li><li class="lvl-3"><p>每个项目或模块开发过程中都会有 bug，因此写完了代码，我们还要写一些单元测试，然后一个个的运行来检验代码质量，Maven提供了专门的测试插件来实施测试。</p></li><li class="lvl-3"><p>再优雅的代码也是要出来卖的。我们后面还需要把代码与各种配置文件、资源整合到一起，定型打包，如果是 web项目，还需要将之发布到服务器进行调用，这些都可以通过Maven轻松搞定。</p></li></ol><p>总之，Maven是项目开发必须不可少的工具。</p><p>类似自动化构建工具还有：Gant,  Gradle。</p><h2 id="项目构建过程">项目构建过程</h2><p>构建(build)是面向过程的(从开始到结尾的多个步骤)，涉及到多个环节的协同工作。<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710165876773-51d81f3a-ae16-4c71-ad03-2a128472fe5e.png#averageHue=%23c8ccbe&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=112&amp;id=u84707db8&amp;originHeight=120&amp;originWidth=831&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=399725&amp;status=done&amp;style=none&amp;taskId=u4e3a6e56-a9b4-4ad1-80fe-669ef75495c&amp;title=&amp;width=774" alt="image.png"><br>构建过程的几个主要环节</p><ol><li class="lvl-3"><p>清理：删除以前的编译结果，为重新编译做好准备。</p></li><li class="lvl-3"><p>编译：将Java源程序编译为字节码文件。</p></li><li class="lvl-3"><p>测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。</p></li><li class="lvl-3"><p>报告：在每一次测试后以标准的格式记录和展示测试结果。</p></li><li class="lvl-3"><p>打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web 工程对应war包。</p></li><li class="lvl-3"><p>安装：在Maven环境下特指将jar包安装到本地仓库中。这样该项目就可以被其他的maven项目通过依赖的方式引入。</p></li><li class="lvl-3"><p>部署：将jar包部署到私服上。</p></li></ol><h2 id="Maven的两大核心功能（重点）">Maven的两大核心功能（重点）</h2><h3 id="项目构建">项目构建</h3><p>对项目进行编译，测试，打包，部署等构建。</p><h3 id="依赖管理">依赖管理</h3><p>对jar包的统一管理，Maven提供中央仓库，私服，本地仓库解决jar包的依赖和相关依赖的下载。如下图所示：包括蓝、黄两个部分分别对应着**<a href="https://www.zhihu.com/search?q=%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2811089619%7D">依赖关系</a><strong>​</strong>和项目构建**两大核心功能。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710167507407-a3db57eb-0be4-45df-b304-a170351d10b5.png#averageHue=%23f0e1ba&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=391&amp;id=uef3966fd&amp;originHeight=587&amp;originWidth=1007&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=355052&amp;status=done&amp;style=none&amp;taskId=uc21d13e0-70d1-4a82-a676-89305c8dc12&amp;title=&amp;width=671.3333333333334" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726002296-ca615277-385b-4037-a60d-289be4f5cf3e.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u9094f27f&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u3c1a6af9-a81d-482d-9238-3c5b14574d0&amp;title=&amp;width=1400" alt="标头.jpg"></p><h1>Maven的核心概念</h1><h2 id="什么是POM">什么是POM</h2><p>POM(Project Object Model)项目对象模型，它是Maven的核心组件。它是Maven中的基本工作单元。它是一个xml文件，以pom.xml驻留在项目的根目录中。POM不仅包含有关项目的信息及Maven用于构建项目的各种配置的详细信息，还包含目标和插件。</p><p>pom.xml文件示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加父工程的引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.xiaomi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xiaomi-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--本项目的身份证号gav--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_006_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打包方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--集中定义依赖版本号,使用属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mysql驱动的依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--聚合工程--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xiaomi-manager-pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xiaomi-manager-mapper<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xiaomi-manager-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xiaomi-manager-web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--插件配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--指定配置文件识别路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="什么是约定的目录结构">什么是约定的目录结构</h2><p>会有预先约定好的目录结构，必须要遵循的规范，所有的Maven项目都依照这个规范。主要的目的是将项目的源码文件，测试代码，资源文件完全分开，便于项目管理和扩展。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710225813568-68f6bedb-6772-43b7-a474-7cff8fcd2c15.png#averageHue=%23faf9f9&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=496&amp;id=u2fc4f7a9&amp;originHeight=744&amp;originWidth=1806&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=67081&amp;status=done&amp;style=none&amp;taskId=u105d78b0-d8b9-4453-a5ab-5acfdf72d06&amp;title=&amp;width=1204" alt="image.png"></p><h2 id="什么是坐标GAV">什么是坐标GAV</h2><p>也称为gav定位。使用三个标签来唯一定位jar资源。项目的唯一的名称，创建项目时定义gav名称，引用项目时使用gav名称。相当于项目的身份证号。</p><ol><li class="lvl-3"><p>groupId:组织名称,一般是公司域名的倒写  com.bjpowernode</p></li><li class="lvl-3"><p>artifactId:项目名称   springmvc_006_ssm</p></li><li class="lvl-3"><p>version: 版本编号 1.0-SNAPSHOT(开发时的临时版本号）  5.2.5.RELEASE（发布版本）</p></li></ol><p>定义项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_006_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_006_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="什么是仓库">什么是仓库</h2><p>存放jar包的位置 。Maven中所有的jar包都在仓库中。仓库分为本地仓库和远程仓库。</p><p>我们依赖的jar包它从哪儿获取呢？有同学说已经安装了，在它的安装包里啊，大家可以看一下maven下载下来才8M，我们需要的jar包有时候都几百兆甚至几个G，它从哪儿弄去呢？ 其实，maven有仓库的概念。在Maven中，任何一个依赖、插件或者项目构建的输出，都可以称之为构件。Maven 核心程序仅仅定义了自动化构建项目的生命周期，但具体的构建工作是由特定的构件完成的。而且为了提高构建的效率和构件复用，maven把所有的构件统一存储在某一个位置，这个位置就叫做仓库。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726026426-7124f4d1-eb3a-42b7-973e-fc8d2615ebf9.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u7a56683c&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ue6bffadd-427c-4f7f-a7d4-dac901dec96&amp;title=&amp;width=1400" alt="标头.jpg"></p><h3 id="本地仓库">本地仓库</h3><p>本地仓库，存在于当前电脑上，默认存放在<sub>.m2\repository中,为本机上所有的Maven工程服务。你也可以通过Maven的配置文件Maven_home/conf/settings.xml中修改本地仓库所在的目录。</sub> 是用户的主目录，windows系统中是 c:/user/登录系统的用户名</p><p>我课程里是存放在本机上的某个磁盘的位置(一定是没有中文的路径).    D:\repository</p><p>秘密:  gav就是仓库中一级一级的目录名称</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726030375-95a1c1ab-75e3-4fe3-aabf-48bbc42753b8.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=uab89dc5f&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u3d6be77e-e2cd-4c66-9caf-254d7962612&amp;title=&amp;width=1400" alt="标头.jpg"></p><h3 id="远程仓库">远程仓库</h3><p>远程仓库，分为为全世界范围内的开发人员提供服务的中央仓库、为全世界范围内某些特定的用户提供服务的中央仓库镜像、为本公司提供服务自己架设的私服。</p><p>中央仓库是maven默认的远程仓库，其地址是<a href="http://repo.maven.apache.org/maven2/">:h</a>t<a href="http://repo.maven.apache.org/maven2/">tp://repo.maven.apache.org/maven2/</a>，中央仓库包含了绝大多数流行的开源Java构件，以及源码、作者信息、许可证信息等。一般来说，简单的Java项目依赖的构件都可以在这里下载得到。</p><p>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的Maven用户使用。当Maven需要下载构件的时候，它从私服请求，如果私服上不存在该构件，则从外部的远程仓库下载，缓存在私服上之后，再为Maven的下载请求提供服务。我们还可以把一些无法从外部仓库下载到的构件上传到私服上。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710230075376-f389cdfa-9d95-4cce-9771-e717cae4dd48.png#averageHue=%23fcfcf8&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=135&amp;id=ud87b2d1b&amp;originHeight=202&amp;originWidth=949&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=768309&amp;status=done&amp;style=none&amp;taskId=uea684a8d-8510-4571-a895-448d2954317&amp;title=&amp;width=632.6666666666666" alt="image.png"></p><p><strong>程序员常用的一个仓库:</strong><br><strong><a href="http://mvnrepository.com/">http://mvnrepository.com/</a></strong> **   **<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710230122267-f7fc65cb-47fd-49e7-a5e4-dd78391a329a.png#averageHue=%23f8f7f7&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=649&amp;id=u73398b2b&amp;originHeight=974&amp;originWidth=1852&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=323216&amp;status=done&amp;style=none&amp;taskId=uf1df6884-54ab-4866-8d5a-bf25a13c375&amp;title=&amp;width=1234.6666666666667" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726037141-3564a72e-1cb2-4551-9aec-2b9d75bfc033.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u6850271f&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ub6bdfa1d-a713-4f37-bc59-766b479478a&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="什么是依赖">什么是依赖</h2><p>一个Maven 项目正常运行需要其它项目的支持，Maven 会根据坐标自动到本地仓库中进行查找。对于程序员自己的 Maven 项目需要进行安装，才能保存到仓库中。不用maven 的时候所有的 jar 都不是你的，需要去各个地方下载拷贝，用了 maven 所有的 jar 包都是你的，想用谁，叫谁的名字就行。maven 帮你下载。</p><p>除了管理当前要使用的jar包，并且同时管理与其有依赖关系的jar包，自动去下载，并添加到当前的仓库，并给项目添加引用。是通过<dependencies>大标签中的子标签<dependency>，使用gav添加依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726050193-e8daaba3-d3e4-4448-9a8a-44935d9303a2.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u59e52db8&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u74162eee-7808-4f3c-90cf-d1adea7359e&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="什么是生命周期">什么是生命周期</h2><p>对项目的构建是建立在生命周期模型上的，它明确定义项目生命周期各个阶段，并且对于每一个阶段提供相对应的命令，对开发者而言仅仅需要掌握一小堆的命令就可以完成项目各个阶段的构建工作。</p><p>构建项目时按照生命周期顺序构建，每一个阶段都有特定的插件来完成。不论现在要执行生命周期中的哪个阶段，都是从这个生命周期的最初阶段开始的。</p><p>对于我们程序员而言，无论我们要进行哪个阶段的构建，直接执行相应的命令即可，无需担心它前边阶段是否构建，Maven 都会自动构建。这也就是 Maven 这种自动化构建工具给我们带来的好处。</p><p>使用idea后，生命周期要调用的命令被集成化一些按钮，只需要双击即可调用相应的插件来运行。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710230536719-09afed3c-fe6b-4923-ba37-52686b407cc0.png#averageHue=%233a3f42&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=212&amp;id=u4c24fe5b&amp;originHeight=318&amp;originWidth=591&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=753361&amp;status=done&amp;style=none&amp;taskId=ucf96402c-8a54-4db4-ab62-d8dd3314460&amp;title=&amp;width=394" alt="image.png"></p><p>生命周期对应的Maven命令(了解）：</p><ol><li class="lvl-3"><p>mvn clean 清理(会删除原来编译和测试的目录，即 target 目录，但是已经 install 到仓库里的包不会删除)</p></li><li class="lvl-3"><p>mvn compile  编译主程序(会在当前目录下生成一个 target,里边存放编译主程序之后生成的字节码文件)</p></li><li class="lvl-3"><p>mvn test-compile  编译测试程序(会在当前目录下生成一个 target,里边存放编译测试程序之后生成的字节码文件)</p></li><li class="lvl-3"><p>mvn test  测试(会生成一个目录surefire-reports，保存测试结果)</p></li><li class="lvl-3"><p>mvn package  打包主程序(会编译、编译测试、测试、并且按照 pom.xml 配置把主程序打包生成 jar 包或者 war 包)</p></li><li class="lvl-3"><p>mvn install 安装主程序(会把本工程打包，并且按照本工程的坐标保存到本地仓库中)</p></li><li class="lvl-3"><p>mvn deploy 部署主程序(部署到私服仓库中）。</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726054751-b244720d-187b-4a6c-81a5-aad097344b61.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u3015dd55&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u9691393a-f46c-45bc-8f77-a412c9f6a82&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="什么是插件">什么是插件</h2><p>Maven本质上是一个插件框架，它的核心并不执行任何具体的构建任务，所有这些任务都交给插件来完成，例如编译源代码是由maven- compiler-plugin完成的。进一步说，每个任务对应了一个插件目标（goal），每个插件会有一个或者多个目标，例如maven- compiler-plugin的compile目标用来编译位于src/main/java/目录下的主源码，testCompile目标用来编译位于src/test/java/目录下的测试源码。</p><p>Maven支持极简化的插件添加.使用<plugins>大标签中添加<plugin>子标签引用插件.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726058890-166f2f4c-8fa4-4903-a185-4c6066df1b93.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u84d021d1&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u5dea8f95-e5fa-4e36-b8ed-44ec6e8e5ff&amp;title=&amp;width=1400" alt="标头.jpg"></p><h1>Maven的应用</h1><h2 id="下载Maven">下载Maven</h2><p>官网：<a href="http://maven.apache.org/">http://maven.apache.org/</a><br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710207605997-5488cc1d-1e4b-426d-94c5-be14f0499e2b.png#averageHue=%23f4f2f1&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=511&amp;id=u1dedc3b9&amp;originHeight=766&amp;originWidth=1874&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=270109&amp;status=done&amp;style=shadow&amp;taskId=udad52ba6-2e8f-482a-be86-ef58dc3182d&amp;title=&amp;width=1249.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710208724973-df375112-b2cc-4990-8ce7-4979212e72bb.png#averageHue=%23faf8f8&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=533&amp;id=u5e5afe90&amp;originHeight=799&amp;originWidth=1873&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=252564&amp;status=done&amp;style=shadow&amp;taskId=u902e6114-6e9c-4505-bf32-8bddeb05b7a&amp;title=&amp;width=1248.6666666666667" alt="image.png"></p><p>我们使用的是最新apache-maven-3.9.6的版本，idea使用的是2023.1的版本。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726062820-a80ae67b-64b9-4caa-a374-75ba9f180f0b.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u51184fdc&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ube1675b7-fb09-432e-9f4b-5f14973c7cc&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="配置Maven">配置Maven</h2><p>要点：一定要将Maven工具解压到一个没有中文的路径下！</p><h3 id="配置环境变量">配置环境变量</h3><p>必须要配置JAVA_HOME和MAVEN_HOME的环境变量。在Maven工具的bin目录下的mvn文件中多次使用这两个环境变量。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710211770207-3a3021c2-6dfa-44ef-b9f5-ed4e92ce5104.png#averageHue=%23f9f6f5&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=359&amp;id=uecb437db&amp;originHeight=926&amp;originWidth=1894&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=318022&amp;status=done&amp;style=none&amp;taskId=u901b4c86-2443-402a-a636-fccda939ce2&amp;title=&amp;width=733.65625" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726068049-b6800ab9-a016-4cac-91e0-1eab8dda4758.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u5de58bf2&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=uecd56c95-b551-4ab7-9305-2e1c6b9394a&amp;title=&amp;width=1400" alt="标头.jpg"></p><p>配置步骤：</p><ol><li class="lvl-3"><p>我的电脑—&gt;右键属性—&gt;高级系统设置—&gt;环境变量—&gt;系统变量</p></li><li class="lvl-3"><p>点新建—&gt;</p><ol><li class="lvl-6">创建JAVA_HOME环境变量<ol><li class="lvl-9">变量名:  JAVA_HOME</li><li class="lvl-9">变量值:  C:\Program Files\Java\jdk-17</li></ol></li><li class="lvl-6">创建MAVEN_HOME环境变量<ol><li class="lvl-9">变量名:  MAVEN_HOME</li><li class="lvl-9">变量值:  D:\apache-maven-3.9.6  (Maven工具所在的目录，bin的上一级目录）</li></ol></li></ol></li><li class="lvl-3"><p>点path—&gt;编辑—&gt;新建</p><ol><li class="lvl-6">%JAVA_HOME%\bin</li><li class="lvl-6">%MAVEN_HOME%\bin</li><li class="lvl-6">—&gt;确定—&gt;确定—&gt;确定</li></ol></li><li class="lvl-3"><p>打开cmd窗口,输入  mvn -v</p></li></ol><p>Apache Maven 3.9.6 (c9616018c7a021c1c39be70fb2843d6f5f9b8a1c)<br>Maven home: D:\apache-maven-3.9.6<br>Java version: 17.0.6, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk-17<br>Default locale: zh_CN, platform encoding: GBK<br>OS name: “windows 10”, version: “10.0”, arch: “amd64”, family: “windows”<br>有以上输出则表明配置环境变量成功。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726072718-dc24d395-b804-4629-9fea-441319466cd3.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=ue5c0d9ac&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u3ef4d1b1-ef7d-4e71-b224-2964d3e20bb&amp;title=&amp;width=1400" alt="标头.jpg"></p><h3 id="配置Maven工具参数">配置Maven工具参数</h3><p>打开D:\apache-maven-3.9.6\conf\settings.xml文件，进行本地仓库，远程仓库和JDK参数设置。</p><ol><li class="lvl-3"><p>配置本地仓库，将注释中53行的代码提取出注释，放置在第55行，设置本地仓库的地址路径。如果已有本地仓库则直接指定地址，如果没有本地仓库则指定一个目录，在idea配置后会自动生成目录。</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710222022190-7d23106a-01e4-4dc3-9c1f-558e4cb3fba8.png#averageHue=%23fdfbfa&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=501&amp;id=u39b3489b&amp;originHeight=751&amp;originWidth=1859&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=237919&amp;status=done&amp;style=none&amp;taskId=u9d8fc137-82eb-4e0c-86a8-6f338cef6cf&amp;title=&amp;width=1239.3333333333333" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726078941-7fbda798-46c0-4c51-8062-205db199eff3.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u575eaf0e&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u2f589e1b-888f-4f99-b1dd-e7f921fdbec&amp;title=&amp;width=1400" alt="标头.jpg"></p><ol start="2"><li class="lvl-3"><p>配置远程仓库</p></li></ol><p>找到</mirrors>结束标签，将以下代码贴在其前面。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置阿里远程仓库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710222406864-0ca53cb9-5b19-40ca-b5aa-6224835e99a7.png#averageHue=%23fdf9f8&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=467&amp;id=iqsQ0&amp;originHeight=701&amp;originWidth=1859&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=202059&amp;status=done&amp;style=shadow&amp;taskId=u1677f5db-35bf-4529-a85f-961167cc250&amp;title=&amp;width=1239.3333333333333" alt="image.png"><br>远程仓库配置后，经常出现以下bug，连网去点try…就行，如果还是出现try…，就需要到本地仓库中，搜索last*，将出现的所有文件都删除后，再来点try…就行。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710230234589-504260b6-d7ea-420a-ac3c-4a311f32fa1b.png#averageHue=%23302c2c&amp;clientId=u2edacb95-b01a-4&amp;from=paste&amp;height=145&amp;id=uc2963f98&amp;originHeight=218&amp;originWidth=830&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=725228&amp;status=done&amp;style=none&amp;taskId=uabb3d539-ee09-44a1-abc0-2b6b2edc7eb&amp;title=&amp;width=553.3333333333334" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726084792-f31fe4db-54a6-4483-b284-bfa8dec98f5d.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u476afbaa&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=uade644f1-bef3-4d39-99a5-ec3144accb4&amp;title=&amp;width=1400" alt="标头.jpg"></p><ol start="3"><li class="lvl-3"><p>配置JDK属性</p></li></ol><p>在<profiles>标签中进行配置，一定要小心，找到</profiles>结束标签，在其前面配置以下代码。因为在<profiles></profiles>标签中全部是注释，粘到哪里都在注释中，只有找到结束标签</profiles>前才是注释外的，配置才会生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk17<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>17<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726089085-ad574219-ca3c-4caa-9ad3-18258bc7cbd9.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u7ac59d87&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u322ee4ea-3c09-4ad3-8f8e-3893fe7766a&amp;title=&amp;width=1400" alt="标头.jpg"></p><h3 id="为Idea2023当前打开的工作区集成maven">为Idea2023当前打开的工作区集成maven</h3><p>打开idea2023,具体步骤如下：</p><ol><li class="lvl-3"><p>File—&gt;settings—&gt;Build,Execution,Depolyment—&gt;Build Tools—&gt;Maven</p></li></ol><p>Maven home path(Maven工具所在的目录,bin的上一级目录):   D:\apache-maven-3.9.6<br>勾选Override选项<br>User settings file(Maven工具的核心配置文件):  D:\apache-maven-3.9.2\conf\settings.xml<br>Local repository(本地仓库,antlr的上一级目录):  D:\repository</p><ol start="2"><li class="lvl-3"><p>Maven—&gt;Importing—&gt;配置JDK的版本</p></li><li class="lvl-3"><p>Runner</p></li></ol><p>VM Options:-DarchetypeCatalog=internal  (在新建模块时使用本地模板)<br>JRE: 17</p><ol start="4"><li class="lvl-3"><p>Repositories(刷新本地仓库的索引):  选中本地仓库,点Update</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726092866-73df16d2-03bf-41f7-ad7a-86cfa00c1167.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u7a1dd665&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ucb57b601-89aa-4649-b300-1eef731ff39&amp;title=&amp;width=1400" alt="标头.jpg"></p><h3 id="为Idea2023新建项目集成Maven">为Idea2023新建项目集成Maven</h3><ol><li class="lvl-3"><p>File—&gt;New Projects Setup—&gt;Settings for New Project</p></li><li class="lvl-3"><p>同3.2.2的步骤再来一遍</p></li></ol><h2 id="基于Maven开发JavaSE的项目">基于Maven开发JavaSE的项目</h2><ol><li class="lvl-3"><p>File—&gt;new—&gt;Project—&gt;Empty Project</p></li></ol><p>Location:D:\course\10-Maven\code<br>Name:mavenall<br>—&gt;Create</p><ol start="2"><li class="lvl-3"><p>ctrl+alt+shift+s:打开项目结构窗口</p></li></ol><p>Project:设置JDK版本为17</p><ol start="3"><li class="lvl-3"><p>Modules:</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>—&gt; New Module<br>Build system: Maven</p></li></ul><ol start="4"><li class="lvl-3"><p>Advanced Settings</p></li></ol><p>GroupId:com.bjpowernode<br>ArtifactId:maven_001_javase<br>—&gt;Create</p><ol start="5"><li class="lvl-3"><p>观察Sources和Dependcies选项的JDK版本，都为17</p></li></ol><p>—&gt;ok</p><ol start="6"><li class="lvl-3"><p>补齐目录</p></li></ol><p>在test目录上右键—&gt;new Directory—&gt;resouces</p><ol start="7"><li class="lvl-3"><p>修改pom.xml文件</p></li></ol><p>添加单元测试的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切记:点M刷新依赖</p><ol start="8"><li class="lvl-3"><p>开发Hello.java类</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="comment">//加法运算</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//乘法运算</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 * num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726102220-74404439-b124-4c22-a614-3e08384df78f.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=ua1f98768&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u442d91b7-a50a-42a0-af82-0dbe3c4ce55&amp;title=&amp;width=1400" alt="标头.jpg"></p><ol start="9"><li class="lvl-3"><p>开发测试类</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试功能由测试方法来实现</span></span><br><span class="line"><span class="comment">     * 测试方法的规范</span></span><br><span class="line"><span class="comment">     * 1)访问权限是public</span></span><br><span class="line"><span class="comment">     * 2)方法没有返回值void</span></span><br><span class="line"><span class="comment">     * 3)方法名称自 定义,推荐以test开头</span></span><br><span class="line"><span class="comment">     * 4)方法没有参数</span></span><br><span class="line"><span class="comment">     * 5)使用<span class="doctag">@Test</span>注解声明是测试方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Hello</span>  <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line">        System.out.println(hello.sum(<span class="number">3</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMul</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Hello</span>  <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line">        System.out.println(hello.mul(<span class="number">3</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726107279-60d6713a-a461-4025-b9b1-04a72190036f.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u41c094bf&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u185866da-0481-4da8-9c99-4da4a54fdb1&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="基于Maven开发JavaWeb的项目">基于Maven开发JavaWeb的项目</h2><ol><li class="lvl-3"><p>删除maven_001_javaSE.iml文件(如果此文件位于项目目录下，则必须删除，如果在本模块目录下，就不需要删除）</p></li><li class="lvl-3"><p>ctrl+alt+shift+s:打开结构窗口</p></li></ol><p>Modules选项上—&gt; + —&gt;new Module<br>Maven Archetype选项<br>Archetype: maven-archetype-webapp</p><ol start="3"><li class="lvl-3"><p>Advanced Settings 选项卡</p></li></ol><p>GroupId:com.bjpowernode<br>ArtifactId:maven_002_javaweb<br>Version:1.0.0<br>—&gt;Create</p><ol start="4"><li class="lvl-3"><p>观察Sources和Dependcies选项的JDK版本</p></li></ol><p>—&gt;ok</p><ol start="5"><li class="lvl-3"><p>修改目录</p></li></ol><p>补齐缺失的所有目录添加package: com.bjpowernode.controller</p><ol start="6"><li class="lvl-3"><p>修改pom.xml文件</p><ol><li class="lvl-6">删除远程访问的名称</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>maven_002_javaweb Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>添加依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加Servlet的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>删除项目构建名称</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven_002_javaweb<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切记: 点M刷新按钮</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726112623-681671e8-9d28-4ae9-9aa7-f8ce0b270af8.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u3963e5c6&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=uc391fe25-98e3-4e3f-a51b-0b2d9cdb6aa&amp;title=&amp;width=1400" alt="标头.jpg"></p><ol start="7"><li class="lvl-3"><p>修改web.xml文件</p></li></ol><p>ctrl+alt+shift+s:打开结构窗口点web —&gt; - —&gt;yes —&gt; Apply</p><ul class="lvl-0"><li class="lvl-2"><p>—&gt;web.xml —&gt;ok  —&gt;ok</p></li></ul><ol start="8"><li class="lvl-3"><p>修改jsp页面</p></li></ol><p>删除index.jsp页面在webapp目录下新建index.jsp和main.jsp<br>开发index.jsp页面   <a href="/demo">访问服务器</a></p><ol start="9"><li class="lvl-3"><p>开发Servlet</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(&quot;/demo&quot;)</span><br><span class="line">public class DemoServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        System.out.println(&quot;我来过.........&quot;);</span><br><span class="line">        //跳 回 main.jsp</span><br><span class="line">        request.getRequestDispatcher(&quot;/main.jsp&quot;).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="10"><li class="lvl-4"><p>添加tomcat测试运行</p></li></ol><p>部署长名称的项目.</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726121320-c56e386c-488e-4e37-ae72-288ed0258d93.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=uaaad8a0a&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u8f6a4067-e8a0-42a7-ae2e-f43b7a2e664&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="导入Maven的项目">导入Maven的项目</h2><ol><li class="lvl-3"><p>拷贝一个现有的Maven项目maven_002_javaweb,改名为 maven_002_javawebnew</p></li><li class="lvl-3"><p>进入到maven_002_javawebnew项目中删除target目录和.gitignore文件</p></li><li class="lvl-3"><p>打开pom.xml文件,更改artifactId的名称为maven_002_javawebnew.</p></li><li class="lvl-3"><p>ctrl+alt+shift+s:打开项目结构窗口</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>—&gt;Import Moudle —&gt;选中要导入的项目—&gt; ok<br>选中  Import module from external model<br>Maven<br>—&gt; Create —&gt; ok</p></li></ul><ol start="5"><li class="lvl-3"><p>部署运行测试功能</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726124964-767841b0-1ac0-4955-9722-617004229996.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u722d1aa4&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=uca756447-3a1e-42a5-8500-4cc1bf50037&amp;title=&amp;width=1400" alt="标头.jpg"></p><h1>Maven的依赖管理</h1><p>在JAVA开发中,项目的依赖管理是一项重要任务。通过合理管理项目的依赖关系，我们可以有效的管理第三方库，模块的引用及版本控制。而Maven作为一个强大的构建工具和依赖管理工具，为我们提供了便捷的方式来管理项目的依赖。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726129355-2eb182d3-0bdc-4cd9-ad1b-b534e96e5022.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u2cff6c70&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u4bf68fae-cbd6-489a-a6b1-3a123f335a6&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="什么是依赖范围">什么是依赖范围</h2><p>Maven的依赖构件包含一个依赖范围的属性。这个属性描述的是三套classpath的控制，即编译、测试、运行。这说白了就是添加的jar包起作用的范围。  maven提供了以下几种依赖范围:compile,test,provided.runtime,system。分别介绍如下：</p><ol><li class="lvl-3"><p>compile</p></li></ol><p>编译依赖范围，如果没有指定，默认使用该依赖范围，对于编译、测试、运行3种classpath都有效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>test</p></li></ol><p>测试依赖范围，使用此依赖范围的maven依赖，只对编译测试、运行测试的classpath有效，在编译主代码、运行项目时无法使用此类依赖。比如junit，它只有在编译测试代码及运行测试的时候才需要。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726133829-f8291418-2baf-4c7f-b428-7c959ca92071.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=uf28f7676&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u469e4180-56d2-4066-8e17-9ff918cee7d&amp;title=&amp;width=1400" alt="标头.jpg"></p><ol start="3"><li class="lvl-3"><p>provided</p></li></ol><p>已提供依赖范围。表示项目的运行环境中已经提供了所需要的构件，对于此依赖范围的maven依赖，对于编译源码、编译测试、运行测试中classpath有效，但在运行时无效。比如上面说到的servlet-api，这个在编译和测试的时候需要用到，但是在运行的时候，web容器已经提供了，就不需要maven帮忙引入了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>runtime</p></li></ol><p>运行时依赖范围，使用此依赖范围的maven依赖，对于测试和运行项目的classpath有效，但在编译时无效，比如jdbc驱动实现，项目代码编译的时候只需要提供JDK提供的JDBC接口，运行的时候才需要具体的jdbc驱动实现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>system</p></li></ol><p>系统依赖范围，该依赖与3中classpath的关系，和provided依赖范围完全一致。但是，使用system范围的依赖时必须通过systemPath元素显示第指定依赖文件的路径。这种依赖直接依赖于本地路径中的构件，可能每个开发者机器中构件的路径不一致，所以如果使用这种写法，你的机器中可能没有问题，别人的机器中就会有问题，所以建议谨慎使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_001_javase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>D:/repository/com/bjpowernode/maven_001_javase/1.0-SNAPSHOT/maven_001_javase-1.0-SNAPSHOT.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结如下图：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710426633024-11f9ac91-9875-43ef-959d-331e5205f7bf.png#averageHue=%23ddecc9&amp;clientId=uf8dfabdd-913b-4&amp;from=paste&amp;height=224&amp;id=uc599f887&amp;originHeight=336&amp;originWidth=1726&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=35504&amp;status=done&amp;style=none&amp;taskId=u3acd4bdd-6563-481a-9985-9f7bbcbc19b&amp;title=&amp;width=1150.6666666666667" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726140665-c4bb2880-440f-4c98-a159-ef6939d6adb9.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=ua561d6df&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ufd902493-4acf-46db-a638-4992de2f52b&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="什么是依赖传递">什么是依赖传递</h2><p>依赖具有传递性。 Maven 的依赖传递机制是指：不管 Maven 项目存在多少间接依赖，POM 中都只需要定义其直接依赖，不必定义任何间接依赖，这在一定程序上简化 了POM 的配置。假项目A依赖项目B，项目B依赖项目C，则A-----&gt;直接依赖B，B-----&gt;直接依赖C，A-----&gt;间接依赖C。直接依赖和间接依赖是一个相对的概念。直接在项目中配置的依赖称为直接依赖，通过添加依赖关联进来的依赖称为间接依赖。1是项目的直接依赖，2是1的直接依赖，2是项目的间接依赖，以此类推。如图</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710728233920-00b543b8-d8af-4ba6-b69d-6a4904f6ad27.png#averageHue=%23fcf8f2&amp;clientId=u79148803-46e9-4&amp;from=paste&amp;height=315&amp;id=u15a4cdb7&amp;originHeight=473&amp;originWidth=950&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=112470&amp;status=done&amp;style=none&amp;taskId=uc055825a-8f20-4bbf-880e-dbbb3cdc881&amp;title=&amp;width=633.3333333333334" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726147057-6968da41-3864-4b53-969e-c4ff3bc83af7.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u72dffbd4&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u55ff2c8b-4f65-4d92-9803-59362caf6ed&amp;title=&amp;width=1400" alt="标头.jpg"></p><h3 id="依赖范围对依赖传递的影响">依赖范围对依赖传递的影响</h3><p>B 是 A 的直接依赖，C 是 A 的间接依赖，根据 Maven 的依赖传递机制，间接依赖 C 会以传递性依赖的形式引入到 A 中，但这种引入并不是无条件的，它会受到依赖范围的影响。图示依赖传递关系:<br><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/21376908/1711074416600-67aa7a6a-5c6f-42f7-bed1-4a40f9a49bf7.jpeg" alt=""><br>规范化依赖传递的结果:<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1711068902261-aac2a782-7ab4-4d0e-ac07-1e41d858df20.png#averageHue=%23d2e8c3&amp;clientId=ub3ead04e-97ce-4&amp;from=paste&amp;height=289&amp;id=uba9b2c63&amp;originHeight=289&amp;originWidth=1113&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=160801&amp;status=done&amp;style=none&amp;taskId=u95686958-734a-4c4b-9f8b-84017faee34&amp;title=&amp;width=1113" alt="image.png"><br>交叉部分的单元格的取值为传递性依赖的依赖范围，若交叉单元格取值为 “-”，则表示该传递性依赖不能被传递。通过上表，可以总结出以下规律：</p><ol><li class="lvl-3"><p>当间接依赖的范围是 compile 时，与直接依赖的范围一致；</p></li><li class="lvl-3"><p>当间接依赖的范围是 test 或 provided时，传递性依赖不会被传递；</p></li><li class="lvl-3"><p>当间接依赖的范围是 runtime 时，传递性依赖的范围与直接依赖的范围一致，但 compile 例外，此时传递性依赖的范围为 runtime。</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726151630-053457ca-97b1-49c6-95cd-e0178889b19f.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u0f9ee06e&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ucf0d16ad-dd7c-44f4-9204-2a19bbe9f20&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="依赖冲突">依赖冲突</h2><h3 id="什么是依赖冲突">什么是依赖冲突</h3><p>在 Maven 项目中，依赖通常被定义在项目的 pom.xml 文件中。当多个依赖项引入了不同版本的相同库时，就会发生依赖冲突。这可能是因为项目的直接依赖和间接依赖导致了同一库的多个版本存在于类路径中。每个显式声明的类包都会依赖于一些其它的隐式类包，这些隐式的类包会被maven间接引入进来，从而造成类包冲突。</p><h3 id="依赖冲突的解决方案">依赖冲突的解决方案</h3><p>Maven可以通过以下途径解决依赖冲突。</p><h4 id="版本锁定">版本锁定</h4><p>在父工程中使用dependencyManagement 进行版本锁定，dependencyManagement可以统一管理整个项目的版本号，确保应用的各个项目的依赖和版本一致。 dependencyManagement只是声明依赖，并不自动实现引入，因此子项目需要显示的声明需要用的依赖，便可以忽略版本号。如果排斥父工程中定义的版本号，可以显示的进行版本号声明。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726158298-928235af-31a2-4ea2-ac4a-ff316086c546.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u78d01a34&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u28434974-1ff0-40b3-9436-ef85b9d3aad&amp;title=&amp;width=1400" alt="标头.jpg"></p><ol><li class="lvl-3"><p>子工程使用父工程锁定的版本号</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710472491980-a4cb3914-0f05-4e7e-947f-a4d23cf4132a.png#averageHue=%236d6b45&amp;clientId=uf8dfabdd-913b-4&amp;from=paste&amp;height=510&amp;id=u586a6155&amp;originHeight=765&amp;originWidth=1801&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=216895&amp;status=done&amp;style=none&amp;taskId=u4e0260b6-6f2f-43fd-8b9e-7a4668c7155&amp;title=&amp;width=1200.6666666666667" alt="image.png"></p><ol start="2"><li class="lvl-3"><p>子工程使用自定义的版本号，只要重新声明即可</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710472812417-b7aaabf0-6aed-422b-8af0-c34f9cc6eeaf.png#averageHue=%23616641&amp;clientId=uf8dfabdd-913b-4&amp;from=paste&amp;height=484&amp;id=u4cd8bbd0&amp;originHeight=726&amp;originWidth=1797&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=216624&amp;status=done&amp;style=none&amp;taskId=ub65a5674-fdf4-4a39-85a1-0cb762f6a74&amp;title=&amp;width=1198" alt="image.png"></p><ol start="3"><li class="lvl-3"><p>父工程不使用<dependencyManagement>标签，则子工程跟父工程完全保持一致。子工程不需要显示依赖任何jar包。</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710477128261-8cf15234-7b59-49ce-8b7b-ad886d26c96f.png#averageHue=%23595a40&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=567&amp;id=u21f3da53&amp;originHeight=851&amp;originWidth=1793&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=221919&amp;status=done&amp;style=none&amp;taskId=u36730a68-5767-49e4-a519-8e06e99f79f&amp;title=&amp;width=1195.3333333333333" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726162625-cc6a0908-4861-4713-9581-6704bc557c5e.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=ude1c4ae3&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ub9907bfa-c6ae-4c92-bdbd-a3945acb523&amp;title=&amp;width=1400" alt="标头.jpg"></p><h4 id="短路径优先">短路径优先</h4><p>引入路径短者优先，顾名思义，当一个间接依赖存在多条引入路径时，引入路径短的会被解析使用。如图<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710728799160-11ddc3d2-3034-4017-b98e-2413564afc3e.png#averageHue=%23fbfbf7&amp;clientId=u79148803-46e9-4&amp;from=paste&amp;height=269&amp;id=uf0e22108&amp;originHeight=404&amp;originWidth=1092&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=50378&amp;status=done&amp;style=none&amp;taskId=udc01de3c-4476-4c5c-a9b1-eb7f676fedf&amp;title=&amp;width=728" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710479263151-463ae45f-d9d0-4dd9-a628-8876b5c9283a.png#averageHue=%236d845e&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=553&amp;id=u4571d8e5&amp;originHeight=830&amp;originWidth=1787&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=158021&amp;status=done&amp;style=none&amp;taskId=u18285b54-012e-49f6-8c48-10b933f1798&amp;title=&amp;width=1191.3333333333333" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726166796-cbdbfffe-56af-432b-8606-fd9951d18b78.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u24b0acca&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u404a1aa2-a2e0-4c4b-8601-491ad00934d&amp;title=&amp;width=1400" alt="标头.jpg"></p><h4 id="声明优先">声明优先</h4><p>如果存在短路径，则优先选择短路径，如果路径相同的情况下，先声明者优先，POM 文件中依赖声明的顺序决定了间接依赖会不会被解析使用，顺序靠前的优先使用。如图。<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710729281326-826998e7-b535-41de-855e-8a1e8c9f30ed.png#averageHue=%23fbfbf9&amp;clientId=u79148803-46e9-4&amp;from=paste&amp;height=307&amp;id=ua5ddbbb3&amp;originHeight=460&amp;originWidth=1079&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=53195&amp;status=done&amp;style=none&amp;taskId=u8c48804b-461e-43ad-ba01-a8a2d45b880&amp;title=&amp;width=719.3333333333334" alt="image.png"><br>代码示例：<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710482843035-b311f9f4-b84f-4bed-b1c3-1b32e5f60284.png#averageHue=%2364885f&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=548&amp;id=u1adb2ae8&amp;originHeight=897&amp;originWidth=1853&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=222712&amp;status=done&amp;style=none&amp;taskId=u0bd7bc44-2cd5-464a-95f9-8d5ebb3c773&amp;title=&amp;width=1131.328125" alt="image.png"><br>注意去掉<scope>标签，否则会因为依赖范围的影响导致效果无法显示。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726170611-4e7a6e5b-8bc3-4b31-b0dc-58bed442b923.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=ubdb0940b&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u515b9713-2f1a-4556-bcc8-a844681966a&amp;title=&amp;width=1400" alt="标头.jpg"></p><h4 id="特殊优先（后来者居上）">特殊优先（后来者居上）</h4><p>同一个pom.xml文件中进行了多次依赖jar包不同版本的配置，后面的覆盖前面的配置。这种情况比较少见。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710483308764-afdb1d47-5ec9-441b-8415-8fe486434e56.png#averageHue=%2367815c&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=529&amp;id=ud67ea724&amp;originHeight=794&amp;originWidth=1822&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=184278&amp;status=done&amp;style=none&amp;taskId=u385f954c-9b5d-4e4b-99bf-fb70e24b5d2&amp;title=&amp;width=1214.6666666666667" alt="image.png"></p><h4 id="可选依赖">可选依赖</h4><p>maven_03项目可选择是否传递间接依赖junit_4.13，主动权在当前项目maven_03中。如果当前项目被依赖到其它项目中，当前项目可以拒绝交出间接依赖项。例如maven_02添加了maven_03的依赖，maven_03可以自主设置其依赖项junit_4.13是否被间接传递。<optional>true</optional> 为不传递间接依赖，那么在maven_02项目中就没有junit_4.13的依赖。默认是false，是传递间接依赖。<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710730202393-a9a5d910-a341-4f7a-8156-04ed947a1561.png#averageHue=%23f9f3e1&amp;clientId=u79148803-46e9-4&amp;from=paste&amp;height=439&amp;id=u8518855a&amp;originHeight=659&amp;originWidth=1074&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=59524&amp;status=done&amp;style=none&amp;taskId=u24b7beaa-124e-415c-b1b3-dc0692b25cd&amp;title=&amp;width=716" alt="image.png"><br>代码示例：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710490003130-4d3bf144-25b8-43af-afe1-ce94b0a8fede.png#averageHue=%234a574b&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=573&amp;id=Uba5X&amp;originHeight=860&amp;originWidth=1853&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=209465&amp;status=done&amp;style=none&amp;taskId=ue9a55df1-cbb4-4e78-a23e-509e29919a3&amp;title=&amp;width=1235.3333333333333" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726175065-90318db8-ee20-4a23-8c0e-3bd0b1687bd6.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u4b6a0752&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ua178c5c5-d002-4543-84b4-1747244f84b&amp;title=&amp;width=1400" alt="标头.jpg"></p><h4 id="排除依赖">排除依赖</h4><p>是当前项目是否主动断开其依赖项目的间接依赖。也就是控制当前项目是否使用其直接依赖传递下来的接间依赖。在maven_02项目中添加maven_03项目的依赖，但不要maven_03项目中的junit_4.13的依赖，可以选择排除依赖。这样可以保证当前项目依赖的纯净性。排除依赖使用 exclusions 元素排除依赖，说明如下：</p><ol><li class="lvl-3"><p>exclusions 元素下可以包含若干个 exclusion 子元素，用于排除若干个间接依赖，该元素包含两个子元素：groupId 和 artifactId，用来确定需要排除的间接依赖的坐标信息</p></li><li class="lvl-3"><p>exclusion 元素中只需要设置 groupId 和 artifactId 就可以确定需要排除的依赖，无需指定版本version</p><p>如图<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710730881718-cb19d958-ec83-4438-9103-7ed17ce68fc3.png#averageHue=%23e5f3cc&amp;clientId=u79148803-46e9-4&amp;from=paste&amp;height=448&amp;id=u4b90e72e&amp;originHeight=672&amp;originWidth=1102&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=65464&amp;status=done&amp;style=none&amp;taskId=ua8e89451-26d7-47b2-a086-7fbe89388a3&amp;title=&amp;width=734.6666666666666" alt="image.png"></p></li></ol><p>代码示例：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710493895419-a8364fcc-5682-419d-b289-7af55e21ea03.png#averageHue=%233d4244&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=581&amp;id=ub2b2b8f3&amp;originHeight=872&amp;originWidth=1849&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=199769&amp;status=done&amp;style=none&amp;taskId=uc3b718ce-4441-401c-b604-99209dd2634&amp;title=&amp;width=1232.6666666666667" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726179002-ed63d6ee-ea8e-4581-bb30-c9fb2f24870f.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u056791c2&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u7c5fbb64-06c9-438f-bf26-4e3a667ca46&amp;title=&amp;width=1400" alt="标头.jpg"></p><h4 id="可选依赖和排除依赖的区别">可选依赖和排除依赖的区别</h4><p>排除依赖和可选依赖都能在项目中将间接依赖排除在外，但两者实现机制却完全不一样。</p><ol><li class="lvl-3"><p>可选依赖是自己决定是否向外提供间接依赖（maven_03设置拒绝提供间接依赖junit）</p></li><li class="lvl-3"><p>排除依赖是主动拒绝添加直接依赖关联的间接依赖（maven_02项目设置排除maven_03的junit依赖）</p></li><li class="lvl-3"><p>可选依赖的优先级高于排除依赖</p></li><li class="lvl-3"><p>若对于同一个间接依赖同时使用排除依赖和可选依赖进行设置，那么可选依赖的取值必须为 false，否则排除依赖无法生效。</p></li></ol><p>如果用一个生活中的例子可能更易懂一些。国民党（maven_02)抓住了共产党人（依赖了maven_03）,要求供出联系人名单（maven_03中依赖的junit_4.13)，最终结果是没有得到联系人名单（不依赖jjunit_4.13)。可选依赖：是maven_03共产党人死活不说联系人的名单junit_4.13（可选，我选择不说）。排除依赖：是maven_02国民党不要共产党人提供的联系人名单（排除，我就是不要你的名单,  估计你是乱说的）。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726184332-9f8950f4-bc9b-44ce-88ac-20ecadfb499c.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=ube884ce6&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=uc70cf3fa-5ebb-4fc8-9cc7-5626aa98bee&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="刷新依赖的8种方式">刷新依赖的8种方式</h2><p>在idea中有时候会出现刷新延时的情况，那么需要进行手工刷新依赖。</p><ol><li class="lvl-3"><p>点击M刷新按钮。</p></li><li class="lvl-3"><p>点Maven窗口的Reload All Maven Projects。</p></li><li class="lvl-3"><p>Build—&gt;ReBuild Project 重新构建项目的同时刷新所有依赖。</p></li><li class="lvl-3"><p>点击本项目的pom.xml文件—&gt;右键—&gt;Maven—&gt;Reload Project 刷新本项目的依赖。</p></li><li class="lvl-3"><p>打开pom.xml文件,全选,拷贝,删除,关闭,打开,粘贴.物理刷新pom.xml文件 。</p></li><li class="lvl-3"><p>Invalidate Caches—&gt;全选—&gt;Invalidate and Restart 清空idea的缓存并重启idea刷新依赖。</p></li><li class="lvl-3"><p>打开本地仓库，搜索last，全选删除,点Maven的刷新全部依赖的按钮。</p></li><li class="lvl-3"><p>在7的步骤后执行File—&gt;settings—&gt;Build,Execution,Deployment—&gt;Build Tools—&gt;Maven—&gt;Repositories—&gt;选中本地仓库—&gt;update—&gt;ok。</p></li></ol><h2 id="资源文件的指定">资源文件的指定</h2><p>src/main/java 和 src/test/java 这两个目录中的所有 <em>.java 文件会分别在 comile 和 test-comiple 阶段被编译，编译结果分别放到了 target/classes 和 targe/test-classes 目录中，但是这两个目录中的其他文件(后缀是.properties或.xml等文件)都会被忽略掉(编译后丢失)，如果需要把 src 目录下的除.java之外的文件包放到 target/classes 目录，作为输出的 jar 一部分。需要指定资源文件位置。以下内容放到&lt;build&gt;标签中。简单来说就是在resources目录下的</em>.properties文件和 <em>.xml文件编译时不丢失,但resources目录外的</em>.properties文件和*.xml文件会丢失,所以要指定位置,保证编译后文件都在.<br>代码示例:<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710992850165-0a554516-fc4f-4904-90bb-1111061d530a.png#averageHue=%237b977c&amp;clientId=uf81e72cb-f421-4&amp;from=paste&amp;height=671&amp;id=u9b00b7e9&amp;originHeight=671&amp;originWidth=1673&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=128778&amp;status=done&amp;style=none&amp;taskId=u58c5828a-46a0-4fc9-b7ac-dcb79e1f0ed&amp;title=&amp;width=1673" alt="image.png"><br>添加指定后:<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710993017431-84d8491f-5bdd-4f9f-892c-3fba02c8dfc8.png#averageHue=%23bbc334&amp;clientId=uf81e72cb-f421-4&amp;from=paste&amp;height=903&amp;id=u3fd4eaa3&amp;originHeight=903&amp;originWidth=1506&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=177535&amp;status=done&amp;style=none&amp;taskId=u40c894b5-a939-4007-b720-a51cab27fca&amp;title=&amp;width=1506" alt="image.png"><br>指定代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定java目录下的所有路径下的所有文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定resources目录下的所有路径下的所有文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般情况下,会两个目录都指定.</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726188659-5dd227f8-a6ca-4ccd-8c0e-a1667ee26861.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u9c35523c&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=udd0a371e-ea3e-4b89-a688-36b9435bc5b&amp;title=&amp;width=1400" alt="标头.jpg"></p><h1>Maven的继承和聚合</h1><h2 id="什么是继承">什么是继承</h2><p>Maven 的依赖传递机制可以一定程度上简化 POM 的配置，但这仅限于存在依赖关系的项目或模块中。当一个项目的多个模块都依赖于相同 jar 包的相同版本，且这些模块之间不存在依赖关系，这就导致同一个依赖需要在多个模块中重复声明，这显然是不可取的，大量的前人经验告诉我们，<strong>重复往往意味着更多的劳动和更高的潜在风险</strong>。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/21376908/1711167422290-65970d94-bdc7-4f20-a0d9-288fd247daa9.jpeg" alt=""></p><p>在 Java 面向对象中，我们可以建立一种类的父子结构，然后在父类中声明一些字段和方法供子类继承，这样就可以一定程度上消除重复，做到 “一处声明，多处使用”。在 Maven 的世界中，也有类似的机制，它就是 POM 继承。</p><p>Maven 在设计时，借鉴了 Java 面向对象中的继承思想，提出了 POM 继承思想。当一个项目包含多个模块时，可以在该项目中再创建一个父模块，并在其 POM 中声明依赖，其他模块的 POM 可通过继承父模块的 POM 来获得对相关依赖的声明。对于父模块而言，其目的是为了消除子模块 POM 中的重复配置，其中不包含有任何实际代码，因此父模块 POM 的打包类型（packaging）必须是 pom。如图所示:<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1711168327611-f6e0f1ca-02ff-47d3-a093-7e9863e3d716.png#averageHue=%23f2ead9&amp;clientId=u9a461781-37a9-4&amp;from=paste&amp;height=630&amp;id=uf5bcaaf1&amp;originHeight=630&amp;originWidth=1195&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=88175&amp;status=done&amp;style=none&amp;taskId=u49cd9269-d205-407a-b028-1cdebbded86&amp;title=&amp;width=1195" alt="image.png"><br>子工程可以继承的父工程的元素：</p><table><thead><tr><th><strong>元素</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>groupId</td><td>项目组 ID，项目坐标的核心元素</td></tr><tr><td>version</td><td>项目版本，项目坐标的核心元素</td></tr><tr><td>description</td><td>项目的描述信息</td></tr><tr><td>organization</td><td>项目的组织信息</td></tr><tr><td>inceptionYear</td><td>项目的创始年份</td></tr><tr><td>url</td><td>项目的 URL 地址</td></tr><tr><td>developers</td><td>项目的开发者信息</td></tr><tr><td>contributors</td><td>项目的贡献者信息</td></tr><tr><td>distributionManagement</td><td>项目的部署配置</td></tr><tr><td>issueManagement</td><td>项目的缺陷跟踪系统信息</td></tr><tr><td>ciManagement</td><td>项目的持续集成系统信息</td></tr><tr><td>scm</td><td>项目的版本控制系统信息</td></tr><tr><td>mailingLists</td><td>项目的邮件列表信息</td></tr><tr><td>properties</td><td>自定义的 Maven 属性</td></tr><tr><td>dependencies</td><td>项目的依赖配置</td></tr><tr><td>dependencyManagement</td><td>项目的依赖管理配置</td></tr><tr><td>repositories</td><td>项目的仓库配置</td></tr><tr><td>build</td><td>包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等</td></tr><tr><td>reporting</td><td>包括项目的报告输出目录配置、报告插件配置等</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726198954-0e269d8f-bf17-442e-ac26-a46978dd2cd6.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u59ba7ddc&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ucc198690-89ff-44d0-a646-f809e0d218b&amp;title=&amp;width=1400" alt="标头.jpg"></p><p>父工程示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打包方式必须是pom,声明是父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--聚合子模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven_son<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven_web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--定义属性，便于版本的管理--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">servlet-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--只是定义，并没有真正的添加依赖，子工程根据需要有选择的添加依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--引用定义好的属性--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--只定义Tomcat插件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>8089<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726203316-d075d1bc-5cd5-4b43-8e61-1e270be1e2fa.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=ubaf501fe&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u5b508af7-ce6c-4e1b-85bf-b834c3ff72c&amp;title=&amp;width=1400" alt="标头.jpg"></p><p>子工程示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可以省略groupId和version，因为与父工程保持一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--需要什么依赖，添加什么依赖，可以省略版本号，版本由父工程统一管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置Tomcat插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--子工程可以自定义端口号，不自定义使用父工程的--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8060<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：一句话，通过继承可以实现子工程沿用父工程的配置。大大减少重复设置。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726207891-29d97bae-1ef4-4be3-8399-9b2090620793.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u17c0f677&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ud7864f26-1acc-4112-8538-90131d40b3a&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="什么是聚合">什么是聚合</h2><p>使用 Maven 聚合功能对项目进行构建时，需要在该项目中额外创建一个的聚合模块，然后通过这个模块构建整个项目的所有模块。聚合模块仅仅是帮助聚合其他模块的工具，其本身并无任何实质内容，因此聚合模块中只有一个 POM 文件，不包含 src 等目录。</p><p>与父模块相似，聚合模块的打包方式（packaging）也是 pom，用户可以在其 POM 中通过 modules 下的 module 子元素来添加需要聚合的模块的目录路径。父模块的 pom.xml 文件的 <modules> 把子模块聚集起来.</p><p>项目结构：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710519085353-11678e58-1ffe-44da-9273-3cc1155c6641.png#averageHue=%23738b62&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=507&amp;id=u20dbc733&amp;originHeight=760&amp;originWidth=1830&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=210256&amp;status=done&amp;style=none&amp;taskId=u885d2d10-90be-4ff1-83d2-afbc1d60e7b&amp;title=&amp;width=1220" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726300911-fadafc2a-8ddd-49e8-9b4d-1af6a3e3a148.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u16e988df&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ud9aa734f-76c2-4f19-ace4-a07fa3514a1&amp;title=&amp;width=1400" alt="标头.jpg"></p><p>代码示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_ju<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_02<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_03<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_parent<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码结构：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710519366819-5cd7d949-baf7-43bb-b7ae-e1c8384d1e58.png#averageHue=%234a6248&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=530&amp;id=u7fcceff2&amp;originHeight=795&amp;originWidth=1772&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=199207&amp;status=done&amp;style=none&amp;taskId=u4baccee2-a70a-4726-9a28-b7362766cc1&amp;title=&amp;width=1181.3333333333333" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726305308-feae7c1d-f4ff-415d-a098-109efc582f0a.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=uf8322a45&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u42bf2301-3820-45e7-9b83-322fdc848bc&amp;title=&amp;width=1400" alt="标头.jpg"></p><p>运行结果示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Reactor Build Order:</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] maven_03                                                           [jar]</span><br><span class="line">[INFO] maven_02                                                           [jar]</span><br><span class="line">[INFO] maven_01                                                           [jar]</span><br><span class="line">[INFO] maven_parent                                                       [pom]</span><br><span class="line">[INFO] maven_son                                                          [jar]</span><br><span class="line">[INFO] maven_web                                                          [war]</span><br><span class="line">[INFO] maven_ju                                                           [pom]</span><br><span class="line">[INFO] </span><br><span class="line">......</span><br><span class="line">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ maven_03 ---</span><br><span class="line">[INFO] Surefire report directory: E:\BJ2310\10-Maven\04_project\mavenall\maven_03\target\surefire-reports</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running test.MyTest</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.068 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ maven_03 ---</span><br><span class="line">[INFO] Building jar: E:\BJ2310\10-Maven\04_project\mavenall\maven_03\target\maven_03-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ----------------------&lt; com.bjpowernode:maven_02 &gt;----------------------</span><br><span class="line">[INFO] Building maven_02 1.0-SNAPSHOT                                     [2/7]</span><br><span class="line">[INFO]   from ..\maven_02\pom.xml</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maven_02 ---</span><br><span class="line">......</span><br><span class="line">Running test.MyTest</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.055 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ maven_02 ---</span><br><span class="line">[INFO] Building jar: E:\BJ2310\10-Maven\04_project\mavenall\maven_02\target\maven_02-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ----------------------&lt; com.bjpowernode:maven_01 &gt;----------------------</span><br><span class="line">[INFO] Building maven_01 1.0-SNAPSHOT                                     [3/7]</span><br><span class="line">[INFO]   from ..\maven_01\pom.xml</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maven_01 ---</span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class="line">[INFO] Copying 0 resource</span><br><span class="line">[INFO] </span><br><span class="line">.......</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ maven_01 ---</span><br><span class="line">[INFO] No tests to run.</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ maven_01 ---</span><br><span class="line">[INFO] Building jar: E:\BJ2310\10-Maven\04_project\mavenall\maven_01\target\maven_01-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --------------------&lt; com.bjpowernode:maven_parent &gt;--------------------</span><br><span class="line">[INFO] Building maven_parent 1.0-SNAPSHOT                                 [4/7]</span><br><span class="line">[INFO]   from ..\maven_parent\pom.xml</span><br><span class="line">[INFO] --------------------------------[ pom ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ---------------------&lt; com.bjpowernode:maven_son &gt;----------------------</span><br><span class="line">[INFO] Building maven_son 1.0-SNAPSHOT                                    [5/7]</span><br><span class="line">[INFO]   from ..\maven_parent\maven_son\pom.xml</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">......</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ maven_son ---</span><br><span class="line">[INFO] Building jar: E:\BJ2310\10-Maven\04_project\mavenall\maven_parent\maven_son\target\maven_son-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ---------------------&lt; com.bjpowernode:maven_web &gt;----------------------</span><br><span class="line">[INFO] Building maven_web 1.0-SNAPSHOT                                    [6/7]</span><br><span class="line">[INFO]   from ..\maven_parent\maven_web\pom.xml</span><br><span class="line">[INFO] --------------------------------[ war ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">.......</span><br><span class="line">[INFO] ----------------------&lt; com.bjpowernode:maven_ju &gt;----------------------</span><br><span class="line">[INFO] Building maven_ju 1.0-SNAPSHOT                                     [7/7]</span><br><span class="line">[INFO]   from pom.xml</span><br><span class="line">[INFO] --------------------------------[ pom ]---------------------------------</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Reactor Summary for maven_ju 1.0-SNAPSHOT:</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] maven_03 ........................................... SUCCESS [  2.506 s]</span><br><span class="line">[INFO] maven_02 ........................................... SUCCESS [  0.609 s]</span><br><span class="line">[INFO] maven_01 ........................................... SUCCESS [  0.083 s]</span><br><span class="line">[INFO] maven_parent ....................................... SUCCESS [  0.000 s]</span><br><span class="line">[INFO] maven_son .......................................... SUCCESS [  0.127 s]</span><br><span class="line">[INFO] maven_web .......................................... SUCCESS [  1.043 s]</span><br><span class="line">[INFO] maven_ju ........................................... SUCCESS [  0.002 s]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  4.543 s</span><br><span class="line">[INFO] Finished at: 2024-03-16T00:07:25+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>总结：一句话，聚合就是集中构建项目的。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726311129-d4bf577a-8ef1-4d1b-aba3-fcc863f41d83.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u89771d13&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u2d924de1-7a53-402e-8c4e-b3da7007ad9&amp;title=&amp;width=1400" alt="标头.jpg"></p><h1>Maven的私服</h1><h2 id="什么是私服">什么是私服</h2><p>Maven 私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的远程仓库（中央仓库、其他远程公共仓库）。一些无法从外部仓库下载到的构件，也能从本地上传到私服供其他人使用。</p><p>Maven 私服其实并不是 Maven 的核心概念，它仅仅是一种衍生出来的特殊的仓库，但这并不代表它不重要，相反由于私服具有降低中央仓库负荷、节省外网带宽、以及提高项目稳定性等优点，使得私服在实际开发过程中得到了相当普遍地使用。建立了 Maven 私服后，当局域网内的用户需要某个构件时，会先请求本地仓库，若本地仓库不存在所需构件，则请求 Maven 私服，将所需构件下载到本地仓库，若私服中不存在所需构件，再去请求外部的远程仓库，将所需构件下载并缓存到 Maven 私服，若外部远程仓库不存在所需构件，则 Maven 直接报错。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726314952-864958e4-f13f-4aa4-b775-de041d0cc3f2.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u2a91ba7c&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=ucbd4bbc3-d494-4e7d-a5bc-0f8a4596121&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="Maven仓库管理器Nexus">Maven仓库管理器Nexus</h2><h3 id="什么是Nexus">什么是Nexus</h3><p>Nexus 是 Sonatype 公司发布的一款仓库（Repository）管理软件，常用来搭建 Maven 私服，所以也有人将 Nexus 称为“Maven仓库管理器”。 Sonatype Nexus 是当前最流行，使用最广泛的 Maven 仓库管理器。Nexus 分为开源版和专业版，其中开源版足以满足大部分 Maven 用户的需求。</p><h3 id="Nexus仓库的类型">Nexus仓库的类型</h3><p>Nexus默认内置了很多仓库，这些仓库可以划分为3种类型，每种类型的仓库用于存放特定的jar包，具体说明如下：</p><ol><li class="lvl-3"><p>hosted：宿主仓库，部署自己的jar包到这个类型的仓库中，包括Releases和Snapshots两部分，Releases为公司内部发行版本仓库，Snapshots为公司内部测试版本仓库。</p></li><li class="lvl-3"><p>proxy：  代理仓库，用于代理远程的公共仓库，如Maven中央仓库，用户连接私服，私服自动去中央仓库下载Jar包或者插件。</p></li><li class="lvl-3"><p>group：仓库组，用来合并多个hosted/proxy仓库，通常用于配置自己的Maven连接仓库组。当我们下载jar包时，从仓库组中的每个仓库找一遍，找到后下载。</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710725573245-a25c98e8-302b-4461-95cc-aacd2e49191a.png#averageHue=%23eeebd5&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=480&amp;id=ub9859d8b&amp;originHeight=480&amp;originWidth=683&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44407&amp;status=done&amp;style=shadow&amp;taskId=u7906d8c9-de81-4042-b9bc-0dc267363e1&amp;title=&amp;width=683" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710586648632-8430fc88-b320-4e83-a6ee-1167d069029b.png?x-oss-process=image%2Fformat%2Cwebp%2Fresize%2Cw_1240%2Climit_0#averageHue=%23dad6d6&amp;from=url&amp;height=294&amp;id=wF09Z&amp;originHeight=474&amp;originWidth=1240&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=770" alt="">​</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726317988-f62a1be7-7eb0-4201-8e72-5d39f9848a32.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=uf12eee2e&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u92fab0f8-57e3-4886-ab2d-7e83a66e4af&amp;title=&amp;width=1400" alt="标头.jpg"></p><h3 id="如何搭建私服">如何搭建私服</h3><ol><li class="lvl-3"><p>下载Nexus</p></li></ol><p>官网地址：<a href="https://help.sonatype.com/repomanager3/download">https://help.sonatype.com/repomanager3/download</a><br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710570372422-d6d1a018-13fd-4cb2-be32-2fa1cde58784.png#averageHue=%23f8f8e3&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=463&amp;id=u9aa5a333&amp;originHeight=695&amp;originWidth=1886&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=165154&amp;status=done&amp;style=none&amp;taskId=udc3599b3-61c7-48f7-bf88-9e98e0411b6&amp;title=&amp;width=1257.3333333333333" alt="image.png"></p><ol start="2"><li class="lvl-3"><p>安装Nexus</p></li></ol><p>下载后解压到一个没有中文的路径下：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710577090494-cce93c84-89cb-4b7d-8b53-18fadcf1e9c7.png#averageHue=%23fbfbfa&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=177&amp;id=u22e4d8df&amp;originHeight=265&amp;originWidth=1309&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=30272&amp;status=done&amp;style=shadow&amp;taskId=u4b362181-830b-4f70-80e3-124b47d61e3&amp;title=&amp;width=872.6666666666666" alt="image.png"></p><p>进入到D:\nexus-3.66.0-02\bin目录下：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710575432440-e583f4cd-0a9c-4788-9d64-9deb1f53484d.png#averageHue=%23fbfbfa&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=221&amp;id=u0714eefb&amp;originHeight=332&amp;originWidth=1316&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=33549&amp;status=done&amp;style=none&amp;taskId=u80e78590-a350-48cf-9a9a-88101a8f328&amp;title=&amp;width=877.3333333333334" alt="image.png"></p><p>双击nexus.exe没有反应，需要以管理员身份打开cmd窗口，输入命令： nexus   /run    回车，需要等待一段时间，直到出现Started Sonatype Nexus OSS 3.66.0-02说明安装成功。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710577414248-c6b97c6a-2997-453b-8020-4a1d05259d79.png#averageHue=%23292624&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=506&amp;id=u5ac3b6a8&amp;originHeight=759&amp;originWidth=1463&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=142584&amp;status=done&amp;style=none&amp;taskId=u28f905c2-51a4-4d49-832f-b974d857378&amp;title=&amp;width=975.3333333333334" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726323394-fc7658e0-bb1a-416e-8999-1d7812f37357.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u2596afa4&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u2da06b9f-0b41-4c80-be32-74d4d13e91c&amp;title=&amp;width=1400" alt="标头.jpg"></p><ol start="3"><li class="lvl-3"><p>访问Nexus</p></li></ol><p>访问地址：<a href="http://localhost:8081">http://localhost:8081</a><br>端口号可以改变，在D:\nexus-3.66.0-02\etc目录下的nexus-default.properties文件中进行修改。<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710577791900-90da1d1f-9a7f-4af2-800c-f4a0f1d8e868.png#averageHue=%23f6f4f4&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=573&amp;id=u977664c0&amp;originHeight=860&amp;originWidth=1574&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=204222&amp;status=done&amp;style=none&amp;taskId=u90489ce0-5b47-4cc5-a812-de39d017f0f&amp;title=&amp;width=1049.3333333333333" alt="image.png"><br>注意：如果浏览器访问一直转圈打不开页面，则在cmd窗口ctrl+c唤醒一下就可以打开了。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726326509-afe309c6-5d25-49ca-b7a5-017c7e5d7d1d.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=uddb223cb&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u60fb9eca-3fe2-4788-b336-bde7a03fdda&amp;title=&amp;width=1400" alt="标头.jpg"></p><h2 id="Nexus私服的应用">Nexus私服的应用</h2><h3 id="登录">登录</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710578382883-2473002b-8a8c-49aa-9ff6-8f2f43b4368c.png#averageHue=%23ccaf85&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=359&amp;id=ubd976bfc&amp;originHeight=538&amp;originWidth=1864&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=87721&amp;status=done&amp;style=none&amp;taskId=ue5fc4f41-9538-4d10-9f66-6f43d980f5c&amp;title=&amp;width=1242.6666666666667" alt="image.png"><br>密码所在的文件：<br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710578676893-c70852d1-a697-4173-91cd-0d54965ef7cd.png#averageHue=%23f5f3f2&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=513&amp;id=ubb0fbe29&amp;originHeight=770&amp;originWidth=1320&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=114192&amp;status=done&amp;style=none&amp;taskId=u207f8331-ad1b-4b0c-b2df-8895e61ad46&amp;title=&amp;width=880" alt="image.png"><br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710578745174-adf07074-2ee6-4ccc-adfd-e1cbe23234b5.png#averageHue=%23b29a75&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=477&amp;id=u1b3efa36&amp;originHeight=716&amp;originWidth=1848&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=102068&amp;status=done&amp;style=none&amp;taskId=u47d2efbf-e5d1-49b3-9cab-0227dd07dde&amp;title=&amp;width=1232" alt="image.png"><br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710578912244-f8fdbcb4-0064-4628-b06a-5b39548c7d7e.png#averageHue=%23b8b7b7&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=505&amp;id=u4fb49c57&amp;originHeight=758&amp;originWidth=1783&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=93505&amp;status=done&amp;style=none&amp;taskId=u04851639-4937-40ff-a649-08ceb0d2b10&amp;title=&amp;width=1188.6666666666667" alt="image.png"><br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710579554576-5fc530bd-605c-4a1d-92d4-e3292de9b05a.png#averageHue=%23c3c49c&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=475&amp;id=ucce9bfce&amp;originHeight=713&amp;originWidth=1911&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=94018&amp;status=done&amp;style=none&amp;taskId=u3e4945ee-89d2-4186-9e7f-ff9f84f623e&amp;title=&amp;width=1274" alt="image.png"><br>点Browse观察<br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710586648632-8430fc88-b320-4e83-a6ee-1167d069029b.png#averageHue=%23dad6d6&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=474&amp;id=uf1a90efe&amp;originHeight=711&amp;originWidth=1860&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=157627&amp;status=done&amp;style=none&amp;taskId=u708042fa-8f81-496d-be9c-7146bdc63f9&amp;title=&amp;width=1240" alt="image.png">​</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726332170-2850f85f-528c-44bd-b437-4ec88fb01135.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=ua9b87dbe&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=uce64b8ca-791b-4f9b-926e-d0ac8c89023&amp;title=&amp;width=1400" alt="标头.jpg">​</p><h3 id="设置仓库">设置仓库</h3><ol><li class="lvl-3"><p>创建仓库</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710589583924-8d28f532-f702-4c48-8a59-e7cbf2f9e5fc.png#averageHue=%23b8b6b5&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=181&amp;id=u17ded29a&amp;originHeight=271&amp;originWidth=1842&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=71118&amp;status=done&amp;style=none&amp;taskId=u6cd2be1b-e7ca-4688-8e05-63c2735cedf&amp;title=&amp;width=1228" alt="image.png"><br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710589678658-e5e35527-830d-4341-89bd-1ab34fe6910d.png#averageHue=%23d6d4d4&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=394&amp;id=u6b032ae7&amp;originHeight=591&amp;originWidth=1843&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=129384&amp;status=done&amp;style=none&amp;taskId=u08f2b726-939f-4694-b68d-0be6e891a26&amp;title=&amp;width=1228.6666666666667" alt="image.png"><br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710589889744-af161de3-c9a3-4601-97c2-0829604d7056.png#averageHue=%23e2e1e1&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=602&amp;id=u3fdc5574&amp;originHeight=903&amp;originWidth=1849&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=142247&amp;status=done&amp;style=none&amp;taskId=ue04b4937-f6b9-41d9-af46-afae6c7063a&amp;title=&amp;width=1232.6666666666667" alt="image.png"><br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710590255782-e59dc0bb-e821-4485-b55d-ac85f35204ad.png#averageHue=%23dad9d8&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=419&amp;id=u97c637b5&amp;originHeight=629&amp;originWidth=1850&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=130507&amp;status=done&amp;style=none&amp;taskId=ud18a7ffa-f8e6-4d27-a73f-abb8d2a3cd7&amp;title=&amp;width=1233.3333333333333" alt="image.png"><br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710589981642-18af2fb7-4e16-4b60-8823-14c3a2517ee1.png#averageHue=%23d3d1d0&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=381&amp;id=ufd4e8fc7&amp;originHeight=572&amp;originWidth=1852&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=163035&amp;status=done&amp;style=none&amp;taskId=u13efa02d-0348-4560-b7ca-4fe4631f2e8&amp;title=&amp;width=1234.6666666666667" alt="image.png">​</p><ol start="2"><li class="lvl-3"><p>将创建好的仓库添加到public组中。</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710590564218-94fda846-3c68-46cf-b75a-d289e4c87bde.png#averageHue=%23d8d7d6&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=499&amp;id=u4be7ef8f&amp;originHeight=749&amp;originWidth=1855&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=208210&amp;status=done&amp;style=none&amp;taskId=ud909667b-0229-449e-8764-7fbce96fb21&amp;title=&amp;width=1236.6666666666667" alt="image.png"><br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710590619703-91ef96bd-b119-4744-b860-523e62d36e04.png#averageHue=%23e2e1e1&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=581&amp;id=u95101d6f&amp;originHeight=871&amp;originWidth=1808&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=138766&amp;status=done&amp;style=none&amp;taskId=ua9a43b06-b054-4ac4-91a5-dda7420a57d&amp;title=&amp;width=1205.3333333333333" alt="image.png"><br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710590666393-688daeb6-4bc0-4982-ad3b-be23a9333687.png#averageHue=%23e1e0e0&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=576&amp;id=ua02d0d80&amp;originHeight=864&amp;originWidth=1851&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=137614&amp;status=done&amp;style=none&amp;taskId=u0b273ef4-0c86-427f-8ebf-b82fefb5428&amp;title=&amp;width=1234" alt="image.png">​</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726336997-278c1a20-f874-4061-b7b3-c5c48c9f48b8.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u23ab9b07&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u467aebaf-2da5-4ee6-8c04-8f30fa58693&amp;title=&amp;width=1400" alt="标头.jpg">​</p><h3 id="使用Nexus下载jar包">使用Nexus下载jar包</h3><p>创建一个新的本地仓库，用来接收Nexus下载下来的jar包。<br>因为要使用Maven工具访问私服，所以settings.xml文件要修改。</p><ol><li class="lvl-3"><p>本地仓库地址修改为新地址</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:\repository_nexus<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710595705585-36ca7718-4754-4725-95c6-e1df8b9fab14.png#averageHue=%23f8f6f5&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=371&amp;id=qaZvg&amp;originHeight=556&amp;originWidth=1397&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=165706&amp;status=done&amp;style=none&amp;taskId=ud9b3b741-ba7f-41de-92fc-ed5bdb22d5b&amp;title=&amp;width=931.3333333333334" alt="image.png">​</p><ol start="2"><li class="lvl-3"><p>设置<mirror>标签为Nexus的maven-public库地址（仓库组）</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dljd-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mynexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<url>标签的地址复制maven-public库的地址。这个地址取代了中央仓库地址。我们所有的jar包下载都是从这个地址里找。它包含宿主库和代理库的所有地址。<br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710595526378-d59c4cf0-1b13-41e0-9298-70ddb75cc971.png#averageHue=%23a6a4a3&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=525&amp;id=ud954b07b&amp;originHeight=788&amp;originWidth=1821&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=173601&amp;status=done&amp;style=none&amp;taskId=u07e61d5c-9365-4240-89b4-f6ff56e70e0&amp;title=&amp;width=1214" alt="image.png">​</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726342406-4777a8ce-9a6c-4d52-90db-8b7b9da9c90f.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u056111b3&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u94377579-ee9f-4778-bd4e-91e64d88245&amp;title=&amp;width=1400" alt="标头.jpg">​</p><ol start="3"><li class="lvl-3"><p>设置每次访问Nexus的用户名和密码，修改settings.xml文件中的<server>标签</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dljd-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710596219243-d9bfdb91-472d-492c-96f2-0e4c2e6df2f3.png#averageHue=%23f8f4f3&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=344&amp;id=j0Ph6&amp;originHeight=516&amp;originWidth=1388&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=144015&amp;status=done&amp;style=shadow&amp;taskId=ufa9123f9-7bd7-4580-8f3e-02449b2d5ae&amp;title=&amp;width=925.3333333333334" alt="image.png">​</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726345194-0250f8f0-725e-439d-b4e0-4a5fc29da710.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u07c57e0f&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u341dd43c-75b0-4f39-9a9e-b56ed2c53f7&amp;title=&amp;width=1400" alt="标头.jpg">​</p><ol start="4"><li class="lvl-3"><p>打开Idea2023，确定是新的本地仓库地址</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710596742497-f977c201-2556-465b-8415-0b2a2b716953.png#averageHue=%233e4247&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=673&amp;id=u8aa42ee8&amp;originHeight=1010&amp;originWidth=1474&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=107535&amp;status=done&amp;style=none&amp;taskId=u4a7bc7bd-b10d-4b8c-9aa3-3b9e6a7bd48&amp;title=&amp;width=982.6666666666666" alt="image.png"><br>选择一个项目maven_01执行clean操作。<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710597060668-9657312a-3d1b-46e2-a339-919b75baff80.png#averageHue=%23455947&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=673&amp;id=u6267674e&amp;originHeight=1010&amp;originWidth=1900&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=292301&amp;status=done&amp;style=none&amp;taskId=u5b7d5d7a-8c18-4ad6-bc13-a9f61e79e69&amp;title=&amp;width=1266.6666666666667" alt="image.png"><br>观察本地仓库：<br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710597467794-be84dd2e-0633-4408-a494-e8e2bf671095.png#averageHue=%23fbf9f8&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=186&amp;id=ua9659baa&amp;originHeight=279&amp;originWidth=1265&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=33099&amp;status=done&amp;style=none&amp;taskId=u06cdc023-5126-4ae1-b564-a34bde729cf&amp;title=&amp;width=843.3333333333334" alt="image.png"><br>观察私服Nexus上的maven-public组<br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710597430739-fc2a2304-03af-48f6-8e3d-e3e0e3620110.png#averageHue=%23cdcbcb&amp;clientId=u025dd473-afbf-4&amp;from=paste&amp;height=269&amp;id=uf339e316&amp;originHeight=404&amp;originWidth=1850&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=77138&amp;status=done&amp;style=none&amp;taskId=u16a39d7d-635c-4e8a-a307-6cc9500d606&amp;title=&amp;width=1233.3333333333333" alt="image.png">​</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726350164-9966f8cf-fdc9-4227-9086-d492b4b2dc66.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=ub3025dc4&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u1e024626-dfa7-4782-9f08-b7d56d9c74b&amp;title=&amp;width=1400" alt="标头.jpg">​</p><h3 id="使用Idea部署jar包到Nexus私服">使用Idea部署jar包到Nexus私服</h3><p>私服Nexus是部署在局域网的，是全公司共享的仓库地址，每个团队都可以将已完成的功能或测试版本发布到私服供别人来使用。</p><ol><li class="lvl-3"><p>打开要部署的项目的pom.xml文件，设置上传路径</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>dljd-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/dljd-release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>dljd-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/dljd-snapshot/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<url>路径来自于私服dljd-snapshot.<br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710601782311-d10b3ebb-b91c-4e07-a5db-b1af1ed34d78.png#averageHue=%23a5a4a3&amp;clientId=ue6a5b10a-4711-4&amp;from=paste&amp;height=588&amp;id=u068366a5&amp;originHeight=882&amp;originWidth=1837&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=181842&amp;status=done&amp;style=none&amp;taskId=u5f983d50-71f3-4d1b-8f71-99da93392c9&amp;title=&amp;width=1224.6666666666667" alt="image.png"><br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710599781490-0ae738c8-f2a5-426a-b1fa-4f3b03ebb710.png#averageHue=%23a6a4a4&amp;clientId=ue6a5b10a-4711-4&amp;from=paste&amp;height=564&amp;id=u0e64ecca&amp;originHeight=846&amp;originWidth=1838&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=178991&amp;status=done&amp;style=none&amp;taskId=u9e3adfd2-b6ce-45e9-acac-f1507d9949b&amp;title=&amp;width=1225.3333333333333" alt="image.png">​</p><ol start="2"><li class="lvl-3"><p>运行deploy部署命令</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710601913346-5d734890-c6bb-478c-99b3-0b8620053c3e.png#averageHue=%235d7577&amp;clientId=ue6a5b10a-4711-4&amp;from=paste&amp;height=673&amp;id=u3fb54899&amp;originHeight=1010&amp;originWidth=1900&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=273512&amp;status=done&amp;style=none&amp;taskId=u4045d62d-5ed0-4dde-8205-d8b1d7c3ceb&amp;title=&amp;width=1266.6666666666667" alt="image.png">​</p><ol start="3"><li class="lvl-3"><p>观察私服对应仓库变化</p></li></ol><p>release项目部署<br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710602004568-db363d8f-ecc7-414c-b432-9a79bbf88191.png#averageHue=%23d5d4d3&amp;clientId=ue6a5b10a-4711-4&amp;from=paste&amp;height=341&amp;id=u95028ca3&amp;originHeight=511&amp;originWidth=1838&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=97536&amp;status=done&amp;style=none&amp;taskId=u6974d175-4489-4a3e-bee6-e84e97405e4&amp;title=&amp;width=1225.3333333333333" alt="image.png"><br>snapshot项目部署<br>​<img src="https://cdn.nlark.com/yuque/0/2024/png/42995594/1710602043184-441c9483-a596-41b5-b0b1-221b8d82ca0c.png#averageHue=%23d5d5d5&amp;clientId=ue6a5b10a-4711-4&amp;from=paste&amp;height=348&amp;id=u4c40e9fe&amp;originHeight=522&amp;originWidth=1841&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=96729&amp;status=done&amp;style=none&amp;taskId=ufc2c7061-36cd-48ab-8d46-5065710ffe9&amp;title=&amp;width=1227.3333333333333" alt="image.png"><br>总结：整个Maven工具的应用就讲完了。其中一二三章是基础应用，四五六章是高级应用，工作时遇到的问题四五六章有解决方案，到时候再看也来得及。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42995594/1710726356059-c0a22862-6b43-476e-bf05-7b2a2d0074ad.jpeg#averageHue=%23f9f8f8&amp;clientId=u1450a208-3265-4&amp;from=paste&amp;height=78&amp;id=u091cc52d&amp;originHeight=78&amp;originWidth=1400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5764&amp;status=done&amp;style=none&amp;taskId=u09f096b2-1d10-49ab-9445-841fbf7fbe9&amp;title=&amp;width=1400" alt="标头.jpg">​</p><p>‍</p><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6. Maven 的私服</title>
      <link href="/posts/417de2f1.html"/>
      <url>/posts/417de2f1.html</url>
      
        <content type="html"><![CDATA[<h1>1. 什么是私服</h1><p><span data-type="text" style="color: var(--b3-font-color11);">Maven 私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的远程仓库（中央仓库、其他远程公共仓库）</span>。一些无法从外部仓库下载到的构件，也能从本地上传到私服供其他人使用。</p><p>Maven 私服其实并不是 Maven 的核心概念，它仅仅是一种衍生出来的特殊的仓库，但这并不代表它不重要，相反由于私服具有降低中央仓库负荷、节省外网带宽、以及提高项目稳定性等优点，使得私服在实际开发过程中得到了相当普遍地使用。建立了 Maven 私服后，当局域网内的用户需要某个构件时，会先请求本地仓库，若本地仓库不存在所需构件，则请求 Maven 私服，将所需构件下载到本地仓库，若私服中不存在所需构件，再去请求外部的远程仓库，将所需构件下载并缓存到 Maven 私服，若外部远程仓库不存在所需构件，则 Maven 直接报错。</p><h1>2. Maven 仓库管理器 Nexus</h1><h2 id="2-1-什么是Nexus">2.1 什么是Nexus</h2><p>Nexus 是 Sonatype 公司发布的一款仓库（Repository）管理软件，常用来搭建 Maven 私服，所以也有人将 Nexus 称为“Maven仓库管理器”。 Sonatype Nexus 是当前最流行，使用最广泛的 Maven 仓库管理器。Nexus 分为开源版和专业版，其中开源版足以满足大部分 Maven 用户的需求</p><h2 id="2-2-Nexus-仓库的类型">2.2 Nexus 仓库的类型</h2><p>Nexus默认内置了很多仓库，这些仓库可以划分为3种类型，每种类型的仓库用于存放特定的jar包，具体说明如下：</p><ol><li class="lvl-3"><p>hosted：宿主仓库，部署自己的jar包到这个类型的仓库中，包括Releases和Snapshots两部分，Releases为公司内部发行版本仓库，Snapshots为公司内部测试版本仓库。</p></li><li class="lvl-3"><p>proxy：  代理仓库，用于代理远程的公共仓库，如Maven中央仓库，用户连接私服，私服自动去中央仓库下载Jar包或者插件。</p></li><li class="lvl-3"><p>group：仓库组，用来合并多个hosted/proxy仓库，通常用于配置自己的Maven连接仓库组。当我们下载jar包时，从仓库组中的每个仓库找一遍，找到后下载。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710725573245-a25c98e8-302b-4461-95cc-aacd2e49191a-20240403154227-te3y483.png" alt="image.png">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710586648632-8430fc88-b320-4e83-a6ee-1167d069029b-20240403154227-zlpxe04.png" alt="1710586648632-8430fc88-b320-4e83-a6ee-1167d069029b">​</p><h2 id="2-3-如何搭建私服">2.3 如何搭建私服</h2><ol><li class="lvl-3"><p>下载Nexus</p><ol><li class="lvl-7">**官网地址：**​<a href="https://help.sonatype.com/repomanager3/download">https://help.sonatype.com/repomanager3/download</a></li><li class="lvl-7"><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403151606-q7ntak5.png" alt="image">​</li></ol></li><li class="lvl-3"><p>安装Nexus</p><ol><li class="lvl-7">下载安装包后解压并进入到 nexus-3.66.0-02\bin目录下</li><li class="lvl-7">双击nexus.exe没有反应，需要以管理员身份打开cmd窗口，输入命令： nexus   /run    回车，需要等待一段时间，<span data-type="text" style="color: var(--b3-font-color13);">直到出现Started Sonatype Nexus OSS 3.66.0-02说明安装成功。</span></li><li class="lvl-7"><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403151748-alt6y6x.png" alt="image">​</li><li class="lvl-7"><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403151820-5fgzuao.png" alt="image">​</li></ol></li><li class="lvl-3"><p>访问Nexus</p><ol><li class="lvl-7">访问地址：<span data-type="text" style="color: var(--b3-font-color13);"><a href="http://localhost:8081">http://localhost:8081</a></span></li><li class="lvl-7">端口号可以改变 , D:\DevTools\Nexus\nexus-3.66.0-02\etc目录下的nexus-default.properties文件中进行修改。</li><li class="lvl-7"><span data-type="text" style="background-color: var(--b3-card-info-background); color: var(--b3-card-info-color);">注意：如果浏览器访问一直转圈打不开页面，则在cmd窗口ctrl+c唤醒一下就可以打开了。</span></li><li class="lvl-7"><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403152022-25jfm93.png" alt="image">​</li></ol></li></ol><h1>3. Nexus私服的应用</h1><h2 id="3-1-登录">3.1 登录</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710578382883-2473002b-8a8c-49aa-9ff6-8f2f43b4368c-20240403154227-d5s6n7t.png" alt="image.png"><br>密码所在的文件：<br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710578676893-c70852d1-a697-4173-91cd-0d54965ef7cd-20240403154227-vl1kq52.png" alt="image.png"><br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710578745174-adf07074-2ee6-4ccc-adfd-e1cbe23234b5-20240403154227-6h1521b.png" alt="image.png"><br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710578912244-f8fdbcb4-0064-4628-b06a-5b39548c7d7e-20240403154227-vlvt92h.png" alt="image.png"><br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710579554576-5fc530bd-605c-4a1d-92d4-e3292de9b05a-20240403154227-he0bh6l.png" alt="image.png"><br>点Browse观察<br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710586648632-8430fc88-b320-4e83-a6ee-1167d069029b-20240403154227-ogorb25.png" alt="image.png">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710726332170-2850f85f-528c-44bd-b437-4ec88fb01135-20240403154227-qvebnaw.jpeg" alt="标头.jpg">​</p><h2 id="3-2-设置仓库">3.2 设置仓库</h2><ol><li class="lvl-3"><p>创建仓库</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710589583924-8d28f532-f702-4c48-8a59-e7cbf2f9e5fc-20240403154227-4jmjuc8.png" alt="image.png"><br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710589678658-e5e35527-830d-4341-89bd-1ab34fe6910d-20240403154227-0zquoap.png" alt="image.png"><br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710589889744-af161de3-c9a3-4601-97c2-0829604d7056-20240403154227-rzvjcm7.png" alt="image.png"><br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710590255782-e59dc0bb-e821-4485-b55d-ac85f35204ad-20240403154227-9p9ab3v.png" alt="image.png"><br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710589981642-18af2fb7-4e16-4b60-8823-14c3a2517ee1-20240403154228-2ym4v6e.png" alt="image.png">​</p><ol start="2"><li class="lvl-3"><p>将创建好的仓库添加到public组中。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710590564218-94fda846-3c68-46cf-b75a-d289e4c87bde-20240403154228-uzetdi8.png" alt="image.png"><br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710590619703-91ef96bd-b119-4744-b860-523e62d36e04-20240403154228-z7vor5m.png" alt="image.png"><br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710590666393-688daeb6-4bc0-4982-ad3b-be23a9333687-20240403154228-cshlqpe.png" alt="image.png">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710726336997-278c1a20-f874-4061-b7b3-c5c48c9f48b8-20240403154228-tbgwl8q.jpeg" alt="标头.jpg">​</p><h2 id="3-3-使用Nexus下载jar包">3.3 使用Nexus下载jar包</h2><p>创建一个新的本地仓库，用来接收Nexus下载下来的jar包。<br>因为要使用Maven工具访问私服，所以settings.xml文件要修改。</p><ol><li class="lvl-3"><p>本地仓库地址修改为新地址</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:\repository_nexus<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710595705585-36ca7718-4754-4725-95c6-e1df8b9fab14-20240403154228-n8yl6pc.png" alt="image.png">​</p><ol start="2"><li class="lvl-3"><p>设置<mirror>标签为Nexus的maven-public库地址（仓库组）</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dljd-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mynexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<url>标签的地址复制maven-public库的地址。这个地址取代了中央仓库地址。我们所有的jar包下载都是从这个地址里找。它包含宿主库和代理库的所有地址。<br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710595526378-d59c4cf0-1b13-41e0-9298-70ddb75cc971-20240403154228-y9pgqez.png" alt="image.png">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710726342406-4777a8ce-9a6c-4d52-90db-8b7b9da9c90f-20240403154228-60ubcr8.jpeg" alt="标头.jpg">​</p><ol start="3"><li class="lvl-3"><p>设置每次访问Nexus的用户名和密码，修改settings.xml文件中的<server>标签</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dljd-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710596219243-d9bfdb91-472d-492c-96f2-0e4c2e6df2f3-20240403154228-3etnc39.png" alt="image.png">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710726345194-0250f8f0-725e-439d-b4e0-4a5fc29da710-20240403154228-5n4l18l.jpeg" alt="标头.jpg">​</p><ol start="4"><li class="lvl-3"><p>打开Idea2023，确定是新的本地仓库地址</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710596742497-f977c201-2556-465b-8415-0b2a2b716953-20240403154228-0mda1df.png" alt="image.png"><br>选择一个项目maven_01执行clean操作。<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710597060668-9657312a-3d1b-46e2-a339-919b75baff80-20240403154228-cxklm6u.png" alt="image.png"><br>观察本地仓库：<br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710597467794-be84dd2e-0633-4408-a494-e8e2bf671095-20240403154228-e5bsu3q.png" alt="image.png"><br>观察私服Nexus上的maven-public组<br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710597430739-fc2a2304-03af-48f6-8e3d-e3e0e3620110-20240403154228-z5jw6ne.png" alt="image.png">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710726350164-9966f8cf-fdc9-4227-9086-d492b4b2dc66-20240403154228-ux3sfzs.jpeg" alt="标头.jpg">​</p><h2 id="3-4-使用Idea部署jar包到Nexus私服">3.4 使用Idea部署jar包到Nexus私服</h2><p>私服Nexus是部署在局域网的，是全公司共享的仓库地址，每个团队都可以将已完成的功能或测试版本发布到私服供别人来使用。</p><ol><li class="lvl-3"><p>打开要部署的项目的pom.xml文件，设置上传路径</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>dljd-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/dljd-release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>dljd-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/dljd-snapshot/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<url>路径来自于私服dljd-snapshot.<br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710601782311-d10b3ebb-b91c-4e07-a5db-b1af1ed34d78-20240403154228-1dw7ji9.png" alt="image.png"><br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710599781490-0ae738c8-f2a5-426a-b1fa-4f3b03ebb710-20240403154228-nruaq36.png" alt="image.png">​</p><ol start="2"><li class="lvl-3"><p>运行deploy部署命令</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710601913346-5d734890-c6bb-478c-99b3-0b8620053c3e-20240403154228-aq0ajdd.png" alt="image.png">​</p><ol start="3"><li class="lvl-3"><p>观察私服对应仓库变化</p></li></ol><p>release项目部署<br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710602004568-db363d8f-ecc7-414c-b432-9a79bbf88191-20240403154228-ftib4p1.png" alt="image.png"><br>snapshot项目部署<br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-1710602043184-441c9483-a596-41b5-b0b1-221b8d82ca0c-20240403154228-mmi0075.png" alt="image.png"><br>总结：整个Maven工具的应用就讲完了。其中一二三章是基础应用，四五六章是高级应用，工作时遇到的问题四五六章有解决方案，到时候再看也来得及。</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. Maven的继承和聚合</title>
      <link href="/posts/9e3d6f34.html"/>
      <url>/posts/9e3d6f34.html</url>
      
        <content type="html"><![CDATA[<h1>1. 什么是继承</h1><p>Maven 的<span data-type="text" style="color: var(--b3-font-color13);">依赖传递机制</span>可以一定程度上<span data-type="text" style="color: var(--b3-font-color13);">简化 POM 的配置</span>，但这仅限于存在依赖关系的项目或模块中。当一个项目的多个模块都依赖于相同 jar 包的相同版本，且这些模块之间不存在依赖关系，这就导致<span data-type="text" style="color: var(--b3-font-color13);">同一个依赖需要在多个模块中重复声明</span>，这显然是不可取的，大量的前人经验告诉我们，<span data-type="text" style="color: rgb(28 50 255);">重复往往意味着更多的劳动和更高的潜在风险。</span></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403143229-vhmfhtc.png" alt="image">​</p><p>在 Java 面向对象中，我们可以建立一种类的父子结构，然后在父类中声明一些字段和方法供子类继承，这样就可以一定程度上消除重复，<span data-type="text" style="color: var(--b3-font-color7);">做到 “一处声明，多处使用”。在 Maven 的世界中，也有类似的机制，它就是 POM 继承。</span></p><p>Maven 在设计时，借鉴了 Java 面向对象中的继承思想，提出了 POM 继承思想。当一个项目包含多个模块时，可以在该项目中再创建一个<span data-type="text" style="color: var(--b3-font-color13);">父模块，并在其 POM 中声明依赖，其他模块的 POM 可通过继承父模块的 POM 来获得对相关依赖的声明。</span></p><p><span data-type="text" style="color: var(--b3-font-color11);">对于父模块而言，其目的是为了消除子模块 POM 中的重复配置</span>，其中不包含有任何实际代码，<span data-type="text" style="color: var(--b3-font-color13);">因此父模块 POM 的打包类型（packaging）必须是 pom。</span></p><p>如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403143520-vw81v6g.png" alt="image">​</p><p>子工程可以继承的父工程的元素：</p><table><thead><tr><th><strong>元素</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><span data-type="text" style="color: var(--b3-font-color13);">groupId</span></td><td><span data-type="text" style="color: var(--b3-font-color13);">项目组 ID，项目坐标的核心元素</span></td></tr><tr><td><span data-type="text" style="color: var(--b3-font-color13);">version</span></td><td><span data-type="text" style="color: var(--b3-font-color13);">项目版本，项目坐标的核心元素</span></td></tr><tr><td>description</td><td>项目的描述信息</td></tr><tr><td>organization</td><td>项目的组织信息</td></tr><tr><td>inceptionYear</td><td>项目的创始年份</td></tr><tr><td>url</td><td>项目的 URL 地址</td></tr><tr><td>developers</td><td>项目的开发者信息</td></tr><tr><td>contributors</td><td>项目的贡献者信息</td></tr><tr><td>distributionManagement</td><td>项目的部署配置</td></tr><tr><td>issueManagement</td><td>项目的缺陷跟踪系统信息</td></tr><tr><td>ciManagement</td><td>项目的持续集成系统信息</td></tr><tr><td>scm</td><td>项目的版本控制系统信息</td></tr><tr><td>mailingLists</td><td>项目的邮件列表信息</td></tr><tr><td><span data-type="text" style="color: var(--b3-font-color13);">properties</span></td><td><span data-type="text" style="color: var(--b3-font-color13);">自定义的 Maven 属性</span></td></tr><tr><td><span data-type="text" style="color: var(--b3-font-color13);">dependencies</span></td><td><span data-type="text" style="color: var(--b3-font-color13);">项目的依赖配置</span></td></tr><tr><td><span data-type="text" style="color: var(--b3-font-color13);">dependencyManagement</span></td><td><span data-type="text" style="color: var(--b3-font-color13);">项目的依赖管理配置</span></td></tr><tr><td>repositories</td><td>项目的仓库配置</td></tr><tr><td><span data-type="text" style="color: var(--b3-font-color13);">build</span></td><td><span data-type="text" style="color: var(--b3-font-color13);">包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等</span></td></tr><tr><td>reporting</td><td>包括项目的报告输出目录配置、报告插件配置等</td></tr></tbody></table><p><strong>总结：一句话，通过继承可以实现子工程沿用父工程的配置。大大减少重复设置。</strong></p><p>父工程示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打包方式必须是pom,声明是父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--聚合子模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven_son<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven_web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--定义属性，便于版本的管理--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">servlet-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--只是定义，并没有真正的添加依赖，子工程根据需要有选择的添加依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--引用定义好的属性--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--只定义Tomcat插件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>8089<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子工程示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可以省略groupId和version，因为与父工程保持一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--需要什么依赖，添加什么依赖，可以省略版本号，版本由父工程统一管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置Tomcat插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--子工程可以自定义端口号，不自定义使用父工程的--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8060<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>总结：一句话，通过继承可以实现子工程沿用父工程的配置。大大减少重复设置。</strong></p></blockquote><h1>2. 什么是聚合</h1><p><span data-type="text" style="color: var(--b3-font-color4);">使用 Maven 聚合功能对项目进行构建时，需要在该项目中额外创建一个的聚合模块，然后通过这个模块构建整个项目的所有模块。</span>聚合模块仅仅是帮助聚合其他模块的工具，其本身并无任何实质内容，因此聚合模块中只有一个 POM 文件，不包含 src 等目录。</p><p><strong>与父模块相似，</strong> 聚合模块的打包方式（packaging）也是 pom，用户可以在其 <span data-type="text" style="color: var(--b3-font-color13);">POM 中通过 modules 下的 module 子元素来添加需要聚合的模块的目录路径。</span>父模块的 pom.xml 文件的 <modules> 把子模块聚集起来.</p><p>项目结构：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403145026-zq7yxey.png" alt="image">​</p><blockquote><p><strong>总结：一句话，聚合就是集中构建项目的。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. Maven的依赖管理</title>
      <link href="/posts/a25a408.html"/>
      <url>/posts/a25a408.html</url>
      
        <content type="html"><![CDATA[<h1>1. <strong>什么是依赖范围</strong></h1><p><span data-type="text" style="color: var(--b3-font-color13);">Maven的依赖构件包含一个依赖范围的属性</span>。<strong>这个属性描述的是三套classpath的控制，即编译、测试、运行</strong>。这说白了就是添加的jar包起作用的范围。  maven提供了以下几种依赖范围:<strong>compile,test,provided.runtime,system。</strong></p><p><strong>分别介绍如下：</strong></p><ol><li class="lvl-3"><p><strong>compile</strong></p></li></ol><p>编译依赖范围，如果没有指定，默认使用该依赖范围，对于编译、测试、运行3种classpath都有效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p><strong>test</strong></p></li></ol><p>测试依赖范围，使用此依赖范围的maven依赖，<strong>只对编译测试、运行测试的classpath有效</strong>，在编译主代码、运行项目时无法使用此类依赖。比如junit，它只有在编译测试代码及运行测试的时候才需要。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p><strong>provided</strong></p></li></ol><p>已提供依赖范围。表示项目的运行环境中已经提供了所需要的构件，对于此依赖范围的maven依赖，<span data-type="text" parent-style="background-color: var(--b3-font-background10);" style="color: var(--b3-font-color13);">对于编译源码、编译测试、运行测试中classpath有效，但在运行时无效。</span>比如上面说到的servlet-api，这个在编译和测试的时候需要用到，但是在运行的时候，web容器已经提供了，就不需要maven帮忙引入了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p><strong>runtime</strong></p></li></ol><p><span data-type="text" parent-style="background-color: var(--b3-font-background6);" style="color: var(--b3-font-color9);">运行时依赖范围，使用此依赖范围的maven依赖，对于测试和运行项目的classpath有效，但在编译时无效</span>，比如jdbc驱动实现，项目代码编译的时候只需要提供JDK提供的JDBC接口，运行的时候才需要具体的jdbc驱动实现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p><strong>system</strong></p></li></ol><p>系统依赖范围，该依赖与3中classpath的关系，和provided依赖范围完全一致。但是，使用system范围的依赖时必须通过systemPath元素显示第指定依赖文件的路径。这种依赖直接依赖于本地路径中的构件，可能每个开发者机器中构件的路径不一致，<span data-type="text" parent-style="background-color: var(--b3-font-background8);" style="color: var(--b3-font-color11);">所以如果使用这种写法，你的机器中可能没有问题，别人的机器中就会有问题，所以建议谨慎使用。</span></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_001_javase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>D:/repository/com/bjpowernode/maven_001_javase/1.0-SNAPSHOT/maven_001_javase-1.0-SNAPSHOT.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结如下图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240402210155-k2gbzh2.png" alt="image">​</p><h1>2. 什么是依赖传递</h1><p><span data-type="text" style="color: var(--b3-font-color13);">依赖具有传递性。</span> Maven 的依赖传递机制是指：不管 Maven 项目存在多少间接依赖，POM 中都只需要定义其直接依赖，不必定义任何间接依赖，这在一定程序上简化 了POM 的配置。</p><p>假项目A依赖项目B，项目B依赖项目C，则A-----&gt;直接依赖B，B-----&gt;直接依赖C，A-----&gt;间接依赖C。</p><p>直接依赖和间接依赖是一个相对的概念。<span data-type="text" style="color: var(--b3-font-color9);">直接在项目中配置的依赖称为直接依赖，通过添加依赖关联进来的依赖称为间接依赖</span>。<span data-type="text" style="color: var(--b3-font-color7);">1是项目的直接依赖，2是1的直接依赖，2是项目的间接依赖，以此类推。</span>如图</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240402210516-yirv7om.png" alt="image">​</p><h2 id="2-1-依赖范围对依赖传递的影响">2.1 <strong>依赖范围对依赖传递的影响</strong></h2><p>B 是 A 的直接依赖，C 是 A 的间接依赖，根据 Maven 的依赖传递机制，<span data-type="text" style="color: var(--b3-font-color13);">间接依赖 C 会以传递性依赖的形式引入到 A 中，但这种引入并不是无条件的，它会受到依赖范围的影响。 </span></p><p><strong>图示依赖传递关系:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240402211040-20bmjyy.png" alt="image">​</p><p>规范化依赖传递的结果:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240402211212-hygm5ay.png" alt="image">​</p><p>交叉部分的单元格的取值为传递性依赖的依赖范围，若交叉单元格取值为 “-”，则表示该传递性依赖不能被传递。</p><p>通过上表，可以总结出以下规律：</p><ol><li class="lvl-3"><p>当间接依赖的范围是 compile 时，与直接依赖的范围一致；</p></li><li class="lvl-3"><p><span data-type="text" style="color: var(--b3-font-color13);">当间接依赖的范围是 test 或 provided时，传递性依赖不会被传递；</span></p></li><li class="lvl-3"><p><span data-type="text" style="color: var(--b3-font-color9);">当间接依赖的范围是 runtime 时，传递性依赖的范围与直接依赖的范围一致，但 compile 例外，此时传递性依赖的范围为 runtime。</span></p></li></ol><h1>3. 依赖冲突</h1><h2 id="3-1-什么是依赖冲突">3.1 什么是依赖冲突</h2><pre><code>在 Maven 项目中，依赖通常被定义在项目的 pom.xml 文件中。&lt;span data-type=&quot;text&quot; style=&quot;color: var(--b3-font-color13);&quot;&gt;当多个依赖项引入了不同版本的相同库时，就会发生依赖冲突。&lt;/span&gt;这可能是因为项目的直接依赖和间接依赖导致了同一库的多个版本存在于类路径中。每个显式声明的类包都会依赖于一些其它的隐式类包，这些隐式的类包会被maven间接引入进来，从而造成类包冲突。</code></pre><h2 id="3-2-依赖冲突的解决方案">3.2 依赖冲突的解决方案</h2><h3 id="3-2-1-版本锁定">3.2.1 版本锁定</h3><p>在父工程中使用dependencyManagement 进行版本锁定，<span data-type="text" parent-style="background-color: var(--b3-font-background12);" style="color: var(--b3-font-color13);">dependencyManagement可以统一管理整个项目的版本号，确保应用的各个项目的依赖和版本一致。 </span><span data-type="text" parent-style="background-color: var(--b3-font-background12);" style="color: var(--b3-font-color9);">dependencyManagement只是声明依赖，并不自动实现引入</span>，因此子项目需要显示的声明需要用的依赖，便可以忽略版本号。如果排斥父工程中定义的版本号，可以显示的进行版本号声明。</p><ol><li class="lvl-3"><p><span data-type="text" style="background-color: var(--b3-font-background13);">子工程使用父工程锁定的版本号</span></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403090117-tsp8ndt.png" alt="image">​</p></li><li class="lvl-3"><p><span data-type="text" style="background-color: var(--b3-font-background12);">子工程使用自定义的版本号，只要重新声明即可</span></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403090428-91qhqbt.png" alt="image">​</p></li><li class="lvl-3"><p><span data-type="text" style="background-color: var(--b3-font-background7);">父工程不使用&lt;dependencyManagement&gt;标签，则子工程跟父工程完全保持一致。子工程不需要显示依赖任何jar包。</span></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403090527-z5lkzno.png" alt="image">​</p></li></ol><h3 id="3-2-2-短路径优先">3.2.2 短路径优先</h3><p>引入路径短者优先，顾名思义，当一个间接依赖存在多条引入路径时，引入路径短的会被解析使用。如图 <code>就近原则 ，谁离得近就使用谁</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403102555-lehu6oi.png" alt="image">​</p><p>代码示例：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403102613-erqv9eq.png" alt="image">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403102402-6zl255q.png" alt="image">​</p><h3 id="3-2-3-声明优先">3.2.3 声明优先</h3><p><span data-type="text" parent-style="background-color: var(--b3-font-background8);" style="color: var(--b3-font-color13);">如果存在短路径，则优先选择短路径，如果路径相同的情况下，先声明者优先</span>，POM 文件中依赖声明的顺序决定了间接依赖会不会被解析使用，顺序靠前的优先使用。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403103742-a3u50av.png" alt="image">​</p><p>代码示例：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403102402-6zl255q.png" alt="image">​</p><blockquote><p><strong>注意去掉&lt;scope&gt;标签，否则会因为依赖范围的影响导致效果无法显示。</strong></p></blockquote><h3 id="3-2-4-特殊优先-后来者居上">3.2.4 特殊优先(后来者居上)</h3><p>同一个pom.xml文件中进行了多次依赖jar包不同版本的配置，后面的覆盖前面的配置。这种情况比较少见。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403103933-co4ghe0.png" alt="image">​</p><h3 id="3-2-5-可选依赖">3.2.5 可选依赖</h3><p>maven_03项目可选择是否传递间接依赖junit_4.13，主动权在当前项目maven_03中。如果当前项目被依赖到其它项目中，当前项目可以拒绝交出间接依赖项。例如maven_02添加了maven_03的依赖，maven_03可以自主设置其依赖项junit_4.13是否被间接传递。<optional>true</optional> 为不传递间接依赖，那么在maven_02项目中就没有junit_4.13的依赖。默认是false，是传递间接依赖。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403104035-t78as32.png" alt="image"><br>代码示例：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403104051-95gdzsd.png" alt="image">​</p><h3 id="3-2-6-排除依赖">3.2.6 排除依赖</h3><p>是当前项目是否主动断开其依赖项目的间接依赖。<span data-type="text" style="color: var(--b3-font-color8);" parent-style="background-color: var(--b3-font-background5);">也就是控制当前项目是否使用其直接依赖传递下来的接间依赖</span>。在maven_02项目中添加maven_03项目的依赖，但不要maven_03项目中的junit_4.13的依赖，可以选择排除依赖。这样可以保证当前项目依赖的纯净性。</p><p>排除依赖使用 exclusions 元素排除依赖，说明如下：</p><ol><li class="lvl-3"><p>exclusions 元素下可以包含若干个 exclusion 子元素，用于排除若干个间接依赖，该元素包含两个子元素：groupId 和 artifactId，用来确定需要排除的间接依赖的坐标信息</p></li><li class="lvl-3"><p>exclusion 元素中只需要设置 groupId 和 artifactId 就可以确定需要排除的依赖，无需指定版本version</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403104659-qlba8s8.png" alt="image">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403104755-ac40gpz.png" alt="image">​</p><h3 id="3-2-7-可选依赖和排除依赖的区别">3.2.7 可选依赖和排除依赖的区别</h3><p>排除依赖和可选依赖都能在项目中将间接依赖排除在外，但两者实现机制却完全不一样。</p><ol><li class="lvl-3"><p>可选依赖是自己决定是否向外提供间接依赖（maven_03设置拒绝提供间接依赖junit）</p></li><li class="lvl-3"><p>排除依赖是主动拒绝添加直接依赖关联的间接依赖（maven_02项目设置排除maven_03的junit依赖）</p></li><li class="lvl-3"><p><span data-type="text" style="color: var(--b3-font-color13);">可选依赖的优先级高于排除依赖</span></p></li><li class="lvl-3"><p>若对于同一个间接依赖同时使用排除依赖和可选依赖进行设置，那么可选依赖的取值必须为 false，否则排除依赖无法生效。</p></li></ol><p>如果用一个生活中的例子可能更易懂一些。</p><ul class="lvl-0"><li class="lvl-2"><p>国民党（maven_02)抓住了共产党人（依赖了maven_03）,要求供出联系人名单（maven_03中依赖的junit_4.13)，最终结果是没有得到联系人名单（不依赖jjunit_4.13)。</p></li><li class="lvl-2"><p>可选依赖：是maven_03共产党人死活不说联系人的名单junit_4.13（可选，我选择不说）。</p></li><li class="lvl-2"><p>排除依赖：是maven_02国民党不要共产党人提供的联系人名单（排除，我就是不要你的名单,  估计你是乱说的）。</p></li></ul><h1>4. 刷新依赖的8种方式</h1><p>在idea中有时候会出现刷新延时的情况，那么需要进行手工刷新依赖。</p><ol><li class="lvl-3"><p>点击M刷新按钮。</p></li><li class="lvl-3"><p>点Maven窗口的Reload All Maven Projects。</p></li><li class="lvl-3"><p>Build—&gt;ReBuild Project 重新构建项目的同时刷新所有依赖。</p></li><li class="lvl-3"><p>点击本项目的pom.xml文件—&gt;右键—&gt;Maven—&gt;Reload Project 刷新本项目的依赖。</p></li><li class="lvl-3"><p>打开pom.xml文件,全选,拷贝,删除,关闭,打开,粘贴.物理刷新pom.xml文件 。</p></li><li class="lvl-3"><p>Invalidate Caches—&gt;全选—&gt;Invalidate and Restart 清空idea的缓存并重启idea刷新依赖。</p></li><li class="lvl-3"><p><span data-type="text" style="color: var(--b3-font-color13);">打开本地仓库，搜索last，全选删除,点Maven的刷新全部依赖的按钮。</span></p></li><li class="lvl-3"><p><span data-type="text" style="color: var(--b3-font-color13);">在7的步骤后执行File—&gt;settings—&gt;Build,Execution,Deployment—&gt;Build Tools—&gt;Maven—&gt;Repositories—&gt;选中本地仓库—&gt;update—&gt;ok。</span></p></li></ol><h1>5. 资源文件的指定</h1><p>src/main/java 和 src/test/java 这两个目录中的所有*.java 文件会分别在 comile 和 test-comiple 阶段被编译，编译结果分别放到了 target/classes 和 targe/test-classes 目录中，但是这两个目录中的其他文件(后缀是.properties或.xml等文件)都会被忽略掉(编译后丢失)，如果需要把 src 目录下的除.java之外的文件包放到 target/classes 目录，作为输出的 jar 一部分。需要指定资源文件位置。以下内容放到<build>标签中。简单来说就是在resources目录下的*.properties文件和*.xml文件编译时不丢失,但resources目录外的*.properties文件和*.xml文件会丢失,所以要指定位置,保证编译后文件都在.</p><p>代码示例</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403110535-tdgvxi9.png" alt="image">​</p><p>添加指定后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240403110611-a0o0otk.png" alt="image">​</p><p>指定代码示例：<span data-type="text" style="color: var(--b3-font-color13);">一般情况下,会两个目录都指定.</span></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定java目录下的所有路径下的所有文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定resources目录下的所有路径下的所有文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. Maven的应用</title>
      <link href="/posts/cf1cd846.html"/>
      <url>/posts/cf1cd846.html</url>
      
        <content type="html"><![CDATA[<h1>1. 下载Maven</h1><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/1712026223963-8482d120-a81f-4b9f-9c62-dae4d66ab73a-20240402150725-qixpilb.png" alt="img">​</p><h1>2. Maven安装配置</h1><h2 id="2-1-第一步-解压">2.1. 第一步 : 解压</h2><p><strong>解压 apache-maven-3.6.1.rar 既安装完成</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20221125073656251-666949374-20240402150725-wd0wi6u.png" alt="img">​</p><p><strong>解压缩后的目录结构如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20221125073555876-1316731027-20240402150725-hj4l8zf.png" alt="img">​</p><ul class="lvl-0"><li class="lvl-2"><p>bin目录 ： 存放的是可执行命令。mvn 命令重点关注。</p></li><li class="lvl-2"><p>conf目录 ：存放Maven的配置文件。<code>settings.xml</code> 配置文件后期需要修改。</p></li><li class="lvl-2"><p>lib目录 ：存放Maven依赖的jar包。Maven也是使用java开发的，所以它也依赖其他的jar包。</p></li></ul><h2 id="2-2-第二步-：配置环境变量">2.2. 第二步 ：配置环境变量</h2><p>配置环境变量 MAVEN_HOME 为安装路径的bin目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此电脑` 右键  --&gt;  `高级系统设置`  --&gt;  `高级`  --&gt;  `环境变量</span><br></pre></td></tr></table></figure><p>在系统变量处新建一个变量 <code>MAVEN_HOME</code></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20221125072829851-1610340275-20240402150725-wy7spbi.png" alt="img">​</p><p>在 <code>Path</code> 中进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%MAVEN_HOME%\bin</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20221125073006392-427673029-20240402150725-i0a49ml.png" alt="img">​</p><h2 id="2-3-第三部-：-验证">2.3. 第三部 ： 验证</h2><p>打开命令提示符进行验证，出现如图所示表示安装成功</p><p>命令 ： <code>mvn -version</code></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20221125073354382-1679398098-20240402150725-iafw6ld.png" alt="img">​</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此时就配置成功了</span><br></pre></td></tr></table></figure><h2 id="2-4-第四步-：配置本地仓库">2.4. 第四步 ：配置本地仓库</h2><p>配置本地仓库</p><p>修改 <code>conf/settings.xml</code> 中的 <code>&lt;localRepository&gt;</code>为一个指定目录作为本地仓库，用来存储jar包。</p><p>手动去掉注释<br>​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20221125083718646-702574970-20240402150725-4m4239m.png" alt="img">​</p><p>手动创建一个<code>mvn_resp</code>的文件夹(<code>本地仓库，用来存储jar包。</code>)</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20221125084118679-1590703804-20240402150725-97fem4w.png" alt="img">​</p><p>复制这个文件夹的路径并进行粘贴</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20221125084045954-1968472030-20240402150725-008du1h.png" alt="img">​</p><h2 id="2-5-第五步-：配置阿里云私服">2.5. 第五步 ：配置阿里云私服</h2><p>配置阿里云私服</p><p>中央仓库在国外，所以下载jar包速度可能比较慢，而<code>阿里公司提供了一个远程仓库，里面基本也都有开源项目的jar包。</code>​</p><p>修改 conf/settings.xml 中的 标签，为其添加如下子标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>conf/settings.xml</code>中找到<code>&lt;mirrors&gt; &lt;/mirrors&gt;</code> , 并将上面的代码粘贴到此处</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20221125084743361-857953677-20240402150725-74hu7bu.png" alt="img">​</p><p>大功告成</p><h1>3. 基于Maven开发JavaSE的项目</h1><ol><li class="lvl-3"><p><strong>File—&gt;new—&gt;Project—&gt;Empty Project</strong></p><ol><li class="lvl-7">Location:D:\course\10-Maven\code</li><li class="lvl-7">Name:mavenall</li><li class="lvl-7">—&gt;Create</li></ol></li><li class="lvl-3"><p><strong>ctrl+alt+shift+s:打开项目结构窗口</strong></p><ol><li class="lvl-7"><strong>Project:设置JDK版本为17</strong></li></ol></li><li class="lvl-3"><p>Modules:</p><ol><li class="lvl-7">+ —&gt; New Module</li></ol></li></ol><p>Build system: Maven</p><ol><li class="lvl-3"><p>Advanced Settings</p></li></ol><p>GroupId:com.bjpowernode</p><p>ArtifactId:maven_001_javase</p><p>—&gt;Create</p><ol><li class="lvl-3"><p>观察Sources和Dependcies选项的JDK版本，都为17</p></li></ol><p>—&gt;ok</p><ol><li class="lvl-3"><p>补齐目录</p></li></ol><p>在test目录上右键—&gt;new Directory—&gt;resouces</p><ol><li class="lvl-3"><p>修改pom.xml文件</p></li></ol><p>添加单元测试的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切记:点M刷新依赖</p><ol><li class="lvl-3"><p>开发Hello.java类</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="comment">//加法运算</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//乘法运算</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 * num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><p>开发测试类</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试功能由测试方法来实现</span></span><br><span class="line"><span class="comment">     * 测试方法的规范</span></span><br><span class="line"><span class="comment">     * 1)访问权限是public</span></span><br><span class="line"><span class="comment">     * 2)方法没有返回值void</span></span><br><span class="line"><span class="comment">     * 3)方法名称自 定义,推荐以test开头</span></span><br><span class="line"><span class="comment">     * 4)方法没有参数</span></span><br><span class="line"><span class="comment">     * 5)使用<span class="doctag">@Test</span>注解声明是测试方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Hello</span>  <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line">        System.out.println(hello.sum(<span class="number">3</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMul</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Hello</span>  <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line">        System.out.println(hello.mul(<span class="number">3</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>4. 基于Maven开发JavaWeb的项目</h1><ol><li class="lvl-3"><p>删除maven_001_javaSE.iml文件(如果此文件位于项目目录下，则必须删除，如果在本模块目录下，就不需要删除）</p></li><li class="lvl-3"><p>ctrl+alt+shift+s:打开结构窗口</p></li></ol><p>Modules选项上—&gt; + —&gt;new Module</p><p>Maven Archetype选项</p><p>Archetype: maven-archetype-webapp</p><ol><li class="lvl-3"><p>Advanced Settings 选项卡</p></li></ol><p>GroupId:com.bjpowernode</p><p>ArtifactId:maven_002_javaweb</p><p>Version:1.0.0</p><p>—&gt;Create</p><ol><li class="lvl-3"><p>观察Sources和Dependcies选项的JDK版本</p></li></ol><p>—&gt;ok</p><ol><li class="lvl-3"><p>修改目录</p></li></ol><p>补齐缺失的所有目录</p><p>添加package: com.bjpowernode.controller</p><ol><li class="lvl-3"><p>修改pom.xml文件</p></li><li class="lvl-3"><ol><li class="lvl-6">删除远程访问的名称</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>maven_002_javaweb Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><ol><li class="lvl-6">添加依赖</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加Servlet的依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><ol><li class="lvl-6">删除项目构建名称</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven_002_javaweb<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切记: 点M刷新按钮</p><ol><li class="lvl-3"><p>修改web.xml文件</p></li></ol><p>ctrl+alt+shift+s:打开结构窗口</p><p>点web —&gt; - —&gt;yes —&gt; Apply</p><p>+ —&gt;web.xml —&gt;ok  —&gt;ok</p><ol><li class="lvl-3"><p>修改jsp页面</p></li></ol><p>删除index.jsp页面</p><p>在webapp目录下新建index.jsp和main.jsp</p><p>开发index.jsp页面   <a href="/demo">访问服务器</a></p><ol><li class="lvl-3"><p>开发Servlet</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我来过.........&quot;</span>);</span><br><span class="line">        <span class="comment">//跳 回 main.jsp</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/main.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><p>添加tomcat测试运行</p></li></ol><p>部署长名称的项目.</p><h1>5. 导入Maven的项目</h1><ol><li class="lvl-3"><p>拷贝一个现有的Maven项目maven_002_javaweb,改名为 maven_002_javawebnew</p></li><li class="lvl-3"><p>进入到maven_002_javawebnew项目中<strong>删除target目录和.gitignore文件</strong></p></li><li class="lvl-3"><p>打开pom.xml文件,更改artifactId的名称为maven_002_javawebnew.</p></li><li class="lvl-3"><p>ctrl+alt+shift+s:打开项目结构窗口</p></li></ol><p>+ —&gt;Import Moudle —&gt;选中要导入的项目—&gt; ok</p><p>选中  Import module from external model</p><p>Maven</p><p>—&gt; Create —&gt; ok</p><ol><li class="lvl-3"><p>部署运行测试功能</p></li></ol><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. Maven的核心概念</title>
      <link href="/posts/ecaa32e3.html"/>
      <url>/posts/ecaa32e3.html</url>
      
        <content type="html"><![CDATA[<h1>1. 什么是POM</h1><p>POM(Project Object Model)项目对象模型，它是Maven的核心组件。它是Maven中的基本工作单元。它是一个xml文件，以pom.xml驻留在项目的根目录中。POM不仅包含有关项目的信息及Maven用于构建项目的各种配置的详细信息，还包含目标和插件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加父工程的引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.xiaomi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xiaomi-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--本项目的身份证号gav--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_006_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打包方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--集中定义依赖版本号,使用属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mysql驱动的依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--聚合工程--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xiaomi-manager-pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xiaomi-manager-mapper<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xiaomi-manager-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xiaomi-manager-web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--插件配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--指定配置文件识别路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>2. 什么是约定的目录结构</h1><p>会有预先约定好的目录结构，<strong>必须要遵循的规范，所有的Maven项目都依照这个规范</strong>。主要的目的是将项目的源码文件，测试代码，资源文件完全分开，便于项目管理和扩展。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/1712019245744-bb18ca72-4fcf-44cd-8db6-9bd5e465462d-20240402103930-baa7o28.png" alt="img">​</p><h1>3. 什么是坐标GAV</h1><p>也称为gav定位。使用三个标签来唯一定位jar资源。项目的唯一的名称，创建项目时定义gav名称，引用项目时使用gav名称。相当于项目的身份证号。</p><p><strong>表现在仓库，gav是一级一级的目录。</strong></p><ol><li class="lvl-3"><p>groupId:组织名称,一般是公司域名的倒写 com.north</p></li><li class="lvl-3"><p>artifactId:项目名称 springmvc_006_ssm</p></li><li class="lvl-3"><p>version: 版本编号 1.0-SNAPSHOT(开发时的临时版本号） 5.2.5.RELEASE（发布版本）</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.north<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_006_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.north<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_006_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>4. 什么是仓库</h1><h2 id="4-1-本地仓库">4.1. 本地仓库</h2><p>本地仓库，存在于当前电脑上，默认存放在  <strong>.<strong>​</strong>m2\repository中,为本机上所有的Maven工程服务。你也可以通过Maven的配置文件Maven_home/conf/settings.xml中修改本地仓库所在的目录</strong>​ <strong>。</strong>  是用户的主目录，windows系统中是 c:/user/登录系统的用户名</p><p>秘密: gav就是仓库中一级一级的目录名称</p><h2 id="4-2-远程仓库">4.2. 远程仓库</h2><p><strong>远程仓库：通过局域网或互联网访问的仓库地址。</strong></p><p>远程仓库，分为为全世界范围内的开发人员提供服务的中央仓库、为全世界范围内某些特定的用户提供服务的中央仓库镜像、为本公司提供服务自己架设的私服。</p><p>中央仓库是maven默认的远程仓库，其地址是<a href="http://repo.maven.apache.org/maven2/">:</a>​<a href="https://mvnrepository.com/">Just a moment…</a>，中央仓库包含了绝大多数流行的开源Java构件，以及源码、作者信息、许可证信息等。一般来说，简单的Java项目依赖的构件都可以在这里下载得到。</p><p>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的Maven用户使用。当Maven需要下载构件的时候，它从私服请求，如果私服上不存在该构件，则从外部的远程仓库下载，缓存在私服上之后，再为Maven的下载请求提供服务。我们还可以把一些无法从外部仓库下载到的构件上传到私服上</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/1712021492244-cd9ce37e-2c96-4226-8f51-fe4640894861-20240402103930-5tyhahg.png" alt="img">​</p><h1>5. 什么是依赖</h1><p>添加jar包.</p><p>所有的资源是以gav进行定义的,也是通过gav来添加引用.</p><p>在<dependencies>大标签中,通过子标签<dependency>,通过gav进行引用.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>6. 什么是生命周期</h1><p><strong>它对应项目构建的过程,底层是Maven命令的调用(插件).</strong></p><p>生命周期对应的Maven命令(了解）：</p><ol><li class="lvl-3"><p><span data-type="text" style="color: var(--b3-font-color13);">mvn clean</span> 清理(会删除原来编译和测试的目录，即 target 目录，但是已经 install 到仓库里的包不会删除)</p></li><li class="lvl-3"><p>mvn compile  编译主程序(会在当前目录下生成一个 target,里边存放编译主程序之后生成的字节码文件)</p></li><li class="lvl-3"><p>mvn test-compile  编译测试程序(会在当前目录下生成一个 target,里边存放编译测试程序之后生成的字节码文件)</p></li><li class="lvl-3"><p>mvn test  测试(会生成一个目录surefire-reports，保存测试结果)</p></li><li class="lvl-3"><p>mvn package  打包主程序(会编译、编译测试、测试、并且按照 pom.xml 配置把主程序打包生成 jar 包或者 war 包)</p></li><li class="lvl-3"><p>mvn install 安装主程序(会把本工程打包，并且按照本工程的坐标保存到本地仓库中)</p></li><li class="lvl-3"><p>mvn deploy 部署主程序(部署到私服仓库中）。</p></li></ol><h1>7. 什么是插件</h1><p>Maven本质上就是一个插件的框架 , 插件就是集成化的功能.</p><p>通过<plugins>大标签,再通过<plugin>子标签进行极简化的添加.</p><p>常见的插件:comcat插件,编译插件,MyBatis的逆向工程插件.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 什么是Maven</title>
      <link href="/posts/76897b5c.html"/>
      <url>/posts/76897b5c.html</url>
      
        <content type="html"><![CDATA[<h1>1. Maven的概念</h1><ol><li class="lvl-3">它是一个一键式的自动化的构建工具.</li><li class="lvl-3">Maven 是目前最流行的自动化构建工具，对于生产环境下多框架、多模块整合开发有重要作用，Maven 是一款在大型项目开发过程中不可或缺的重要工具。</li></ol><h1>2. 为什么要使用Maven</h1><p>首先 , Maven可以自动的帮助我们下载jar包. 其次可以进行多个项目同时的编译运行.还有在开发的过程中需要进行测试运行,Maven提供了自动化的测试插件帮助我们进行项目测试功能的运行.最后项目是需要进行资源文件,配置文件的整合,来进行打包和部署,Maven可以轻松搞定.</p><p>类似自动化构建工具还有：Gant,  Gradle。</p><h1>3. 项目的构建过程</h1><p>构建(build)是面向过程的(从开始到结尾的多个步骤)，涉及到多个环节的协同工作。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/1711966138212-1034ff67-2931-49de-8333-a8de8ae64725-20240401211535-oikof0f.png" alt="img">​</p><p>构建过程的几个重要环节：</p><ol><li class="lvl-3"><p><span data-type="text" style="color: var(--b3-font-color13);">清理:将上次编译的结果删除,为下一次编译做准备</span>.</p></li><li class="lvl-3"><p>编译：将Java源程序编译为字节码文件。</p></li><li class="lvl-3"><p>测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。</p></li><li class="lvl-3"><p>报告：在每一次测试后以标准的格式记录和展示测试结果。</p></li><li class="lvl-3"><p>打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web 工程对应war包。</p></li><li class="lvl-3"><p>安装：在Maven环境下特指将jar包安装到本地仓库中。这样该项目就可以被其他的maven项目通过依赖的方式引入。</p></li><li class="lvl-3"><p>部署：将jar包部署到私服上。</p></li></ol><h1>4. Maven的两大核心功能(重点)</h1><h2 id="4-1-项目构建">4.1. 项目构建</h2><p><strong>对项目进行编译，测试，打包，部署等构建。</strong></p><h2 id="4-2-依赖管理">4.2. 依赖管理</h2><p>对jar包的统一管理，Maven提供中央仓库，私服，本地仓库解决jar包的依赖和相关依赖的下载。</p><p>如下图所示：包括蓝、黄两个部分分别对应着**<a href="https://www.zhihu.com/search?q=%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B">依赖关系</a><strong>​</strong>和项目构建**两大核心功能。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/1711977269713-a83c1421-6484-4946-b7f7-06169555b328-20240401211535-1x5jfnr.png" alt="img">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六章：异常</title>
      <link href="/posts/b492def1.html"/>
      <url>/posts/b492def1.html</url>
      
        <content type="html"><![CDATA[<h1>第六章：异常</h1><h1>1. <strong>异常概述</strong></h1><h2 id="1-1-什么是异常？有什么作用？">1.1. <strong>什么是异常？有什么作用？</strong></h2><ol><li class="lvl-3"><p><strong>Java中的异常是指程序运行时出现了错误或异常情况，导致程序无法继续正常执行的现象。</strong> 例如，数组下标越界、空指针异常、类型转换异常等都属于异常情况。</p></li><li class="lvl-3"><p><strong>Java提供了异常处理机制，即在程序中对可能出现的异常情况进行捕捉和处理。异常机制可以帮助程序员更好地管理程序的错误和异常情况，避免程序崩溃或出现不可预测的行为。</strong></p></li><li class="lvl-3"><p><strong>没有异常机制的话，程序中就可能会出现一些难以调试和预测的异常行为，可能导致程序崩溃，甚至可能造成数据损失或损害用户利益</strong>。因此，异常机制是一项非常重要的功能，是编写可靠程序的基础。</p></li><li class="lvl-3"><p><strong>异常机制在java中的作用：提高程序的健壮性</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;除数不能为0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;</span><br><span class="line">        System.out.println(a + <span class="string">&quot;/&quot;</span> + b + <span class="string">&quot;=&quot;</span> + c);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        s.toString(); <span class="comment">// 这里会发生空指针异常，程序执行到这里JVM就会在底层new一个NullPointerException类型的实例。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String s2 = null;</span></span><br><span class="line">        <span class="comment">//s2.toString(); // 在底层new一个NullPointerException类型的实例。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-异常在Java中以类和对象的形式存在">1.2. <strong>异常在Java中以类和对象的形式存在</strong></h2><h1>2. <strong>异常继承结构</strong></h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/1709608981004-5ef27089-2ad4-4ff9-b035-53efc6e16ab3.png" alt="">​</p><ol><li class="lvl-3"><p>所有的异常和错误都是可抛出的。都继承了Throwable类。</p></li><li class="lvl-3"><p><strong>Error是无法处理的，出现后只有一个结果：JVM终止。</strong></p></li><li class="lvl-3"><p><strong>Exception是可以处理的。</strong></p></li><li class="lvl-3"><p><strong>Exception的分类：</strong></p><ol><li class="lvl-7"><strong>所有的RuntimeException的子类：运行时异常/未检查异常(UncheckedException)/非受控异常</strong></li><li class="lvl-7"><strong>Exception的子类（除RuntimeException之外）：编译时异常/检查异常(CheckedException)/受控异常编译时异常和运行时异常区别：</strong></li></ol></li><li class="lvl-3"><p><strong>编译时异常和运行时异常区别：</strong></p><ol><li class="lvl-7"><strong>编译时异常特点：在编译阶段必须提前处理，如果不处理编译器报错。</strong></li><li class="lvl-7"><strong>运行时异常特点：在编译阶段可以选择处理，也可以不处理，没有硬性要求。</strong></li><li class="lvl-7"><strong>编译时异常一般是由外部环境或外在条件引起的，如网络故障、磁盘空间不足、文件找不到等</strong></li><li class="lvl-7"><strong>运行时异常一般是由程序员的错误引起的，并且不需要强制进行异常处理</strong></li><li class="lvl-7"><strong>注意：编译时异常并不是在编译阶段发生的异常，所有的异常发生都是在运行阶段的，因为每个异常发生都是会new异常对象的，new异常对象只能在运行阶段完成。那为什么叫做编译时异常呢？这是因为这种异常必须在编译阶段提前预处理，如果不处理编译器报错，因此而得名编译时异常。</strong></li></ol></li></ol><h1>3. <strong>自定义异常</strong></h1><h2 id="3-1-自定义异常的步骤">3.1. <strong>自定义异常的步骤</strong></h2><p><strong>第一步：编写异常类继承Exception/RuntimeException</strong></p><p><strong>第二步：提供一个无参数构造方法，再提供一个带String msg参数的构造方法，在构造方法中调用父类的构造方法 ,用super(String)</strong></p><p><strong>代码演示：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/1709609248867-4b417b53-13cd-465e-96f6-550d2c00c005.png" alt="">​</p><h1>4. <strong>异常的处理</strong></h1><h2 id="4-1-异常的处理包括两种方式">4.1. <strong>异常的处理包括两种方式</strong></h2><ol><li class="lvl-3"><p><strong>声明异常：类似于推卸责任的处理方式</strong></p><ol><li class="lvl-7"><strong>在方法定义时使用throws关键字声明异常，告知调用者，调用这个方法可能会出现异常。</strong> 这种处理方式的态度是：如果出现了异常则会抛给调用者来处理。</li></ol></li><li class="lvl-3"><p><strong>捕捉异常：真正的处理捕捉异常</strong></p><ol><li class="lvl-7"><strong>在可能出现异常的代码上使用try…catch进行捕捉处理。这种处理方式的态度是：把异常抓住。其它方法如果调用这个方法，对于调用者来说是不知道这个异常发生的。因为这个异常被抓住并处理掉了。</strong></li></ol></li></ol><p>异常在处理的整个过程中应该是：声明和捕捉联合使用。</p><p><strong>什么时候捕捉？什么时候声明？</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>如果异常发生后需要调用者来处理的，需要调用者知道的，则采用声明方式。否则采用捕捉。</strong></p></li></ul><h2 id="4-2-第一种处理方式：声明异常（-throws关键字）">4.2. <strong>第一种处理方式：声明异常（</strong> throws<strong>关键字）</strong></h2><p><strong>如果一个异常发生后希望调用者来处理的，使用声明异常（俗话说：交给上级处理）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> <span class="keyword">throws</span> AException, BException... &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>如果AException 和 BException都继承了XException，那么也可以这样写：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> <span class="keyword">throws</span> XException&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>调用者在调用m()方法时，编译器会检测到该方法上用throws声明了异常，表示可能会抛出异常，编译器会继续检测该异常是否为编译时异常，</strong> 如果为编译时异常则必须在编译阶段进行处理，如果不处理编译器就会报错。</p><p><strong>如果所有位置都采用throws，包括main方法的处理态度也是throws，如果运行时出现了异常，最终异常是抛给了main方法的调用者（JVM），JVM则会终止程序的执行。因此为了保证程序在出现异常后不被中断，至少main方法不要再使用throws进行声明了。</strong></p><p><strong>发生异常后，在发生异常的位置上，往下的代码是不会执行的，除非进行了异常的捕捉。</strong></p><h2 id="4-3-第二种处理方式：捕捉异常-try…catch…关键字">4.3. <strong>第二种处理方式：捕捉异常 (try…catch…关键字)</strong></h2><p><strong>如果一个异常发生后，不需要调用者知道，也不需要调用者来处理，选择使用捕捉方式处理。</strong></p><p><strong>try{</strong></p><p>**// **尝试执行可能会出现异常的代码</p><p><strong>// try</strong>块中的代码如果执行出现异常，出现异常的位置往下的代码是不会执行的，直接进入<strong>catch</strong>块执行</p><p><strong>}catch(AException e){</strong></p><p><strong>//</strong>  <strong><strong>如果捕捉到</strong></strong>​<strong>AException</strong>类型的异常，在这里处理</p><p><strong>}catch(BException e){</strong></p><p><strong>//</strong>  <strong><strong>如果捕捉到</strong></strong>​<strong>BException</strong>类型的异常，在这里处理</p><p><strong>}catch(XException e){</strong></p><p><strong>//</strong>  <strong><strong>如果捕捉到</strong></strong>​<strong>XException</strong>类型的异常，在这里处理</p><p><strong>}</strong></p><p><strong>// 当try…catch…将所有发生的异常捕捉后，这里的代码是会继续往下执行的。</strong></p><p><strong>catch可以写多个。并且遵循自上而下，从小到大。</strong></p><p><strong>Java7新特性：catch后面小括号中可以编写多个异常，使用运算符“|”隔开。</strong></p><h1>5. <strong>异常的常用方法</strong></h1><p><strong>获取异常的简单描述信息：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>exception.getMessage();</strong></p></li><li class="lvl-2"><p><strong>获取的message是通过构造方法创建异常对象时传递过去的message。</strong></p></li></ul><p><strong>打印异常堆栈信息：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>exception.printStackTrace();</strong></p></li></ul><p><strong>要会看异常的堆栈信息：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>异常信息的打印是符合栈数据结构的。</strong></p></li><li class="lvl-2"><p><strong>看异常信息主要看最开始的描述信息。看栈顶信息。</strong></p></li></ul><h1>6. <strong>finally语句块</strong></h1><p><strong>finally语句块中的代码是一定会执行的。</strong></p><p><strong>finally语句块不能单独使用，至少需要配合try语句块一起使用：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>try…finally</strong></p></li><li class="lvl-2"><p><strong>try…catch…finally</strong></p></li></ul><p><strong>通常在finally语句块中完成资源的释放</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>资源释放的工作比较重要，如果资源没有释放会一直占用内存。</strong></p></li><li class="lvl-2"><p><strong>为了保证资源的关闭，也就是说：</strong> 不管程序是否出现异常，关闭资源的代码一定要保证执行。</p></li><li class="lvl-2"><p><strong>因此在finally语句块中通常进行资源的释放。</strong></p></li></ul><p><strong>final、finally、finalize分别是什么？</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>final是一个关键字，修饰的类无法继承，修饰的方法无法覆盖，修饰的变量不能修改。</strong></p></li><li class="lvl-2"><p><strong>finally是一个关键字，和try一起使用，finally语句块中的代码一定会执行。</strong></p></li><li class="lvl-2"><p><strong>finalize是一个标识符，它是Object类中的一个方法名。</strong></p></li></ul><p><strong>代码演示：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/1709610490246-d2b3f4e2-1943-4af1-8cd9-301717ae1cee.png" alt="">​</p><h1>7. <strong>方法覆盖与异常</strong></h1><p><strong>方法重写之后，不能比父类方法抛出更多的异常，可以更少。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/1709610590621-67fc2af8-443b-48eb-aefc-fa1a767860c7.png" alt="">​</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章：面向对象编程</title>
      <link href="/posts/aa351366.html"/>
      <url>/posts/aa351366.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-面向对象概述">1. 面向对象概述</h2><p><strong>软件开发方法：面向过程和面向对象</strong></p><ul class="lvl-0"><li class="lvl-2"><p>面向过程：关注点在实现功能的步骤上</p><ul class="lvl-2"><li class="lvl-4">PO：Procedure Oriented。代表语言：C语言</li><li class="lvl-4">面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</li><li class="lvl-4">例如开汽车：启动、踩离合、挂挡、松离合、踩油门、车走了。</li><li class="lvl-4">对于简单的流程是适合使用面向过程的方式进行的。复杂的流程不适合使用面向过程的开发方式。</li></ul></li><li class="lvl-2"><p>面向对象：关注点在实现功能需要哪些对象的参与</p><ul class="lvl-2"><li class="lvl-4">OO：Object Oriented 面向对象。包括OOA,OOD,OOP。OOA：Object Oriented Analysis 面向对象分析。OOD：Object Oriented Design 面向对象设计。OOP：Object Oriented Programming 面向对象编程。代表语言：Java、C#、Python等。</li><li class="lvl-4">面向对象就是分析出解决这个问题都需要哪些对象的参加，然后让对象与对象之间协作起来形成一个系统。</li><li class="lvl-4">例如开汽车：汽车对象、司机对象。司机对象有一个驾驶的行为。司机对象驾驶汽车对象。</li><li class="lvl-4">面向对象开发方式耦合度低，扩展能力强。例如采用面向过程生产一台电脑，不会分CPU、内存和硬盘，它会按照电脑的工作流程一次成型。采用面向对象生产一台电脑，CPU是一个对象，内存条是一个对象，硬盘是一个对象，如果觉得硬盘容量小，后期是很容易更换的，这就是扩展性。</li></ul></li></ul><p><strong>面向对象三大特征</strong></p><ul class="lvl-0"><li class="lvl-2"><p>封装（Encapsulation）</p></li><li class="lvl-2"><p>继承（Inheritance）</p></li><li class="lvl-2"><p>多态（Polymorphism）</p></li></ul><h2 id="2-类与对象">2. 类与对象</h2><p><strong>类：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>现实生活中事物与事物之间具有共同特征</p></li><li class="lvl-2"><p>类实际上是一个模板 ，是一个抽象的概念</p></li><li class="lvl-2"><p>状态在程序中对应属性。属性通常用变量来表示</p></li><li class="lvl-2"><p>行为在程序中对应方法。用方法来描述行为动作。</p></li><li class="lvl-2"><p><strong>类 = 属性 + 方法</strong></p></li></ul><p><strong>对象：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>实际存在的个体</p></li><li class="lvl-2"><p>对象又称实例(instance)</p></li><li class="lvl-2"><p>通过类可以实例化对象</p></li></ul><p><strong>类的定义：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>定义类的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[修饰符列表] class 类名 &#123;</span><br><span class="line">类体 = 属性 + 方法;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性 (实例变量) , 描述的是状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 ，描述的是行为动作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.north.oop01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/1/25$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>为什么要定义类？</p><ul class="lvl-2"><li class="lvl-4">因为要通过类实例化对象。有了对象，让对象之间写作起来形成系统</li></ul></li><li class="lvl-2"><p>一个类可以实例化多java对象(通过一个类可以造出多个java对象)</p></li><li class="lvl-2"><p>实例变量是一个对象一份，比如创建3个学生对象，每个学生对象中应该有name变量</p></li><li class="lvl-2"><p>实例变量属于成员变量 ，成员变量如果没有手动赋值，系统会赋默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">数据类型        默认值</span><br><span class="line">----------------------</span><br><span class="line"><span class="type">byte</span>            <span class="number">0</span></span><br><span class="line"><span class="type">short</span>           <span class="number">0</span></span><br><span class="line"><span class="type">int</span>             <span class="number">0</span></span><br><span class="line"><span class="type">long</span>            <span class="number">0L</span></span><br><span class="line"><span class="type">float</span>           <span class="number">0.0F</span></span><br><span class="line"><span class="type">double</span>          <span class="number">0.0</span></span><br><span class="line"><span class="type">boolean</span>         <span class="literal">false</span></span><br><span class="line"><span class="type">char</span>            \u0000</span><br><span class="line">引用数据类型      <span class="literal">null</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>对象的创建和使用：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>以下列程序为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.north.oop01;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/1/25$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问对象的属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + s1.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + s1.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;性别：&quot;</span> + (s1.gender ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对属性进行操作</span></span><br><span class="line">        s2.name = <span class="string">&quot;陈平安&quot;</span>;</span><br><span class="line">        s2.age = <span class="number">19</span>;</span><br><span class="line">        s2.gender = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + s2.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + s2.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;性别：&quot;</span> + (s2.gender ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>对象的创建</p><ul class="lvl-2"><li class="lvl-4">Student s1 ; 是什么？s1是变量名。Student 是一种数据类型名。属于引用数据类型</li><li class="lvl-4">s1 也是局部变量</li><li class="lvl-4">s1 变量中保存的是堆内存中Student 对象的内存地址</li><li class="lvl-4">其中 , s1有一个特殊的称呼：引用</li><li class="lvl-4">什么是引用？引用的本质是一个变量 ，这个变量中保存了java对象的内存地址</li><li class="lvl-4">引用和对象要区分开。对象在JVM堆中。引用是保存对象地址的变量</li></ul></li><li class="lvl-2"><p>对象的使用</p><ul class="lvl-2"><li class="lvl-4">读取属性值：<a href="http://s2.name">s2.name</a></li><li class="lvl-4">修改属性值：<a href="http://s2.name">s2.name</a> = “徐凤年”;</li></ul></li><li class="lvl-2"><p>通过一个类可以实例化多个对象 , 如：Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>上述代码中的 name 和 age 为什么不能使用 <code>类名.</code>​去访问</p><ul class="lvl-2"><li class="lvl-4">实例变量要想访问 ，必须先new 对象。通过引用来访问实例变量</li><li class="lvl-4">实例变量是不能通过类名直接访问的</li></ul></li></ul><h2 id="3-对象的内存分析-对象与引用">3. 对象的内存分析(对象与引用)</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240203122036-gy75lv6.png" alt="image">​</p><ol><li class="lvl-3"><p>new运算符会在JVM的堆内存中分配空间用来存储实例变量。new分配的空间就是Java对象。</p></li><li class="lvl-3"><p>在JVM中对象创建后会有对应的内存地址，将内存地址赋值给一个变量，这个变量被称为引用。</p></li><li class="lvl-3"><p>Java中的GC主要针对的是JVM的堆内存。</p></li><li class="lvl-3"><p>空指针异常是如何发生的？</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PetTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建宠物对象</span></span><br><span class="line">        <span class="type">Pet</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line">        <span class="comment">// 给属性赋值</span></span><br><span class="line">        dog.name = <span class="string">&quot;小黑&quot;</span>;</span><br><span class="line">        dog.birth = <span class="string">&quot;2012-10-11&quot;</span>;</span><br><span class="line">        dog.sex = <span class="string">&#x27;雄&#x27;</span>;</span><br><span class="line">        <span class="comment">// 读取属性的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;狗狗的名字：&quot;</span> + dog.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;狗狗的生日：&quot;</span> + dog.birth);</span><br><span class="line">        System.out.println(<span class="string">&quot;狗狗的性别：&quot;</span> + dog.sex);</span><br><span class="line">        dog = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 注意：引用一旦为null，表示引用不再指向对象了。但是通过引用访问name属性，编译可以通过。</span></span><br><span class="line">        <span class="comment">// 运行时会出现异常：空指针异常。NullPointerException。这是一个非常著名的异常。</span></span><br><span class="line">        <span class="comment">// 为什么会出现空指针异常？因为运行的时候会找真正的对象，如果对象不存在了，就会出现这个异常。</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;狗狗的名字：&quot; + dog.name);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 会出现空指针异常。</span></span><br><span class="line">        dog.eat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 会出现空指针异常。</span></span><br><span class="line">        <span class="comment">//dog.run();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>方法调用时参数是如何传递的？将变量中保存的值复制一份传递过去。</p></li><li class="lvl-3"><p>初次认识this关键字：出现在实例方法中，代表当前对象。“this.”大部分情况下可以省略。this存储在实例方法栈帧的局部变量表的0号槽位上。</p></li></ol><h2 id="4-封装">4. 封装</h2><p><strong>什么是封装</strong></p><ul class="lvl-0"><li class="lvl-2"><p>封装是将一个对象所有<mark>状态(属性)</mark> , 以及 <mark>行为(方法)</mark> 统一封装到一个类中 ，从而隐藏了对象内部的具体实现细节，向外界提供了有限的访问接口 ，以实现对对象的保护和隔离</p></li></ul><p><strong>封装的好处</strong></p><ul class="lvl-0"><li class="lvl-2"><p>封装通过限制外部对对象内部的直接访问和修改，保证了数据的安全性 ，并提高了代码的可维护性和可复用性</p></li></ul><p><strong>在代码上如何实现封装</strong></p><ul class="lvl-0"><li class="lvl-2"><p>属性私有化， 对外提供getter和setter方法</p></li></ul><p><strong>实现封装的步骤：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>第一步：属性私有化(什么是私有化？使用private 进行修饰)</p><ul class="lvl-2"><li class="lvl-4">属性私有化的作用是：禁止外部程序对该属性进行随意访问</li><li class="lvl-4">所有被private修饰的 ，都是私有的 ，私有的只能在本类中访问</li></ul></li><li class="lvl-2"><p>第二步：对外提供setter和getter方法</p><ul class="lvl-2"><li class="lvl-4"><p>访问一般包括两种：</p><ol><li class="lvl-7"><p>读：读属性的值 ， 读的方法格式：getter , <code>getter方法是绝对安全的。因为这个方法是读取属性的值，不会涉及修改操作。</code>​</p></li><li class="lvl-7"><p>改：修改属性的值 , 改的方法格式：setter , <code>setter方法当中就需要编写拦截过滤代码，来保证属性的安全。</code>​</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(age &lt; <span class="number">0</span> || age &gt; <span class="number">100</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;对不起，您的年龄值不合法！&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// this. 大部分情况下可以省略。</span></span><br><span class="line">       <span class="comment">// this. 什么时候不能省略？用来区分局部变量和实例变量的时候。</span></span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h2 id="5-构造方法Constructor（构造器）">5. 构造方法Constructor（构造器）</h2><p><strong>构造方法有什么作用</strong></p><ul class="lvl-0"><li class="lvl-2"><p>作用1：对象的创建(通过调用构造方法可以完成对象的创建)</p></li><li class="lvl-2"><p>作用2：对象的初始化(给对象的所有属性赋值就是对象的初始化)</p></li></ul><p>怎么定义构造方法呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符列表] 构造方法名(形参列表) &#123;</span><br><span class="line">构造方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>注意：</p><ul class="lvl-2"><li class="lvl-4">构造方法名必须和类名一致。</li><li class="lvl-4">构造方法不需要提供返回值类型。</li><li class="lvl-4">如果提供了返回值类型，那么这个方法就不是构造方法了 ，就变成普通方法了。</li></ul></li></ul><p><strong>构造方法怎么调用呢？</strong></p><ul class="lvl-0"><li class="lvl-2"><p>使用new 运算符来调用</p></li><li class="lvl-2"><p>语法：new 构造方法名(实参)</p></li><li class="lvl-2"><p>注意：构造方法最终执行结束之后，会自动将创建的对象内存地址返回。但构造方法体中不需要提供 <mark>&quot;return 值&quot;</mark> ；这样的语句</p></li></ul><p><strong>缺省构造器</strong></p><ul class="lvl-0"><li class="lvl-2"><p>在java语言中，如果一个类没有显示的去定义构造方法 , 系统会默认提供一个无参的构造方法。(通常把这个构造方法叫做缺省构造器)</p></li></ul><p><strong>构造方法中给属性赋值了，为什么还需要单独定义set方法给属性赋值呢？</strong></p><ul class="lvl-0"><li class="lvl-2"><p>在构造方法中赋值是对象第一次创建时属性赋的值。set方法可以在后期的时候调用，来完成属性值的修改</p></li></ul><p><strong>构造方法的执行原理</strong></p><ul class="lvl-0"><li class="lvl-2"><p>构造方法执行包括两个重要的阶段</p><ul class="lvl-2"><li class="lvl-4">第一阶段：对象的创建</li><li class="lvl-4">第二阶段：对象的初始化</li></ul></li><li class="lvl-2"><p>对象在什么时候创建的？</p><ul class="lvl-2"><li class="lvl-4">new 的时候 ，会直接在堆内存中开辟空间。然后给所有属性赋默认值，完成对象的创建。(<mark>这个过程是在构造方法体执行之前就完成了</mark>)</li></ul></li><li class="lvl-2"><p>对象初始化在什么时候完成的？</p><ul class="lvl-2"><li class="lvl-4">构造方法体开始执行，标志着开始进行对象初始化。构造方法体执行完毕，表示对象初始化完成。</li></ul></li></ul><p><strong>构造代码块？</strong></p><ul class="lvl-0"><li class="lvl-2"><p>语法格式：<code>&#123; &#125;</code>​</p><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造代码块</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//System.out.println(&quot;构造代码块执行！&quot;);</span></span><br><span class="line">    <span class="comment">// 这里能够使用this，这说明，构造代码块执行之前对象已经创建好了，并且系统也完成了默认赋值。</span></span><br><span class="line">    <span class="comment">//System.out.println(this.name);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;iiiiiiiiiii = &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>构造代码块什么时候执行，执行几次？</p><ul class="lvl-2"><li class="lvl-4">每一次在new的时候，都会先执行一次构造代码块</li><li class="lvl-4">构造代码块是在构造方法之前执行的</li></ul></li></ul><h2 id="6-this-关键字">6. this 关键字</h2><p><strong>this关键字的简单介绍</strong></p><ul class="lvl-0"><li class="lvl-2"><p>this 是一个关键字</p></li><li class="lvl-2"><p>this 出现在实例方法中，代表当前对象。语法是：this</p></li><li class="lvl-2"><p>通过this 可以访问实例变量 ，可以调用实例方法</p></li><li class="lvl-2"><p>this 大部分情况下可以省略 ，用于区分局部变量和实例变量时不能省略</p></li><li class="lvl-2"><p>this 不能出现在静态方法中</p></li><li class="lvl-2"><p>this（实参） 语法：</p><ul class="lvl-2"><li class="lvl-4"><code>只能出现在构造方法的第一行</code>​</li><li class="lvl-4">通过当前构造方法调用本类中其他的构造方法</li><li class="lvl-4">作用是：代码复用</li></ul></li><li class="lvl-2"><p>this 本质上是一个引用</p></li><li class="lvl-2"><p>this 中保存的也是对象的内存地址</p></li><li class="lvl-2"><p>this 中保存的是当前对象的内存地址</p></li></ul><h2 id="7-static-关键字">7. static 关键字</h2><p><strong>static 关键字简单介绍</strong></p><ul class="lvl-0"><li class="lvl-2"><p>static 翻译为静态的</p></li><li class="lvl-2"><p>static 修饰的变量 ，静态变量</p></li><li class="lvl-2"><p>static 修饰的方法 ，静态方法</p></li><li class="lvl-2"><p>所有static修饰的，访问的时候，直接采用&quot;类名.&quot; , 不需要new 对象</p></li></ul><p><strong>什么情况下把成员变量定义为静态成员变量？</strong></p><ul class="lvl-0"><li class="lvl-2"><p>当一个属性是对象级别的 ，这个属性通常定义为实例变量。(实例变量时一个对象一份。100个对象就应该有100个空间)</p></li><li class="lvl-2"><p>当一个属性是类级别的(所有对象都有这个属性) ，并且这个属性的值是一样的 ，建议将其定义为静态变量 ，在内存空间上只有一份 ，节省内存开始，这种类级别的属性不需要new对象，直接通过类名访问</p></li></ul><p><strong>静态变量存储在哪里？静态变量在什么时候初始化？(什么时候开辟空间)</strong></p><ul class="lvl-0"><li class="lvl-2"><p>JDK8 之后 ，静态变量存储在堆内存中</p></li><li class="lvl-2"><p>类加载时初始化</p></li></ul><p><strong>静态变量可以采用&quot;引用.&quot; 来访问吗？</strong></p><ul class="lvl-0"><li class="lvl-2"><p>可以（但不建议：会给程序员造成困惑，程序员会认为country是一个实例变量。）</p></li><li class="lvl-2"><p>建议还是使用“类名.”来访问。这是正规的。</p></li></ul><p><strong>什么时候会出现空指针异常</strong></p><ul class="lvl-0"><li class="lvl-2"><p>一个空引用访问实例相关的，都会出现空指针异常。</p></li></ul><p><strong>静态代码块</strong></p><ul class="lvl-0"><li class="lvl-2"><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>静态代码块什么时候执行？执行几次？</p><ul class="lvl-2"><li class="lvl-4">静态代码块在类加载时执行 ，并且只执行一次</li></ul></li><li class="lvl-2"><p>静态代码块可以编写多个 ，并且遵循自上而下的顺序依次执行</p></li><li class="lvl-2"><p>静态代码块什么时候使用？</p><ul class="lvl-2"><li class="lvl-4">本质上，静态代码块就是为程序员预留的一个特殊的时间点：类加载时刻</li><li class="lvl-4">如果你需要再类加载时刻执行一段程序的话，这段代码就可以写到静态代码块当中。</li><li class="lvl-4">例如，有这样一个需求：请在类加载时，记录日志。那么记录日志的代码就可以编写到静态代码块当中。</li></ul></li></ul><h2 id="8-JVM体系结构">8. JVM体系结构</h2><p><strong>JVM对应了一套规范（Java虚拟机规范），它可以有不同的实现</strong></p><ul class="lvl-0"><li class="lvl-2"><p>JVM规范是一种抽象的概念，它可以有多种不同的实现。例如：</p><ol><li class="lvl-5">HotSpot：HotSpot 由 Oracle 公司开发，是目前最常用的虚拟机实现，也是默认的 Java 虚拟机，默认包含在 Oracle JDK 和 OpenJDK 中</li><li class="lvl-5">JRockit：JRockit 也是由 Oracle 公司开发。它是一款针对生产环境优化的 JVM 实现，能够提供高性能和可伸缩性</li><li class="lvl-5">IBM JDK：IBM JDK 是 IBM 公司开发的 Java 环境，采用了与 HotSpot 不同的 J9 VM，能够提供更小的内存占用和更迅速的启动时间</li><li class="lvl-5">Azul Zing：Azul Zing 是针对生产环境优化的虚拟机实现，能够提供高性能和实时处理能力，适合于高负载的企业应用和实时分析等场景</li><li class="lvl-5">OpenJ9：OpenJ9 是由 IBM 开发的优化的 Java 虚拟机实现，支持高度轻量级、低时延的 GC、优化的 JIT 编译器和用于健康度测试的可观察性仪表板</li></ol></li><li class="lvl-2"><p>右图是从oracle官网上截取的Java虚拟机规范中的一部分。（大家也可以找一下oracle官方文档）</p></li><li class="lvl-2"><p>我们主要研究运行时数据区。运行时数据区包括6部分：</p><ol><li class="lvl-5">The pc Register（程序计数器）</li><li class="lvl-5">Java Virtual Machine Stacks（Java虚拟机栈）</li><li class="lvl-5">Heap（堆）</li><li class="lvl-5">Method Area（方法区）</li><li class="lvl-5">Run-Time Constant Pool（运行时常量池）</li><li class="lvl-5">Native Method Stacks（本地方法栈）</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240204143027-9myyxjn.png" alt="image">​</p><p>‍</p><p><strong>JVM规范中的运行时数据区</strong></p><ol><li class="lvl-3"><p>The pc Register（程序计数器）：是一块较小的内存空间，此计数器记录的是正在执行的虚拟机字节码指令的地址；</p></li><li class="lvl-3"><p>Java Virtual Machine Stacks（Java虚拟机栈）：Java虚拟机栈用于存储栈帧。栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p></li><li class="lvl-3"><p>Heap（堆）：是Java虚拟机所管理的最大的一块内存。堆内存用于存放Java对象实例以及数组。堆是垃圾收集器收集垃圾的主要区域。</p></li><li class="lvl-3"><p>Method Area（方法区）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p></li><li class="lvl-3"><p>Run-Time Constant Pool（运行时常量池）：是方法区的一部分，用于存放编译期生成的各种字面量与符号引用。</p></li><li class="lvl-3"><p>Native Method Stacks（本地方法栈）：在本地方法的执行过程中，会使用到本地方法栈。和 Java 虚拟机栈十分相似。</p></li><li class="lvl-3"><p><mark>总结：这些运行时数据区虽然在功能上有所区别，但在整个 Java 虚拟机启动时都需要被创建，并且在虚拟机运行期间始终存在，直到虚拟机停止运行时被销毁。同时，不同的 JVM 实现对运行时数据区的分配和管理方式也可能不同，会对性能和功能产生影响。</mark></p></li></ol><p>JVM体系结构图（该图属于JVM规范，不是具体的实现）</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240204143209-8c8bxhc.png" alt="image">​</p><p>‍</p><p><strong>JVM规范的实现：HotSpot（Oracle JDK/Open JDK内部使用的JVM就是HotSpot）</strong></p><ul class="lvl-0"><li class="lvl-2"><p>以下是JDK6的HotSpot</p><ul class="lvl-2"><li class="lvl-4">年轻代：刚new出来的对象放在这里。</li><li class="lvl-4">老年代：经过垃圾回收之后仍然存活的对象。</li><li class="lvl-4">符号引用：类全名，字段全名，方法全名等。</li><li class="lvl-4">这个时期的永久代和堆是相邻的，使用连续的物理内存，但是内存空间是隔离的。</li><li class="lvl-4">永久代的垃圾收集是和老年代捆绑在一起的，因此无论谁满了，都会触发永久代和老年代的垃圾收集。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240204143318-6jltd96.png" alt="image">​</p><ul class="lvl-0"><li class="lvl-2"><p>以下是JDK7的HotSpot，这是一个过渡的版本，该版本相对于JDK6来说，变化如下：</p><ol><li class="lvl-5">类的静态变量转移到堆中了</li><li class="lvl-5">字符串常量池转移到堆中了</li><li class="lvl-5">运行时常量池中的符号引用转移到本地内存了</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240204143837-tb66scc.png" alt="image">​</p><ul class="lvl-0"><li class="lvl-2"><p>以下是JDK8及更高版本的HotSpot，相对于JDK7来说发生了如下变化：</p><ol><li class="lvl-5">彻底删除永久代（为了避免OOM错误的发生）</li><li class="lvl-5">将方法区的实现转移到本地内存</li><li class="lvl-5">将符号引用重新放回运行时常量池</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240204143934-bo7qciw.png" alt="image">​</p><h2 id="9-单例模式">9. 单例模式</h2><p><strong>设计模式概述</strong></p><ul class="lvl-0"><li class="lvl-2"><p>什么是设计模式？</p><ul class="lvl-2"><li class="lvl-4">设计模式（Design Pattern）是一套被广泛接受的、经过试验验证的、可反复使用的基于面向对象的软件设计经验总结，它是软件开发人员在软件设计中，对常见问题的解决方案的总结和抽象。设计模式是针对软件开发中常见问题和模式的通用解决方案</li></ul></li><li class="lvl-2"><p>设计模式有哪些？</p><ol><li class="lvl-5">GoF设计模式：《Design Patterns: Elements of Reusable Object-Oriented Software》（即后述《设计模式》一书），由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 合著（Addison-Wesley，1995）。这几位作者常被称为四人组（Gang of Four）。</li><li class="lvl-5">架构设计模式（Architectural Pattern）：主要用于软件系统的整体架构设计，包括多层架构、MVC架构、微服务架构、REST架构和大数据架构等。</li><li class="lvl-5">企业级设计模式（Enterprise Pattern）：主要用于企业级应用程序设计，包括基于服务的架构（SOA）、企业集成模式（EIP）、业务流程建模（BPM）和企业规则引擎（BRE）等。</li><li class="lvl-5">领域驱动设计模式（Domain Driven Design Pattern）：主要用于领域建模和开发，包括聚合、实体、值对象、领域事件和领域服务等。</li><li class="lvl-5">并发设计模式（Concurrency Pattern）：主要用于处理并发性问题，包括互斥、线程池、管道、多线程算法和Actor模型等。</li><li class="lvl-5">数据访问模式（Data Access Pattern）：主要用于处理数据访问层次结构，包括数据访问对象（DAO）、仓库模式和活动记录模式等。</li></ol></li><li class="lvl-2"><p>GoF设计模式的分类？</p><ol><li class="lvl-5">创建型：主要解决对象的创建问题</li><li class="lvl-5">结构型：通过设计和构建对象之间的关系，以达到更好的重用性、扩展性和灵活性</li><li class="lvl-5">行为型：主要用于处理对象之间的算法和责任分配</li></ol></li></ul><p><strong>单例模式：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>饿汉式：类加载时对象就创建好了。不管这个对象用还是不用。提前先把对象创建好</p><ul class="lvl-2"><li class="lvl-4"><p>实现步骤：</p><ul class="lvl-4"><li class="lvl-6"><p>第一步：构造方法私有化</p></li><li class="lvl-6"><p>第二步：对外提供一个公开的静态的方法 ，用这个方法获取单个实例</p></li><li class="lvl-6"><p>第三步：定义一个静态变量 ，在类加载的时候 ，初始化静态变量(只初始化一次)</p></li><li class="lvl-6"><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li class="lvl-2"><p>懒汉式：用到这个对象的时候再创建对象 ，别在类加载的时候创建对象</p><ul class="lvl-2"><li class="lvl-4"><p>实现步骤：</p><ul class="lvl-4"><li class="lvl-6"><p>第一步：构造方法私有化</p></li><li class="lvl-6"><p>第二步：对外提供一个静态方法 ，通过这个方法可以获取到 Singleton 对象</p></li><li class="lvl-6"><p>第三步：提供一个静态变量 ，但是这个变量值为 null</p></li><li class="lvl-6"><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span>) &#123;</span><br><span class="line">            s = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;对象创建了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="10-继承">10. 继承</h2><p><strong>继承的简单介绍：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>面向对象的三大特征之一：继承</p></li><li class="lvl-2"><p>java只支持单继承 ，一个类只能直接继承一个类</p></li><li class="lvl-2"><p>java不支持多继承 ，但支持多重继承(多层继承)</p></li><li class="lvl-2"><p>子类继承父类后，除私有的不支持继承 ，构造方法不支持继承 , 其他的全部会继承</p></li><li class="lvl-2"><p>一个类没有显示继承任何类时 ，默认继承<mark>java.lang.Object</mark>​</p></li></ul><p><strong>继承的作用</strong></p><ul class="lvl-0"><li class="lvl-2"><p>基本作用：代码复用</p></li><li class="lvl-2"><p>重要作用：有了继承 ，才有了方法覆盖(方法重写)和多态机制</p></li></ul><p><strong>继承在java中如何实现</strong></p><ul class="lvl-0"><li class="lvl-2"><p>[修饰符列表] class 类名 extends 父类名() { }</p></li><li class="lvl-2"><p>extends 翻译为扩展 ，表示子类继承父类后 ，子类是对父类的扩展</p></li></ul><p><strong>继承相关的术语：当B类继承A类时</strong></p><ul class="lvl-0"><li class="lvl-2"><p>A类称为：父类 ，超类 ，基类 ， superclass</p></li><li class="lvl-2"><p>B类称为：子类 ，派生类 ，subclass</p></li></ul><h2 id="11-方法覆盖">11. 方法覆盖</h2><p><strong>回顾方法重载 overload</strong></p><ol><li class="lvl-3"><p>什么时候考虑使用方法重载</p><ul class="lvl-2"><li class="lvl-6">在一个类中，如果功能相似，可以考虑使用方法重载。</li><li class="lvl-6">这样做的目的是：代码美观，方便编程。</li></ul></li><li class="lvl-3"><p>当满足什么条件的时候构成方法重载</p><ul class="lvl-2"><li class="lvl-6">条件1：在同一个类中。</li><li class="lvl-6">条件2：相同的方法名。</li><li class="lvl-6">条件3：不同的参数列表：类型，个数，顺序</li></ul></li><li class="lvl-3"><p>方法重载机制属于编译阶段的功能</p><ul class="lvl-2"><li class="lvl-6">方法重载机制是给编译器看的。</li></ul></li></ol><p><strong>方法覆盖/override/方法重写/overwrite</strong></p><ul class="lvl-0"><li class="lvl-2"><p>什么时候考虑使用方法重写？</p><ul class="lvl-2"><li class="lvl-4">当从父类中继承过来的方法，无法满足子类的业务需求时。</li></ul></li><li class="lvl-2"><p>当满足什么条件的时候 ，构成方法重写？</p><ul class="lvl-2"><li class="lvl-4">条件1：方法覆盖发生在具有继承关系的父子类之间。</li><li class="lvl-4">条件2：具有相同的方法名（必须严格一样）</li><li class="lvl-4">条件3：具有相同的形参列表（必须严格一样）</li><li class="lvl-4">条件4：具有相同的返回值类型（可以是子类型）</li></ul></li><li class="lvl-2"><p>关于方法覆盖的细节</p><ul class="lvl-2"><li class="lvl-4"><p>当子类将父类方法覆盖之后，将来子类对象调用方法的时候，一定会执行重写之后的方法。</p></li><li class="lvl-4"><p>在java语言中，有一个注解，这个注解可以在编译阶段检查这个方法是否是重写了父类的方法。</p><ul class="lvl-4"><li class="lvl-6">@Override注解是JDK5引入，用来标注方法，被标注的方法必须是重写父类的方法，如果不是重写的方法，编译器会报错。</li><li class="lvl-6">@Override注解只在编译阶段有用，和运行期无关。</li></ul></li><li class="lvl-4"><p>如果返回值类型是引用数据类型，那么这个返回值类型可以是原类型的子类型</p></li><li class="lvl-4"><p>访问权限不能变低，可以变高。</p></li><li class="lvl-4"><p>抛出异常不能变多，可以变少。（后面学习异常的时候再说。）</p></li><li class="lvl-4"><p>私有的方法，以及构造方法不能继承，因此他们不存在方法覆盖。</p></li><li class="lvl-4"><p>方法覆盖针对的是实例方法。和静态方法无关。（讲完多态再说。）</p></li><li class="lvl-4"><p>方法覆盖针对的是实例方法。和实例变量没有关系。</p></li></ul></li><li class="lvl-2"><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bird对继承过来的move()方法不满意。</span></span><br><span class="line"><span class="comment">     * Bird类有权利将move()方法进行重写/覆盖。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟儿在飞翔！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getObj</span><span class="params">(<span class="type">long</span> a, String b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="12-多态">12. 多态</h2><p><strong>关于基本数据类型之间的类型转换</strong></p><ul class="lvl-0"><li class="lvl-2"><p>第一种：小容量转换成大容量，叫做自动类型转换。</p><ul class="lvl-2"><li class="lvl-4"><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> i;</span><br></pre></td></tr></table></figure></li></ul></li><li class="lvl-2"><p>第二种：大容量转换成小容量，不能自动转换，必须添加强制类型转换符才行。叫做强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>)x;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>除了基本数据类型之间的类型转换之外，对于引用数据类型来说，也可以进行类型转换。</p><p>只不过不叫做自动类型转换和强制类型转换。我们一般称为向上转型和向下转型。</p></blockquote><p><strong>关于Java语言中的向上转型和向下转型：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>向上转型(upcasting)：子 —&gt; 父 （可以等同看做自动类型转换。）</p></li><li class="lvl-2"><p>向下转型(downcasting)：父 —&gt; 子 （可以等同看做强制类型转换。）</p></li><li class="lvl-2"><p>注意：<code>不管是向上还是向下转型，两种类型之间必须要有继承关系，编译器才能编译通过。这是最基本的大前提。</code></p></li></ul><p><strong>向上转型和向下转型</strong></p><ul class="lvl-0"><li class="lvl-2"><p>多态的向上转型 ： 编译看左边 ，运行看右边</p></li><li class="lvl-2"><p>其中在多态的向上转型中使用对象去调用方法时只能调用子类从父类那里继承的方法或者时重写的方法 ，而不能调用子类自己特有的方法。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这个程序中 ，所创建的对象可以去调用从父类那里继承下来的方法，而不能调用scratch()方法。除非使用向下转型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">// 写一下Cat自己的行为</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在爬树&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scratch</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>向下转型的使用前提是要先存在向上转型 ，利用强转使向上转换时穿件的对象进项创建新的对象来调用子类特有的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 向上转型</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        tom.eat();</span><br><span class="line">        tom.move();</span><br><span class="line">        tom.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 多态 —— 向下转型</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">jerry</span> <span class="operator">=</span> (Cat) tom;</span><br><span class="line">        jerry.scratch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>向上转型(upcasting)：</strong></p><ol><li class="lvl-3"><p>子 --&gt; 父</p></li><li class="lvl-4"><p>也可以等同看做自动类型转换</p></li><li class="lvl-4"><p>前提：两种类型之间要有继承关系</p></li><li class="lvl-4"><p>父类型引用指向子类型对象。这个就是多态机制最核心的语法。</p></li></ol><p><strong>java程序包括两个重要的阶段：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>第一阶段：编译阶段</p><ul class="lvl-2"><li class="lvl-4">在编译的时候，编译器只知道a2的类型是Animal类型。因此在编译的时候就会去Animal类中找move()方法。找到之后，绑定上去，此时发生静态绑定。能够绑定成功，表示编译通过。</li></ul></li><li class="lvl-2"><p>第二阶段：运行阶段</p><ul class="lvl-2"><li class="lvl-4">在运行的时候，堆内存中真实的java对象是Cat类型。所以move()的行为一定是Cat对象发生的。因此运行的时候就会自动调用Cat对象的move()方法。这种绑定称为运行期绑定/动态绑定。</li></ul></li></ul><blockquote><p>因为编译阶段是一种形态，运行的时候是另一种形态。因此得名：多态。</p></blockquote><p>‍</p><p><strong>instanceof 运算符的语法规则：</strong></p><ol><li class="lvl-3"><p>instanceof运算符的结果一定是：true/false</p></li><li class="lvl-3"><p>语法格式：<mark>(引用 instanceof 类型)</mark></p></li><li class="lvl-3"><p>例如：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(a <span class="keyword">instanceof</span> Cat)</span><br><span class="line"><span class="literal">true</span>表示什么？</span><br><span class="line">a引用指向的对象是Cat类型。</span><br><span class="line"><span class="literal">false</span>表示什么？</span><br><span class="line">a引用指向的对象不是Cat类型。</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>注意：<mark>做向下转型之前，为了避免ClassCastException的发生，一般建议使用instanceof进行判</mark></p></li></ol><p><strong>软件开发七大原则</strong></p><ul class="lvl-0"><li class="lvl-2"><p>软件开发原则旨在引导软件行业的从业者在代码设计和开发过程中，遵循一些基本原则，以达到高质量、易维护、易扩展、安全性强等目标。软件开发原则与具体的编程语言无关的，属于软件设计方面的知识。</p></li><li class="lvl-2"><p>软件开发七大原则？</p><ol><li class="lvl-5"><mark>开闭原则 (Open-Closed Principle，OCP)：一个软件实体应该对扩展开放，对修改关闭。即在不修改原有代码的基础上，通过添加新的代码来扩展功能。（最基本的原则，其它原则都是为这个原则服务的。）</mark></li><li class="lvl-5">单一职责原则：一个类只负责单一的职责，也就是一个类只有一个引起它变化的原因。</li><li class="lvl-5">里氏替换原则：子类对象可以替换其基类对象出现的任何地方，并且保证原有程序的正确性。</li><li class="lvl-5">接口隔离原则：客户端不应该依赖它不需要的接口。</li><li class="lvl-5">依赖倒置原则：高层模块不应该依赖底层模块，它们都应该依赖于抽象接口。换言之，面向接口编程。</li><li class="lvl-5">迪米特法则：一个对象应该对其它对象保持最少的了解。即一个类应该对自己需要耦合或调用的类知道得最少。</li><li class="lvl-5">合成复用原则：尽量使用对象组合和聚合，而不是继承来达到复用的目的。组合和聚合可以在获取外部对象的方法中被调用，是一种运行时关联，而继承则是一种编译时关联。</li></ol></li></ul><p><strong>多态在开发中的作用</strong></p><ul class="lvl-0"><li class="lvl-2"><p>降低程序的耦合度 ，提高程序的扩展能力</p></li><li class="lvl-2"><p>尽量使用多态 ，面向抽象编程 ，不要面向具体编程</p></li><li class="lvl-2"><p>代码演示：</p><ul class="lvl-2"><li class="lvl-4"><p>应用类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> North</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/2/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Master</span> <span class="variable">lisi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>();</span><br><span class="line">        lisi.feed(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>宠物类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> North</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/2/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>猫类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> North</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/2/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>狗类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> North</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/2/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗啃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>主人类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> North</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/2/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Pet pet)</span> &#123;</span><br><span class="line">        pet.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>‍</p><h2 id="13-super关键字">13. super关键字</h2><p><strong>super关键字介绍</strong></p><ul class="lvl-0"><li class="lvl-2"><p>this代表的是当前对象 ，super代表的是当前对象中的父类型特征</p></li><li class="lvl-2"><p>super 不能使用在静态上下文中 ，同时this也是</p></li><li class="lvl-2"><p>super大部分情况下是可以省略的，==其中不能省略的情况为：==​</p><ul class="lvl-2"><li class="lvl-4">当父类和子类中定义了相同的属性（实例变量）或者相同方法（实例方法）时，如果需要在子类中访问父类的属性或方法时，super.不能省略。</li></ul></li><li class="lvl-2"><p>this可以单独输出，super不能单独输出。</p></li><li class="lvl-2"><p>super(实参); 通过子类的构造方法调用父类的构造方法，==目的是为了完成父类型特征的初始化。==​</p></li><li class="lvl-2"><p>当一个构造方法第一行没有显示的调用“super(实参);”，也没有显示的调用“this(实参)”，系统会自动调用super()。因此一个类中的无参数构造方法建议显示的定义出来。</p></li><li class="lvl-2"><p><code>super(实参); 这个语法只能出现在构造方法第一行。</code>​</p></li><li class="lvl-2"><p>在Java语言中只要new对象，Object的无参数构造方法一定会执行。</p></li></ul><p>部分代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 重写的要求：要求在父类方法的执行基础之上额外再添加一些代码。</span></span><br><span class="line">System.out.println(<span class="string">&quot;do some开始执行了&quot;</span>);</span><br><span class="line"><span class="comment">// super. 什么时候不能省略？父中有，子中有相同的，但是想在子类中访问父的，必须添加 super.</span></span><br><span class="line"><span class="built_in">super</span>.doSome();</span><br><span class="line">System.out.println(<span class="string">&quot;do some方法执行结束了&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this本身是一个引用。所以可以直接输出。</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">// super本身不是一个引用。super只是代表了当前对象的父类型特征那部分。</span></span><br><span class="line"><span class="comment">// super 不能够单独的输出。</span></span><br><span class="line"><span class="comment">//System.out.println(super); // 编译报错。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-final关键字">14. final关键字</h2><p><strong>final关键字介绍</strong></p><ul class="lvl-0"><li class="lvl-2"><p>final表示最终的，不可变的。</p></li><li class="lvl-2"><p>final修饰的类无法被继承。</p></li><li class="lvl-2"><p>final修饰的变量一旦赋值，不能重新赋值。</p></li><li class="lvl-2"><p>final修饰的方法无法覆盖。</p></li><li class="lvl-2"><p>final修饰的实例变量。必须在构造方法执行完之前手动赋上值。（不允许采用系统默认值） 一般不存在这种情况。</p></li><li class="lvl-2"><p>final修饰的实例变量一般和static联合使用，这就是著名的：常量。</p></li><li class="lvl-2"><p>final修饰的引用：一旦指向了某个对象，则不能再指向其它对象。但指向的对象内部的数据是可以修改的。</p></li></ul><p><strong>常量的命名：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">MATH_PAI</span> <span class="operator">=</span> <span class="number">3.1415926</span>;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>常量的定义：<mark>public static final 数据类型 常量名 = 常量值;</mark></p></li><li class="lvl-2"><p>常量名的命名规范：全部单词大写，每个单词采用“_”衔接。</p></li></ul><h2 id="15-抽象类">15. 抽象类</h2><p><strong>什么时候考虑将类定义为抽象类？</strong></p><ul class="lvl-0"><li class="lvl-2"><p><code>如果类中有些方法无法实现或者没有意义，可以将方法定义为抽象方法。类定义为抽象类。</code>​这样在抽象类中只提供公共代码，具体的实现强行交给子类去做。</p></li><li class="lvl-2"><p>比如一个Person类有一个问候的方法greet()，但是不同国家的人问候的方式不同，因此greet()方法具体实现应该交给子类。再比如主人喂养宠物的例子中的宠物Pet，Pet中的eat()方法的方法体就是没有意义的。</p></li></ul><p><strong>抽象类如何定义？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> class 类名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>抽象类有构造方法，但无法实例化。抽象类的构造方法是给子类使用的。</p></blockquote><p><strong>抽象方法如何定义？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> 方法返回值类型 方法名(形参);</span><br></pre></td></tr></table></figure><blockquote><p>抽象类中不一定有抽象方法，但如果有抽象方法那么类要求必须是抽象类。</p></blockquote><p>一个非抽象的类继承抽象类，要求必须将抽象方法进行实现/重写。</p><p>abstract关键字不能和private，final，static关键字共存。</p><h2 id="16-接口">16. 接口</h2><p><strong>接口的简单介绍</strong></p><ul class="lvl-0"><li class="lvl-2"><p>接口（interface）在Java中表示一种规范或契约，它定义了一组抽象方法和常量，用来描述一些实现这个接口的类应该具有哪些行为和属性。</p></li><li class="lvl-2"><p>接口和类一样，也是一种引用数据类型</p></li><li class="lvl-2"><p>接口怎么定义？[修饰符列表] interface 接口名{}</p></li><li class="lvl-2"><p>抽象类是半抽象的，接口是完全抽象的。接口没有构造方法，也无法实例化</p></li><li class="lvl-2"><p>(JDK8之前的语法规则) 接口中只能定义：常量+抽象方法。接口中的常量的static final可以省略。接口中的抽象方法的abstract可以省略。接口中所有的方法和变量都是public修饰的</p></li><li class="lvl-2"><p>接口和接口之间可以多继承</p></li><li class="lvl-2"><p>类和接口的关系我们叫做实现（这里的实现也可以等同看做继承）。使用implements关键字进行接口的实现。</p></li><li class="lvl-2"><p>一个非抽象的类实现接口必须将接口中所有的抽象方法全部实现（强制要求的，必须的，要不然编译器报错。）</p></li><li class="lvl-2"><p>一个类可以实现多个接口。语法是：class 类 implements 接口A,接口B{}</p></li><li class="lvl-2"><p>Java8之后，接口中允许出现默认方法和静态方法(JDK8新特性)</p><ul class="lvl-2"><li class="lvl-4"><p>默认方法：</p><ul class="lvl-4"><li class="lvl-6">引入默认方式是为了解决接口演变问题：接口可以定义抽象方法，但是不能实现这些方法。</li><li class="lvl-6">所有实现接口的类都必须实现这些抽象方法。这会导致接口升级的问题：当我们向接口添加或删除一个抽象方法时，</li><li class="lvl-6">这会破坏该接口的所有实现，并且所有该接口的用户都必须修改其代码才能适应更改。这就是所谓的&quot;接口演变&quot;问题</li></ul></li><li class="lvl-4"><p>静态方法：</p><ul class="lvl-4"><li class="lvl-6">注意：java中规定，在JDK8之后，接口中可以一定静态方法，但是这个静态方法，只能通过“该接口名”去调用的。别的都无法调用。</li></ul></li></ul></li><li class="lvl-2"><p>在JDK8之后引入接口可以定义静态方法，实际上想表达一个意思：接口也可以作为工具来使用了。</p></li><li class="lvl-2"><p>JDK9之后允许接口中定义私有的实例方法（为默认方法服务的）和私有的静态方法（为静态方法服务的）</p></li><li class="lvl-2"><p>所有的接口隐式的继承Object。因此接口也可以调用Object类的相关方法</p></li></ul><p><strong>接口的作用</strong></p><ul class="lvl-0"><li class="lvl-2"><p>面向接口调用的称为：接口调用者</p></li><li class="lvl-2"><p>面向接口实现的称为：接口实现者</p></li><li class="lvl-2"><p>调用者和实现者通过接口达到了解耦合。也就是说调用者不需要关心具体的实现者，实现者也不需要关心具体的调用者，双方都遵循规范，面向接口进行开发。</p></li><li class="lvl-2"><p>==面向抽象编程，面向接口编程，可以降低程序的耦合度，提高程序的扩展力。==​</p></li><li class="lvl-2"><p>例如定义一个Usb接口，提供read()和write()方法，通过read()方法读，通过write()方法写：</p><ul class="lvl-2"><li class="lvl-4"><p>定义一个电脑类Computer，它是调用者，面向Usb接口来调用。</p></li><li class="lvl-4"><p>Usb接口的实现可以有很多，例如：打印机（Printer），硬盘（HardDrive）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">conn</span><span class="params">(Usb usb)</span>&#123;</span><br><span class="line">  </span><br><span class="line">usb.read();</span><br><span class="line">usb.write();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li class="lvl-2"><p>再想想，我们平时去饭店吃饭，这个场景中有没有接口呢？食谱菜单就是接口。顾客是调用者。厨师是实现者。</p></li></ul><p><strong>接口与抽象类如何选择</strong></p><ul class="lvl-0"><li class="lvl-2"><p>抽象类和接口虽然在代码角度都能达到同样的效果，但适用场景不同：</p><ul class="lvl-2"><li class="lvl-4">抽象类主要适用于公共代码的提取。当多个类中有共同的属性和方法时，为了达到代码的复用，建议为这几个类提取出来一个父类，在该父类中编写公共的代码。如果有一些方法无法在该类中实现，可以延迟到子类中实现。这样的类就应该使用抽象类。</li><li class="lvl-4">接口主要用于功能的扩展。例如有很多类，一些类需要这个方法，另外一些类不需要这个方法时，可以将该方法定义到接口中。需要这个方法的类就去实现这个接口，不需要这个方法的就可以不实现这个接口。接口主要规定的是行为。</li></ul></li></ul><h2 id="17-UML">17. UML</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240214101255-rl5xbtp.png" alt="image">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240214101313-8lva3y9.png" alt="image">​</p><h2 id="18-访问控制权限">18. 访问控制权限</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240214101348-e839l6o.png" alt="image">​</p><ul class="lvl-0"><li class="lvl-2"><p>private：私有的，只能在本类中访问。</p></li><li class="lvl-2"><p>缺省：默认的，同一个包下可以访问。</p></li><li class="lvl-2"><p>protected：受保护的，子类中可以访问。（受保护的通常就是给子孙用的。）</p></li><li class="lvl-2"><p>public：公共的，在任何位置都可以访问。</p><p>‍</p></li><li class="lvl-2"><p>类中的属性和方法访问权限共有四种：private、缺省、protected和public。</p></li><li class="lvl-2"><p>类的访问权限只有两种：public和 缺省。</p></li><li class="lvl-2"><p>访问权限控制符不能修饰局部变量。</p></li></ul><h2 id="19-Object-类">19. Object 类</h2><ul class="lvl-0"><li class="lvl-2"><p>java.lang.Object是所有类的超类。java中所有类都实现了这个类中的方法。</p></li><li class="lvl-2"><p>现阶段Object类中需要掌握的方法：</p><ul class="lvl-2"><li class="lvl-4">toString：将java对象转换成字符串。</li><li class="lvl-4">equals：判断两个对象是否相等。</li></ul></li><li class="lvl-2"><p>现阶段Object类中需要了解的方法：</p><ul class="lvl-2"><li class="lvl-4"><p>hashCode：返回一个对象的哈希值，通常作为在哈希表中查找该对象的键值。Object类的默认实现是根据对象的内存地址生成一个哈希码（即将对象的内存地址转换为整数作为哈希值）。hashCode()方法是为了HashMap、Hashtable、HashSet等集合类进行优化而设置的，以便更快地查找和存储对象。</p></li><li class="lvl-4"><p>finalize：当java对象被回收时，由GC自动调用被回收对象的finalize方法，通常在该方法中完成销毁前的准备。</p></li><li class="lvl-4"><p>clone：对象的拷贝。（浅拷贝，深拷贝）</p><ul class="lvl-4"><li class="lvl-6">protected修饰的只能在同一个包下或者子类中访问。</li><li class="lvl-6">只有实现了Cloneable接口的对象才能被克隆。</li></ul></li></ul></li></ul><p><strong>Object类中的toString()方法</strong></p><ol><li class="lvl-3"><p>Object类设计toString()方法的目的是什么？</p><ul class="lvl-2"><li class="lvl-6">这个方法的作用是：将java对象转换成字符串的表示形式。</li></ul></li><li class="lvl-3"><p>Object类中toString()方法的默认实现是怎样的？</p><ul class="lvl-2"><li class="lvl-6"><p>默认实现是：完整类名 + @ + 十六进制的数字</p></li><li class="lvl-6"><p>这个输出结果可以等同看做一个java对象的内存地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>Object类中的equals方法：</strong></p><ol><li class="lvl-3"><p>Object类设计equals方法的作用是什么？目的是什么？</p><ul class="lvl-2"><li class="lvl-6"><p>equals方法的作用是：判断两个对象是否相等。</p></li><li class="lvl-6"><p>equals方法的返回值是true/false</p><ul class="lvl-4"><li class="lvl-8">true代表两个对象相等。</li><li class="lvl-8">false代表两个对象不相等。</li></ul></li></ul></li><li class="lvl-3"><p>Object类中对equals方法的默认实现是怎样的？</p><ul class="lvl-2"><li class="lvl-6"><p>a.equals(b) 表面是a和b的比较。实际上方法体当中是：this和obj的比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li class="lvl-3"><p>关于 == 运算符的运算规则：</p><ul class="lvl-2"><li class="lvl-6"><code>== 永远只有一个运算规则，永远比较的是变量中保存的值之间的比较。</code>​</li><li class="lvl-6">只不过有的时候这个值是基本数据类型。有的时候这个值是对象的内存地址。</li></ul></li><li class="lvl-3"><p>equals方法为什么要重写？</p><ul class="lvl-2"><li class="lvl-6">因为Object类中的equals方法在进行比较的时候，比较的是两个java对象的内存地址。</li><li class="lvl-6">我们希望比较的是对象的内容。只要对象的内容相等，则认为是相同的。</li></ul></li><li class="lvl-3"><p>字符串的比较不能使用 <code>==</code>​, 必须使用equals方法进行比较</p></li><li class="lvl-3"><p>字符串String类型已经重写了equals方法</p></li></ol><p><strong>关于Object类的hashCode()方法：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>hashCode：返回一个对象的哈希值，通常作为在哈希表中查找该对象的键值。</p></li><li class="lvl-2"><p>Object类的默认实现是根据对象的内存地址生成一个哈希码（即将对象的内存地址转换为整数作为哈希值）。</p></li><li class="lvl-2"><p>hashCode()方法是为了HashMap、Hashtable、HashSet等集合类进行优化而设置的，以便更快地查找和存储对象</p></li><li class="lvl-2"><p>hashCode()方法在Object类中的默认实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>这是一个本地方法，底层调用了C++写的动态链接库程序：xxx.dll</p></li></ul></li></ul><p><strong>关于Object类中的clone()方法：</strong></p><ol><li class="lvl-3"><p>clone方法作用：对象拷贝。通常在开发中需要保护原对象数据结构。通常复制一份，生成一个新对象，对新对象进行操作。</p></li><li class="lvl-3"><p>Object类中的默认实现：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException;</span><br><span class="line"> *      受保护的方法，专门给子类使用的。</span><br><span class="line"> *      本地方法。</span><br><span class="line"> *      底层调用C++程序已经可以完成对象的创建了。</span><br><span class="line"> *      我们现在要解决的问题是：怎么调用这个方法。</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>怎么解决clone()方法的调用问题？</p><ul class="lvl-2"><li class="lvl-6">在子类中重写该clone()方法。</li><li class="lvl-6">为了保证clone()方法在任何位置都可以调用，建议将其修饰符修改为：public</li></ul></li><li class="lvl-3"><p>凡事参加克隆的对象，必须实现一个标志接口：java.lang.Cloneable</p><ol><li class="lvl-7"><p>java中接口包括两大类：</p><ol><li class="lvl-11">一类是：起到标志的作用，标志型接口。</li><li class="lvl-11">另一类是：普通接口。</li></ol></li></ol></li></ol><p><strong>内部类</strong></p><ul class="lvl-0"><li class="lvl-2"><p>什么是内部类？</p><ul class="lvl-2"><li class="lvl-4">定义在一个类中的类。</li></ul></li><li class="lvl-2"><p>什么时候使用内部类？</p><ul class="lvl-2"><li class="lvl-4">一个类用到了另外一个类，而这两个类的联系比较密切，但是如果把这两个类定义为独立的类，不但增加了类的数量，也不利于代码的阅读和维护。</li><li class="lvl-4">内部类可以访问外部类的私有成员，这样可以将相关的类和接口隐藏在外部类的内部，从而提高封装性。</li><li class="lvl-4">匿名内部类是指没有名字的内部类，通常用于定义一个只使用一次的类，比如在事件处理中。</li></ul></li><li class="lvl-2"><p>内部类包括哪几种？</p><ul class="lvl-2"><li class="lvl-4"><p>静态内部类：和静态变量一个级别</p><ul class="lvl-4"><li class="lvl-6">静态内部类如何实例化：OuterClass.StaticInnerClass staticInnerClass = new OuterClass.StaticInnerClass();</li><li class="lvl-6">无法直接访问外部类中实例变量和实例方法。</li></ul></li><li class="lvl-4"><p>实例内部类：和实例变量一个级别</p><ul class="lvl-4"><li class="lvl-6">实例内部类如何实例化：OuterClass.InnerClass innerClass = new OuterClass().new InnerClass();</li><li class="lvl-6">可以直接访问外部类中所有的实例变量，实例方法，静态变量，静态方法。</li></ul></li><li class="lvl-4"><p>局部内部类：和局部变量一个级别</p><ul class="lvl-4"><li class="lvl-6">局部内部类方外类外部的局部变量时，局部变量需要被final修饰。</li><li class="lvl-6">从JDK8开始，不需要手动添加final了，但JVM会自动添加。</li></ul></li><li class="lvl-4"><p>匿名内部类：特殊的局部内部类，没有名字，只能用一次。</p><ul class="lvl-4"><li class="lvl-6">匿名内部类：特殊的局部内部类，没有名字，只能用一次。</li></ul></li></ul></li></ul><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：数组</title>
      <link href="/posts/a9867134.html"/>
      <url>/posts/a9867134.html</url>
      
        <content type="html"><![CDATA[<h1>第四章：数组</h1><h2 id="1-数组的概述">1. 数组的概述</h2><ul class="lvl-0"><li class="lvl-2"><p>数组的概念：</p><ul class="lvl-2"><li class="lvl-4"><p>数组：数组是多个相同类型按一定顺序排列的集合 ，并使用一个名字命名并通过编号的方式对这些数据进行统一管理</p></li><li class="lvl-4"><p>数组中的概念</p><ul class="lvl-4"><li class="lvl-6">数组名</li><li class="lvl-6">下标(或索引)</li><li class="lvl-6">元素</li><li class="lvl-6">数组的长度</li></ul></li></ul></li><li class="lvl-2"><p>数组的特点：</p><ul class="lvl-2"><li class="lvl-4">数组本身是<code>引用数据类型</code>​，而数组中的元素可以是<code>任何数据类型</code>​，包括基本数据类型和引用数据类型。</li><li class="lvl-4">创建数组对象会在内存中开辟一整块<code>连续的空间</code>​。占据的空间的大小，取决于数组的长度和数组中元素的类型。</li><li class="lvl-4">数组中的元素在内存中是依次紧密排列的，有序的。</li><li class="lvl-4">数组，一旦初始化完成，其长度就是确定的。数组的<code>长度一旦确定，就不能修改</code>​。</li><li class="lvl-4">我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。</li><li class="lvl-4">数组名中引用的是这块连续空间的首地址</li></ul></li><li class="lvl-2"><p>数组的分类</p><ul class="lvl-2"><li class="lvl-4"><p>按照元素类型分：</p><ul class="lvl-4"><li class="lvl-6"><span data-type="text" style="color: var(--b3-font-color4);">基本数据类型元素的数组</span>：每个元素位置存储基本数据类型的值</li><li class="lvl-6"><span data-type="text" style="color: var(--b3-font-color2);">引用数据类型元素的数组</span>：每个元素位置存储对象（本质是存储对象的首地址）（在面向对象部分讲解）</li></ul></li><li class="lvl-4"><p>按照维度分：</p><ul class="lvl-4"><li class="lvl-6"><span data-type="text" style="color: var(--b3-font-color3);">一维数组</span>：存储一组数据</li><li class="lvl-6"><span data-type="text" style="color: var(--b3-font-color1);">二维数组</span>：存储多组数据，相当于二维表，一行代表一组数据，只是这里的二维表每一行长度不要求一样。</li></ul></li></ul></li></ul><h2 id="2-一维数组的使用">2. 一维数组的使用</h2><h3 id="2-1-一维数组的声明">2.1 一维数组的声明</h3><ul class="lvl-0"><li class="lvl-2"><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//推荐</span></span><br><span class="line">元素的数据类型[] 一维数组的名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">元素的数据类型  一维数组名[];</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>数组的声明 ，需要明确：</p><ul class="lvl-2"><li class="lvl-4"><span data-type="text" style="color: var(--b3-font-color1);">数组的维度</span>：在Java中数组的符号是[ ]，[ ]表示一维，[ ][ ]表示二维。</li><li class="lvl-4"><span data-type="text" style="color: var(--b3-font-color3);">数组的元素类型</span>：即创建的数组容器可以存储什么数据类型的数据。元素的类型可以是任意的Java的数据类型。例如：int、String、Student等。</li><li class="lvl-4"><span data-type="text" style="background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);">数组名</span>：就是代表某个数组的标识符，数组名其实也是变量名，按照变量的命名规范来命名。数组名是个引用数据类型的变量，因为它代表一组数据。</li></ul></li></ul><h3 id="2-2-一维数组的初始化">2.2 一维数组的初始化</h3><p><span data-type="text" style="color: var(--b3-font-color4);">静态初始化：</span></p><ul class="lvl-0"><li class="lvl-2"><p>如果数组变量的初始化和数组元素的赋值操作同时进行 ，那就称为数组初始化</p></li><li class="lvl-2"><p>静态初始化，本质是用静态数据为数组初始化，此时数组的长度由静态数据的个数决定</p></li><li class="lvl-2"><p><span data-type="text" style="color: var(--b3-font-color3);">一维数组声明和静态初始化格式1：</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,...&#125;;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">数据类型[] 数组名;</span><br><span class="line">数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,...&#125;;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>new：关键字，创建数组使用的关键字。因为数组本身是引用数据类型，所以要用new创建数组实体。</p></li><li class="lvl-2"><p><span data-type="text" style="color: var(--b3-font-color3);">一维数组声明和静态初始化格式2：</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3.</span>..&#125;;<span class="comment">//必须在一个语句中完成，不能分成两个语句写</span></span><br></pre></td></tr></table></figure></li></ul><p><span data-type="text" style="color: var(--b3-font-color4);">动态初始化：</span></p><ul class="lvl-0"><li class="lvl-2"><p>数组变量的初始化和数组元素的赋值操作分开进行，即为动态初始化。</p></li><li class="lvl-2"><p>动态初始化中，只确定了元素的个数（即数组的长度），而元素值此时只是默认值，还并未真正赋自己期望的值。真正期望的数据需要后续单独一个一个赋值。</p></li><li class="lvl-2"><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数组存储的元素的数据类型[] 数组名字 = <span class="keyword">new</span> 数组存储的元素的数据类型[长度];</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">数组存储的数据类型[] 数组名字;</span><br><span class="line">数组名字 = <span class="keyword">new</span> 数组存储的数据类型[长度];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例：动态初始化的写法</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>[长度]：数组的长度，表示数组容器中可以最多存储多少个元素。</p></li><li class="lvl-2"><p><strong>注意：数组有定长特性，长度一旦指定，不可更改。</strong> 和水杯道理相同，买了一个2升的水杯，总容量就是2升是固定的。</p></li></ul><h3 id="2-3-一维数组的使用">2.3 一维数组的使用</h3><p><span data-type="text" style="color: var(--b3-font-color4);">数组的长度：</span></p><ul class="lvl-0"><li class="lvl-2"><p>数组元素的总个数，即数组的长度</p></li><li class="lvl-2"><p>每个数组都有一个属性length指明它的长度 。如：<span data-type="text" style="color: var(--b3-font-color3);">arr.length</span> 指明数组arr的长度(即元素个数)</p></li><li class="lvl-2"><p>每个数组都有长度，而且一旦初始化，其长度就是确定，且不可变的</p></li></ul><p><span data-type="text" style="color: var(--b3-font-color4);">数组元素的引用：</span>数组名[索引或下标]</p><p>数组的下标范围：java中数组的小标是从[0] 开始 ， 下标范围是[0 , 数组长度 - 1] ， 即[0 , 数组名.length - 1]</p><p><span data-type="text" style="color: var(--b3-font-color7);">数组元素下标可以是整形常量或整形表达式</span></p><h3 id="2-4-一维数组的遍历">2.4 一维数组的遍历</h3><blockquote><p>遍历：将数组中的每个元素分别取出来就是遍历。for循环与数组的遍历是绝配</p></blockquote><h3 id="2-5-数组元素的默认值">2.5 数组元素的默认值</h3><p>数组是引用类型 ，当使用动态初始化方式创建数组时 ，元素只有默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest6</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span>&#123;</span><br><span class="line"><span class="type">int</span> a[]= <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; </span><br><span class="line">System.out.println(a[<span class="number">3</span>]); <span class="comment">//a[3]的默认值为0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240120153059-ljjarm7.png" alt="image">​</p><h2 id="3-一维数组内存分析">3. 一维数组内存分析</h2><h3 id="3-1-Java虚拟机的内存划分">3.1 Java虚拟机的内存划分</h3><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240120153208-b3q0fg9.png" alt="image">​</p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>​<code>虚拟机栈</code>​</td><td>用于存储正在执行的每个Java方法的局部变量表等。局部变量表存放了编译期可知长度<br />的各种基本数据类型、对象引用，方法执行完，自动释放。</td></tr><tr><td>​<code>堆内存</code>​</td><td>存储对象（包括数组对象），new来创建的，都存储在堆内存。</td></tr><tr><td>​<code>方法区</code>​</td><td>存储已被虚拟机加载的类信息、常量、（静态变量）、即时编译器编译后的代码等数据。</td></tr><tr><td>本地方法栈</td><td>当程序中调用了native的本地方法时，本地方法执行期间的内存区域</td></tr><tr><td>程序计数器</td><td>程序计数器是CPU中的寄存器，它包含每一个线程下一条要执行的指令的地址</td></tr></tbody></table><h2 id="4-多维数组的使用">4. 多维数组的使用</h2><p><span data-type="text" style="color: var(--b3-font-color3);">声明与初始化</span></p><ul class="lvl-0"><li class="lvl-2"><p>二位数组声明的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//推荐</span></span><br><span class="line">元素的数据类型[][] 二维数组的名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">元素的数据类型  二维数组名[][];</span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">元素的数据类型[]  二维数组名[];</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>静态初始化</p><ul class="lvl-2"><li class="lvl-4"><p>格式：<span data-type="text" style="color: var(--b3-font-color4);"><input type="checkbox" id="checkbox0"><label for="checkbox0">[ ] arr = new int [ ] [ ] {3 , 8 , 2} , {2 , 7} , {9 , 0 , 1 , 6};</label></span></p></li><li class="lvl-4"><p>解释：</p><p>定义一个名称为arr的二维数组，二维数组中有三个一维数组</p><ul class="lvl-4"><li class="lvl-6"><p>每一个一维数组中具体元素也都已初始化</p><ul class="lvl-6"><li class="lvl-8">第一个一维数组 arr[0] = {3,8,2};</li><li class="lvl-8">第二个一维数组 arr[1] = {2,7};</li><li class="lvl-8">第三个一维数组 arr[2] = {9,0,1,6};</li></ul></li><li class="lvl-6"><p>第三个一维数组的长度表示方式：arr[2].length;</p></li><li class="lvl-6"><p><input type="checkbox" id="checkbox1"><label for="checkbox1">x , y[ ] ; x 是一维数组 ，y 是二维数组</label></p></li></ul></li></ul></li><li class="lvl-2"><p>动态初始化：</p><ul class="lvl-2"><li class="lvl-4"><p>格式1 ： 规则二维表 ，每一行的列数是想同的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）确定行数和列数</span></span><br><span class="line">元素的数据类型[][] 二维数组名 = <span class="keyword">new</span> 元素的数据类型[m][n];</span><br><span class="line"><span class="comment">//其中，m:表示这个二维数组有多少个一维数组。或者说一共二维表有几行</span></span><br><span class="line"><span class="comment">//其中，n:表示每一个一维数组的元素有多少个。或者说每一行共有一个单元格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时创建完数组，行数、列数确定，而且元素也都有默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）再为元素赋新值</span></span><br><span class="line">二维数组名[行下标][列下标] = 值;</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>格式2 ：不规则 ，每一行的列数不一样</p></li></ul><p>‍</p></li></ul><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：流程控制语句</title>
      <link href="/posts/1fcb7e57.html"/>
      <url>/posts/1fcb7e57.html</url>
      
        <content type="html"><![CDATA[<h1>第三章：流程控制语句</h1><h2 id="1-顺序结构">1. 顺序结构</h2><ul class="lvl-0"><li class="lvl-2"><p>特点：从上到下依次执行 ，中间没有任何判断和跳转</p></li></ul><h2 id="2-分支语句">2. 分支语句</h2><h4 id="2-1-span-data-type-text-style-color-var-b3-font-color2-if-else-条件判断结构-span">2.1 <span data-type="text" style="color: var(--b3-font-color2);">if-else 条件判断结构</span></h4><ul class="lvl-0"><li class="lvl-2"><p>结构一： 单分支条件判断 ：if</p><ul class="lvl-2"><li class="lvl-4"><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>说明：条件表达式必须是布尔表达式(关系表达式或逻辑表达式)或布尔变量</p></li></ul></li><li class="lvl-2"><p>结构二：双分支条件判断： if-else</p><ul class="lvl-2"><li class="lvl-4"><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123; </span><br><span class="line">  语句块<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li class="lvl-2"><p>格式三： 多分支条件判断： if…else if…else</p><ul class="lvl-2"><li class="lvl-4"><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">  语句块<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">  语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (条件表达式n) &#123;</span><br><span class="line"> 语句块n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  语句块n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>说明：一旦表达式为true , 则进入执行相应的语句块，执行完成对应的语句块之后 ，就跳出当前结构</p></li><li class="lvl-4"><p>注意：</p><ul class="lvl-4"><li class="lvl-6">当条件表达式之间是“<code>互斥</code>​”关系时（即彼此没有交集），条件判断语句及执行语句间顺序无所谓。</li><li class="lvl-6">当条件表达式之间是“<code>包含</code>​”关系时，“<code>小上大下 / 子上父下</code>​”，否则范围小的条件表达式将不可能被执行。</li></ul></li></ul></li></ul><h4 id="2-2-span-data-type-text-style-color-var-b3-font-color2-if…else-嵌套-span">2.2 <span data-type="text" style="color: var(--b3-font-color2);">if…else 嵌套</span></h4><ul class="lvl-0"><li class="lvl-2"><p>执行的特点</p><ol><li class="lvl-5">如果是嵌套在if语句块中的，只有当外部的if条件满足，才会去判断内部的条件</li><li class="lvl-5">如果是嵌套在else语句块中的，只有当外部的if条件不满足，进入else后，才会去判断内部的条件</li></ol></li></ul><p><span data-type="text" style="color: var(--b3-font-color4);">其他说明：</span></p><ul class="lvl-0"><li class="lvl-2"><p>语句块只有一条执行语句时，一对<code>&#123;&#125;可以省略</code>​，但建议保留</p></li><li class="lvl-2"><p>当 if-else 结构是 “多选一”时 ，最后 else是可选的 ， 根据需要可以省略</p></li></ul><h4 id="2-3-switch-case-选择结构">2.3 switch-case 选择结构</h4><ul class="lvl-0"><li class="lvl-2"><p>基本语法</p><ul class="lvl-2"><li class="lvl-4"><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//break;</span></span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//break; </span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   [<span class="keyword">default</span>:</span><br><span class="line">        语句块n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>使用注意点：</p><ul class="lvl-4"><li class="lvl-6">switch(表达式)中表达式的值必须是下述几种类型之一：byte，short，char，int，枚举 (jdk 5.0)，String (jdk 7.0)；</li><li class="lvl-6"><mark>case子句中的值必须是常量</mark>​，不能是变量名或不确定的表达式值或范围；</li><li class="lvl-6">同一个switch语句，所有case子句中的常量值互不相同；</li><li class="lvl-6">break语句用来在执行完一个case分支后使程序跳出switch语句块；<br>如果没有break，程序会顺序执行到switch结尾；</li><li class="lvl-6">default子句是可选的。同时，位置也是灵活的。当没有匹配的case时，执行default语句。</li></ul></li></ul></li><li class="lvl-2"><p>利用case的穿透性：</p><ul class="lvl-2"><li class="lvl-4">在switch语句中，如果case的后面不写break，将出现穿透现象，也就是一旦匹配成功，不会在判断下一个case的值，直接向后运行，直到遇到break或者整个switch语句结束，执行终止。</li></ul></li></ul><h4 id="2-4-if-else-语句与switch-case语句比较">2.4 if-else 语句与switch-case语句比较</h4><ul class="lvl-0"><li class="lvl-2"><p>结论：凡是使用switch-case的结构都可以转换为if-else结构。反之，不成立。</p></li><li class="lvl-2"><p>开发经验：如果既可以使用switch-case，又可以使用if-else，建议使用switch-case。因为效率稍高。</p></li><li class="lvl-2"><p>细节对比：</p><ul class="lvl-2"><li class="lvl-4"><p>if-else语句优势</p><ul class="lvl-4"><li class="lvl-6">if语句的条件是一个布尔类型值，if条件表达式为true则进入分支，可以用于范围的判断，也可以用于等值的判断，<code>使用范围更广</code>​。</li><li class="lvl-6">switch语句的条件是一个常量值（byte,short,int,char,枚举,String），只能判断某个变量或表达式的结果是否等于某个常量值，<code>使用场景较狭窄</code>​。</li></ul></li><li class="lvl-4"><p>switch语句优势</p><ul class="lvl-4"><li class="lvl-6">当条件是判断某个变量或表达式是否等于某个固定的常量值时，使用if和switch都可以，习惯上使用switch更多。因为<code>效率稍高</code>​。当条件是区间范围的判断时，只能使用if语句。</li><li class="lvl-6">使用switch可以利用<code>穿透性</code>​，同时执行多个分支，而if…else没有穿透性。</li></ul></li></ul></li></ul><h2 id="3-循环语句">3. 循环语句</h2><ul class="lvl-0"><li class="lvl-2"><p>理解：循环语句具有在某些条件下满足的情况下 ，反复执行特定代码的功能</p></li><li class="lvl-2"><p>循环结构分类：</p><ul class="lvl-2"><li class="lvl-4">for循环</li><li class="lvl-4">while循环</li><li class="lvl-4">do-while循环</li></ul></li><li class="lvl-2"><p>循环结构四要素</p><ul class="lvl-2"><li class="lvl-4">初始部分</li><li class="lvl-4">循环条件部分</li><li class="lvl-4">循环体部分</li><li class="lvl-4">迭代部分</li></ul></li></ul><h4 id="3-1-for循环">3.1 for循环</h4><ul class="lvl-0"><li class="lvl-2"><p>基本语法：</p></li><li class="lvl-2"><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (①初始化部分; ②循环条件部分; ④迭代部分)｛</span><br><span class="line">         ③循环体部分;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><strong>执行过程：</strong> ①-②-③-④-②-③-④-②-③-④-…-②</p></li><li class="lvl-2"><p>图示</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240116121208-l5klzbz.png" alt="image"></p></li><li class="lvl-2"><p>说明：</p><ul class="lvl-2"><li class="lvl-4">for(;;)中的两个；不能多也不能少</li><li class="lvl-4">①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔</li><li class="lvl-4">②循环条件部分为boolean类型表达式，当值为false时，退出循环</li><li class="lvl-4">④可以有多个变量更新，用逗号分隔</li></ul></li></ul><h4 id="3-2-while-循环">3.2 while 循环</h4><ul class="lvl-0"><li class="lvl-2"><p>基本语法</p><ul class="lvl-2"><li class="lvl-4"><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①初始化部分</span><br><span class="line"><span class="keyword">while</span>(②循环条件部分)｛</span><br><span class="line">    ③循环体部分;</span><br><span class="line">    ④迭代部分;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p><strong>执行过程：</strong> ①-②-③-④-②-③-④-②-③-④-…-②</p></li><li class="lvl-4"><p>图示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240116122000-1xvk6bl.png" alt="image"></p></li><li class="lvl-4"><p>说明：</p><ul class="lvl-4"><li class="lvl-6">while(循环条件)中循环条件必须是boolean类型。</li><li class="lvl-6">注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。</li><li class="lvl-6">for循环和while循环可以相互转换。二者没有性能上的差别。实际开发中，根据具体结构的情况，选择哪个格式更合适、美观。</li><li class="lvl-6">for循环与while循环的区别：初始化条件部分的作用域不同。</li></ul></li></ul></li></ul><h4 id="3-3-do-while-循环">3.3 do-while 循环</h4><ul class="lvl-0"><li class="lvl-2"><p>基本语法</p><ul class="lvl-2"><li class="lvl-4"><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①初始化部分;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">③循环体部分</span><br><span class="line">④迭代部分</span><br><span class="line">&#125;<span class="keyword">while</span>(②循环条件部分); </span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>执行过程：①-③-④-②-③-④-②-③-④-…-②</p></li><li class="lvl-4"><p>图示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240117112328-8c3hhrd.png" alt="image"></p></li><li class="lvl-4"><p>说明：</p><ul class="lvl-4"><li class="lvl-6">结尾while(循环条件)中循环条件必须是boolean类型</li><li class="lvl-6">do{}while();最后有一个分号</li><li class="lvl-6">do-while结构的循环体语句是至少会执行一次，这个和for和while是不一样的</li><li class="lvl-6">循环的三个结构for、while、do-while三者是可以相互转换的。</li></ul></li></ul></li></ul><h4 id="3-4-对比三种循环结构">3.4 对比三种循环结构</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>三种循环结构都具有四个要素：</strong></p><ul class="lvl-2"><li class="lvl-4">循环变量的初始化条件</li><li class="lvl-4">循环条件</li><li class="lvl-4">循环体语句块</li><li class="lvl-4">循环变量的修改的迭代表达式</li></ul></li><li class="lvl-2"><p><strong>从循环次数角度分析</strong></p><ul class="lvl-2"><li class="lvl-4">do-while循环至少执行一次循环体语句。</li><li class="lvl-4">for和while循环先判断循环条件语句是否成立，然后决定是否执行循环体。</li></ul></li><li class="lvl-2"><p><strong>如何选择</strong></p><ul class="lvl-2"><li class="lvl-4">遍历有明显的循环次数（范围）的需求，选择for循环</li><li class="lvl-4">遍历没有明显的循环次数（范围）的需求，选择while循环</li><li class="lvl-4">如果循环体语句块至少执行一次，可以考虑使用do-while循环</li><li class="lvl-4">本质上：三种循环之间完全可以互相转换，都能实现循环的功能</li></ul></li></ul><h4 id="3-5-无限循环">3.5 无限循环</h4><ul class="lvl-0"><li class="lvl-2"><p>基本语法</p><ul class="lvl-2"><li class="lvl-4"><p>语法格式：最简单的无限循环格式：==while(true) , for( ; ;)==​</p></li><li class="lvl-4"><p>适用场景</p><ul class="lvl-4"><li class="lvl-6">开发中，有时并不确定需要循环多少次，需要根据循环体内部某些条件，来控制循环的结束（使用break）。</li><li class="lvl-6">如果此循环结构不能终止，则构成了死循环！开发中要避免出现死循环。</li></ul></li></ul></li></ul><h4 id="3-6-嵌套循环">3.6 嵌套循环</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>所谓嵌套循环</strong>，是指一个循环结构A的循环体是另一个循环结构B。比如，for循环里面还有一个for循环，就是嵌套循环。其中，for ,while ,do-while均可以作为外层循环或内层循环。</p><ul class="lvl-2"><li class="lvl-4">外层循环：循环结构A</li><li class="lvl-4">内层循环：循环结构B</li></ul></li><li class="lvl-2"><p>实质上，<code>嵌套循环就是把内层循环当成外层循环的循环体</code>​。只有当内层循环的循环条件为false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的外层循环。</p></li><li class="lvl-2"><p>设外层循环次数为<code>m</code>​次，内层为<code>n</code>​次，则内层循环体实际上需要执行<code>m*n</code>​次。</p></li><li class="lvl-2"><p><strong>技巧：</strong> 从二维图形的角度看，外层循环控制<code>行数</code>​，内层循环控制<code>列数</code>​。</p></li><li class="lvl-2"><p><strong>开发经验：</strong> 实际开发中，我们最多见到的嵌套循环是两层。一般不会出现超过三层的嵌套循环。如果将要出现，一定要停下来重新梳理业务逻辑，重新思考算法的实现，控制在三层以内。否则，可读性会很差。</p></li></ul><h2 id="4-关键字break-和-coutinue-的使用">4. 关键字break 和 coutinue 的使用</h2><table><thead><tr><th>关键字</th><th>适用范围</th><th>在循环结构中使用的作用</th></tr></thead><tbody><tr><td>break</td><td>switch-case循环结构</td><td>一旦执行，就结束(或跳出)<strong>当前</strong>循环结构</td></tr><tr><td>continue</td><td>循环结构</td><td>一旦执行，就结束(或跳出)<strong>当次</strong>循环结构</td></tr></tbody></table><blockquote><p>此外，很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它，但使程序容易出错。Java中的break和continue是不同于goto的。</p></blockquote><h2 id="5-Scanner-键盘输入功能的实现">5. Scanner: 键盘输入功能的实现</h2><ul class="lvl-0"><li class="lvl-2"><p>键盘输入代码的四个步骤</p><ol><li class="lvl-5">导包：<code>import java.util.Scanner;</code>​</li><li class="lvl-5">创建Scanner类型的对象：<code>Scanner scan = new Scanner(System.in);</code>​</li><li class="lvl-5">调用Scanner类的相关方法（<code>next() / nextXxx()</code>​），来获取指定类型的变量</li><li class="lvl-5">释放资源：<code>scan.close();</code>​</li></ol></li><li class="lvl-2"><p>注意：需要根据相应的方法，来输入指定类型的值 ，如果输入的数据类型与要求的类型不匹配时 ，会报异常导致程序终止</p></li></ul><p>获取随机数代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MathRandomTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">value</span> <span class="operator">=</span> Math.random();</span><br><span class="line">System.out.println(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[1,6]</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random() * <span class="number">6</span>) + <span class="number">1</span>; <span class="comment">//</span></span><br><span class="line">System.out.println(number);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-谷粒记账">6. 谷粒记账</h2><p>应用类：NorthAccount</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.north;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/1/17$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NorthAccount</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">details</span> <span class="operator">=</span> <span class="string">&quot;收支\t 账户金额\t 收支金额\t 说明\n&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">acount</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------------------谷粒记账软件-----------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                                1.收支明细                                    &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                                2.登记收入                                    &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                                3.登记支出                                    &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                                4.退出 \n                                      &quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;                                请选择(1-4):&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">selection</span> <span class="operator">=</span> Utility.readMenuSelection(); <span class="comment">// 进行选择</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (selection) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;-------------------------当前手指明细记录-------------------------------&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;-----------------------------------------------------------------------&quot;</span>);</span><br><span class="line">                    System.out.println(details);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次输入金额：&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">amount1</span> <span class="operator">=</span> Utility.readNumber();</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次收入说明：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">desc1</span> <span class="operator">=</span> Utility.readString();</span><br><span class="line"></span><br><span class="line">                    acount += amount1;</span><br><span class="line">                    details += <span class="string">&quot;收入\t&quot;</span> + acount + <span class="string">&quot;\t\t&quot;</span> + amount1 + <span class="string">&quot;\t\t&quot;</span> + desc1 + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次支出金额：&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">amount2</span> <span class="operator">=</span> Utility.readNumber();</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次支出说明：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">desc2</span> <span class="operator">=</span> Utility.readString();</span><br><span class="line"></span><br><span class="line">                    acount -= amount2;</span><br><span class="line">                    details += <span class="string">&quot;支出\t&quot;</span> + acount + <span class="string">&quot;\t\t&quot;</span> + amount2 + <span class="string">&quot;\t\t&quot;</span> + desc2 + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;确认是否退出(Y/N): &quot;</span>);</span><br><span class="line">                    <span class="type">char</span> <span class="variable">confirmSelection</span> <span class="operator">=</span> Utility.readConfirmSelection();</span><br><span class="line">                    <span class="keyword">if</span> (confirmSelection == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工具类：Utility</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.north;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/1/17$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utility</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readMenuSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>);</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp; c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     用于收入和支出金额的输入。该方法从键盘读取一个不超过4位长度的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">readNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     用于收入和支出说明的输入。该方法从键盘读取一个不超过8位长度的字符串，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readConfirmSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">readKeyBoard</span><span class="params">(<span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            line = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：变量与运算符</title>
      <link href="/posts/28b3fa6.html"/>
      <url>/posts/28b3fa6.html</url>
      
        <content type="html"><![CDATA[<h1>第二章：变量与运算符</h1><h2 id="1-关键字">1. 关键字</h2><ul class="lvl-0"><li class="lvl-2"><p>定义：被java语言赋予了特殊含义 ，用作专门用途的字符串(或单词)</p></li><li class="lvl-2"><p>特点：全部关键字都是<code>小写字母</code>​</p></li><li class="lvl-2"><p><a href="%20https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">官网地址</a></p></li><li class="lvl-2"><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240115172006-m537akt.png" alt="image">​</p></li><li class="lvl-2"><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240115172016-bu9ire4.png" alt="image">​</p></li></ul><h2 id="2-标识符">2. 标识符</h2><ul class="lvl-0"><li class="lvl-2"><p>定义：java中变量 ，方法 ，类等要素命名时使用的字符序列成为标识符</p></li><li class="lvl-2"><p>技巧：凡是自己可以起名字的地方都叫标识符 。<strong>最好是见名知义</strong></p></li></ul><p><strong>标识符的命名规则(硬性要求)</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>由26个英文字母大小写，0-9 ，_或 $ 组成</p></li><li class="lvl-2"><p>数字不可以开头</p></li><li class="lvl-2"><p>不可以使用java关键字和保留字 ，但能包含关键字和保留字</p></li><li class="lvl-2"><p>Java中严格区分大小写，长度无限制</p></li><li class="lvl-2"><p>标识符不能包含空格</p></li></ul></blockquote><p><strong>标识符的命名规范 ：</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>包名：多单词组成时所有字母都要小写</p></li><li class="lvl-2"><p>类名，接口名：多单词组成时，所有单词的首字母大写</p></li><li class="lvl-2"><p>变量名，方法名：多单词组成时 ，第一个单词首字母小写 ，第二个单词开始每个单词的首字母大写</p></li><li class="lvl-2"><p>常量名：所有字母都要大写 ，多单词时每个单词用下划线连接：XXX_YYY_ZZZ</p></li></ul></blockquote><h2 id="3-变量">3. 变量</h2><ul class="lvl-0"><li class="lvl-2"><p>变量的概念：</p><ul class="lvl-2"><li class="lvl-4">内存中的一个<strong>存储区域</strong>，该区域的数据可以在同一类型范围内不断变化</li><li class="lvl-4">变量的构成包含三个元素： <span data-type="text" style="color: var(--b3-font-color2);">数据类型</span> ，<span data-type="text" style="color: var(--b3-font-color3);">变量名</span> ，<span data-type="text" style="color: var(--b3-font-color4);"> 存储的值</span></li><li class="lvl-4">Java中变量的声明格式：<code>数据类型 变量名 = 变量值</code>​</li></ul></li><li class="lvl-2"><p>变量的作用：用于在内存中保存数据</p></li><li class="lvl-2"><p>使用变量注意：</p><ul class="lvl-2"><li class="lvl-4">Java中每个变量必须先声明，后使用。</li><li class="lvl-4">使用变量名来访问这块区域的数据。</li><li class="lvl-4">变量的作用域：其定义所在的一对{ }内。</li><li class="lvl-4">变量只有在其<code>作用域</code>​内才有效。出了作用域，变量不可以再被调用。</li><li class="lvl-4">同一个作用域内，不能定义重名的变量。</li></ul></li><li class="lvl-2"><p>Java中变量的数据类型</p><ul class="lvl-2"><li class="lvl-4">基本数据类型：包括 整数类型 ，浮点数类型 ，字符类型 ，布尔类型</li><li class="lvl-4">引用数据类型：包括 数组 ，类 ，接口 ，枚举 ，注解 ，记录</li><li class="lvl-4"><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240115173506-2t04upj.png" alt="image">​</li></ul></li></ul><h2 id="4-基本数据类型">4. 基本数据类型</h2><p>整数类型：byte ,short ,int , long</p><p>浮点类型：float , double</p><p>字符类型： char</p><p>布尔类型：boolean</p><h2 id="5-基本数据类型变量间的运算规则">5. 基本数据类型变量间的运算规则</h2><p>自动类型转换 ：</p><ul class="lvl-0"><li class="lvl-2"><p>规则：将取值范围小(或容量小)的类型自动提升为取值范围大(或容量大)的类型</p></li><li class="lvl-2"><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240115192932-g1w4z5j.png" alt="image">​</p></li></ul><p>‍</p><p>强制类型转换</p><ul class="lvl-0"><li class="lvl-2"><p>规则：将取值范围大(或容量大)的类型强制转换成取值范围小(或容量小)的类型</p></li><li class="lvl-2"><p>转换格式： 数据类型 变量名 = (数据类型) 被强转数据值</p></li><li class="lvl-2"><p>注意：</p><ul class="lvl-2"><li class="lvl-4">当把存储范围大的值强制转换为范围小的变量时 ，可能会损失精度或溢出</li></ul></li></ul><p>基本数据类型与String的运算</p><ul class="lvl-0"><li class="lvl-2"><p>字符串类型：String</p><ul class="lvl-2"><li class="lvl-4">String不是基本数据类型 ，属于引用数据类型</li><li class="lvl-4">使用一对 <code>&quot;&quot;</code>​来表示一个字符串 ， 内部可以包含0个 ，1个或多个字符</li><li class="lvl-4">声明方式与基本数据类型类似</li></ul></li><li class="lvl-2"><p>运算规则</p><ul class="lvl-2"><li class="lvl-4">任意八种基本数据类型的数据与String类型只能进行连接“+”运算，且结果一定也是String类型</li><li class="lvl-4">String类型不能通过强制类型()转换，转为其他的类型</li></ul></li></ul><h2 id="6-运算符">6. 运算符</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><p>运算符的分类：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>按照</strong>​<code>功能</code>​分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、Lambda运算符</p></li></ul><table><thead><tr><th><strong>分类</strong></th><th><strong>运算符</strong></th></tr></thead><tbody><tr><td><strong>算术运算符（7个）</strong></td><td><strong>+、-、*、/、%、++、–</strong></td></tr><tr><td><strong>赋值运算符（12个）</strong></td><td><strong>=、+=、-=、*=、/=、%=、&gt;&gt;=、&lt;&lt;=、&gt;&gt;&gt;=、&amp;=、</strong></td></tr><tr><td><strong>比较(或关系)运算符（6个）</strong></td><td><strong>&gt;、&gt;=、&lt;、&lt;=、==、!=</strong></td></tr><tr><td><strong>逻辑运算符（6个）</strong></td><td><strong>&amp;、</strong></td></tr><tr><td><strong>位运算符（7个）</strong></td><td><strong>&amp;、</strong></td></tr><tr><td><strong>条件运算符（1个）</strong></td><td><strong>(条件表达式)?结果1:结果2</strong></td></tr><tr><td><strong>Lambda运算符（1个）</strong></td><td><strong>-&gt;（第18章时讲解）</strong></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p><strong>按照</strong>​<code>操作数个数</code>​分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</p></li></ul><table><thead><tr><th><strong>分类</strong></th><th><strong>运算符</strong></th></tr></thead><tbody><tr><td><strong>一元运算符（单目运算符）</strong></td><td><strong>正号（+）、负号（-）、++、–、!、~</strong></td></tr><tr><td><strong>二元运算符（双目运算符）</strong></td><td><strong>除了一元和三元运算符剩下的都是二元运算符</strong></td></tr><tr><td><strong>三元运算符 （三目运算符）</strong></td><td><strong>(条件表达式)?结果1:结果2</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲言碎语</title>
      <link href="/posts/8ebfad52.html"/>
      <url>/posts/8ebfad52.html</url>
      
        <content type="html"><![CDATA[<div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>TimeLine</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-18 13:33</p></div></div><div class='timeline-item-content'><p>其实人一辈子是需要一些建议的，寻求答案，就是当自己寻找不出答案做不出正确的选择时，需要借鉴别人的建议，供自己做出选择，他人的高度确实可能限制了你的视野，但如果当自己没有别人的高度时，是可以借鉴别人的视野来，看清自己，答案永远是自己认同，并不需要追求别人的认同，这样才不能被世人的高墙围住。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-18 09:37</p></div></div><div class='timeline-item-content'><p>先迁移一部分学习笔记 ，有时间的话 ，再把另外的笔记也给迁移上面去</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-18 07:26</p></div></div><div class='timeline-item-content'><p>准备继续锻炼 ，开始自律 ，还是继续三分化训练加早起空腹有氧运动 ，贵在坚持 ，冲冲冲！！！<br><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/000CDDD2.gif" alt="img"></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-17 23:09</p></div></div><div class='timeline-item-content'><p>明天准备做一下笔记的迁移 ，把大部分的学习笔记都迁移到该博客上面去！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-17 22:48</p></div></div><div class='timeline-item-content'><p>遇事不决 ，可问春风</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-07-17 22:37</p></div></div><div class='timeline-item-content'><p>我永远喜欢喜多川海梦！！<br><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2022_1010_28debabfj00rjijyi005wd001hc00u0p.jpg" alt="2022_1010_28debabfj00rjijyi005wd001hc00u0p"></p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 友人帐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我在人间凑数的日子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板测试</title>
      <link href="/posts/d6a434b9.html"/>
      <url>/posts/d6a434b9.html</url>
      
        <content type="html"><![CDATA[<p>在Java中，“分布式”通常指的是分布式系统或分布式计算的概念。我们可以把它想象成一个团队合作的情景：在一个大型项目中，不同的团队成员可能分布在不同的地点，但他们需要协同工作，共享信息，以完成整个项目的构建。同样的，分布式系统就是由多台计算机（节点）组成，这些计算机通过网络连接在一起，共同完成一个复杂任务。</p><h3 id="什么是分布式？">什么是分布式？</h3><p>分布式系统是由多个相互连接的计算机组成的集合，这些计算机各自独立运行，但又通过网络互相通信和协作，对外部看起来像是一个单一的系统。每台计算机都可以有自己的处理器、内存和存储，它们通过交换数据和指令来协调工作。</p><h3 id="分布式的作用">分布式的作用</h3><ol><li class="lvl-3"><p><strong>提高性能</strong>：通过将任务分割并分配给多台计算机，可以并行处理，大大提高了处理速度和效率。</p></li><li class="lvl-3"><p><strong>增强可靠性</strong>：如果有某一台计算机出故障，其他计算机可以继续工作，从而增加了系统的整体稳定性和容错能力。</p></li><li class="lvl-3"><p><strong>资源扩展</strong>：可以根据需求动态增加或减少参与的计算机数量，使得系统能够处理更大的工作量或更复杂的问题。</p></li><li class="lvl-3"><p><strong>资源共享</strong>：不同节点之间的硬件资源（如CPU、存储）和软件资源（如数据、应用程序）可以被共享，提高资源利用率。</p></li></ol><h3 id="使用场景案例">使用场景案例</h3><ol><li class="lvl-3"><p><strong>电子商务网站</strong>：像亚马逊或淘宝这样的网站，在高峰期会有大量用户同时访问。为了应对这种高并发，网站会使用分布式系统，将请求分布到不同的服务器上处理，确保网站响应迅速且稳定。</p></li><li class="lvl-3"><p><strong>社交媒体平台</strong>：例如Facebook或Twitter，它们需要处理海量的数据和用户交互。分布式系统可以将用户数据存储在不同的数据库服务器上，同时使用分布式计算框架（如Apache Hadoop）来处理和分析数据。</p></li><li class="lvl-3"><p><strong>在线支付系统</strong>：支付宝或PayPal这类支付平台需要在多个地区提供服务，并保证交易的实时性和安全性。通过分布式系统，可以实现数据的一致性、交易的快速确认和系统的高可用性。</p></li><li class="lvl-3"><p><strong>云计算服务</strong>：像AWS、Azure或Google Cloud这样的云服务提供商，使用分布式系统来管理虚拟资源，为用户提供弹性的计算、存储和网络服务。</p></li><li class="lvl-3"><p><strong>大数据处理</strong>：处理大规模数据集时，如物联网设备产生的数据，分布式计算框架（如Apache Spark）可以并行处理数据，加速数据分析和机器学习任务。</p></li></ol><p>通过这些案例，你可以看到分布式系统在现代互联网和企业级应用中扮演着至关重要的角色，它不仅提高了处理能力和系统的可靠性，还促进了资源的有效利用。</p><hr><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><div class="timeline red"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程和环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：Java语言概述</title>
      <link href="/posts/f7c947df.html"/>
      <url>/posts/f7c947df.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-注释">1. 注释</h2><p>注释的类型：</p><ul class="lvl-0"><li class="lvl-2"><p>单行注释</p></li><li class="lvl-2"><p>多行注释</p></li><li class="lvl-2"><p>文档注释</p></li></ul><p>注释的作用：</p><ul class="lvl-0"><li class="lvl-2"><p>提高了程序的可阅读性</p></li><li class="lvl-2"><p>用于调试程序的重要方法</p></li></ul><h2 id="2-Java核心机制：JVM">2. Java核心机制：JVM</h2><p><strong>优点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>跨平台性</p></li><li class="lvl-2"><p>面向对象性</p></li><li class="lvl-2"><p>健壮性</p></li><li class="lvl-2"><p>安全性高</p></li><li class="lvl-2"><p>简单性</p></li><li class="lvl-2"><p>高性能</p></li></ul><p><strong>缺点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>语法过于复杂严谨</p></li><li class="lvl-2"><p>一般适用于大型网站开发 ，维护成本高</p></li><li class="lvl-2"><p>并非适用于所有领域</p></li></ul><h3 id="2-1-JVM功能说明">2.1 JVM功能说明</h3><p>‍</p><blockquote><p><strong>JVM</strong>（<code>J</code>​ava <code>V</code>​irtual <code>M</code>​achine ，Java虚拟机）：是一个虚拟的计算机，是Java程序的运行环境。JVM具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240113110750-zdsmamv.png" alt="image">​</p><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p>功能一：实现Java程序的跨平台性</p></li><li class="lvl-2"><p>功能二：自动内存管理(内存分配 ，内存回收)</p></li></ul><h2 id="3-面试题：">3. 面试题：</h2><blockquote><p>Java程序还会出现内存溢出和内存泄露问题吗？</p><p>答：Yes</p></blockquote><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java复习</title>
      <link href="/posts/f7d3a65a.html"/>
      <url>/posts/f7d3a65a.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-：-Java开发入门">第一章 ： Java开发入门</h2><ol><li class="lvl-3"><p>Java语言是一种面向对象的语言</p></li><li class="lvl-3"><p>Java语言的特点有： 面向对象 ， 跨平台性 ， 安全性 ，支持多线程和分布式</p></li><li class="lvl-3"><p>将.java源文件编译为.class文件的命令是： JavaC</p></li><li class="lvl-3"><p>Java程序的运行环境为 ： JRE</p></li><li class="lvl-3"><p>简述Java语言的特点</p><blockquote><p>简单性 ， 面向对象 ， 安全性 ， 跨平台性 ， 支持多线程 ， 分布性</p></blockquote></li><li class="lvl-3"><p>简述Java的运行机制</p><blockquote><p>Java程序运行时 ， 必须经过编译和运行两个步骤 ， 首先将后缀名为 .java的源文件进行编译 ， 生成后缀名为 .class 的字节码文件 ， 然后Java虚拟机将字节码文件进行解释执行 ，并将结果运行出来</p></blockquote></li><li class="lvl-3"><p>编写一个Hello World 程序</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="第二章-：-Java编程基础">第二章 ： Java编程基础</h2><ol><li class="lvl-3"><p>Java中的常量有 ： 整形常量 ， 浮点数常量 ，字符常量 ， 字符串常来那个 ， 布尔常量 ， null常量</p></li><li class="lvl-3"><p>进制转换 （还未看）</p></li><li class="lvl-3"><p>变量的数据类型</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231218153955-n95axyq.png" alt="image"></p></li><li class="lvl-3"><p>变量的自动类型转换</p><ol><li class="lvl-7">自动类型转换 (小的往大的转换)</li><li class="lvl-7">强制类型转换</li></ol></li><li class="lvl-3"><p>Java中的运算符 ： 算术运算符 ， 赋值运算符 ， 比较运算符 ， 逻辑运算符</p></li><li class="lvl-3"><p><a href="siyuan://blocks/20230929073410-i2qr594">流程控制语句</a></p></li><li class="lvl-3"><p>数组的基本元素 ： 数组名称 ， 数组元素 ， 元素索引 ， 数据类型</p></li><li class="lvl-3"><p>Java程序代码必须放在一个类中 ， 类使用 Class 关键词定义</p></li><li class="lvl-3"><p>Java中的注释有3类 ， 分别是 单行注释 ， 多行注释 ， 文档注释</p></li><li class="lvl-4"><p>int类型所占的存储空间为 ： 4个字节</p></li><li class="lvl-4"><p>用于比较两个整数是否相等的运算符是 ： ==</p></li><li class="lvl-4"><p>数组是一个容器 ， 存储到数组中的每个元素都有自己的自动编号 ， 最小值为：0</p></li><li class="lvl-4"><p>String  不属于基本数据类型</p></li><li class="lvl-4"><p>简述Java 中的8中基本数据类型 ， 并说明每种数据类型所占的存储空间大小</p><blockquote><table><thead><tr><th>数据类型</th><th>所占空间大小</th></tr></thead><tbody><tr><td>byte 字节型</td><td>一个字节</td></tr><tr><td>short 短整型</td><td>2个字节</td></tr><tr><td>int 整形</td><td>4 个字节</td></tr><tr><td>long 长整型</td><td>8 个字节</td></tr><tr><td>float 单精度浮点型</td><td>4 个字节</td></tr><tr><td>double 双精度浮点型</td><td>8 个字节</td></tr><tr><td>char 字符型</td><td>2 个字节</td></tr><tr><td>booblean 型 表示逻辑值</td><td>true , false 分别占一个字节</td></tr></tbody></table></blockquote></li><li class="lvl-4"><p>简述跳转语句 break 与 continue 的作用和区别</p><blockquote><p>在Switch 条件语句和循环语句中都可以使用break语句 ， 当它出现在Switch 条件语句中时 ， 作用是终止某个case 并跳出swtich 结构 ， 当它出现在循环语句中 ， 作用是跳出循环语句 ， 执行循环后面的代码 ， continue 语句用在循环语句中 ， 它的作用是终止本次循环 ， 并执行下一次循环</p></blockquote></li><li class="lvl-4"><p>编程题</p><ol><li class="lvl-8"><p>编写程序 ，计算 1 + 3 + …+ 99 的值 ， 要求如下：</p><ol><li class="lvl-12"><p>使用循环语句实现1\x7e99 的遍历</p></li><li class="lvl-12"><p>在遍历过程中 ，通过条件判断当前的数是否为奇数 ， 如果是就累加 ， 否则不加</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li class="lvl-8"><p>使用do…while 循环语句计算正数5的阶乘</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum *= i;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt;= <span class="number">5</span>);</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="第三章-：面向对象-上">第三章 ：面向对象(上)</h2><ol><li class="lvl-3"><p>面向对象的思想 ： 封装性 ， 继承性 ， 多态性</p></li><li class="lvl-3"><p>类的定义</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class 类名 &#123;</span><br><span class="line">成员变量;</span><br><span class="line">成员方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>访问控制权限</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231220102158-1s9pblr.png" alt="image"></p></li><li class="lvl-3"><p>一个类可以定义多个构造方法 ， 只要每个构造方法的 参数类型 或 参数个数 不同 ， 即可实现重载</p></li><li class="lvl-3"><p>封装就是隐藏对象的属性和实现细节 ，仅对外提供公有的方法</p></li><li class="lvl-3"><p>对于声明为 private , protected 及public 的类成员在类外部 ， 都不能访问</p></li><li class="lvl-3"><p>简答题：</p><ol><li class="lvl-7"><p>简述你对面向对象的三大特征的理解</p><blockquote><p>面向对象的特点主要可以概括为 封装性 ， 继承性和多态性</p><p>其中封装是面向对象核心思想 ， 将对象的属性和行为封装起来 ， 不需要让外界指导具体实现细节 ， 这就是封装的思想</p><p>继承性主要面熟的是类与类之间的关系 ， 通过继承 可以在无需重载编写原有类的情况下 ， 对原有类的功能进行扩展</p><p>多态性指的是在程序中允许出现重名现象 ， 它指在一个类中定义的</p><p>属性和方法被其他类继承后 ， 他们可以具有不同的数据类型或表现出不同的行为 ， 这使得同一个属性和方法在不同的类中具有不同的语义</p></blockquote></li><li class="lvl-7"><p>简述构造方法的特点</p><blockquote><ol><li class="lvl-3">构造方法与类名相同</li><li class="lvl-3">在构造方法名的前面没有返回值类型的声明</li><li class="lvl-3">在构造方法中不能使用return 语句返回一个值</li></ol></blockquote></li></ol></li><li class="lvl-3"><p>编程题：</p><ol><li class="lvl-7"><p>某公司正在进行招聘工作 ， 被招聘人员需要填写个人信息 ，编写个人简历的封装类Resume , 并编写测试类进行测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.north.chapter03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resume</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Resume</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Resume</span><span class="params">(String name, String sex, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introdece</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + <span class="built_in">this</span>.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;性别：&quot;</span> + <span class="built_in">this</span>.getSex());</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄:&quot;</span> + <span class="built_in">this</span>.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.north.chapter03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resume</span> <span class="variable">resume</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resume</span>(<span class="string">&quot;李四&quot;</span> , <span class="string">&quot;男&quot;</span> , <span class="number">20</span>);</span><br><span class="line">        resume.introdece();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="第四章：面向对象-下">第四章：面向对象(下)</h2><ol><li class="lvl-3"><p>一个类如果要实现一个接口 ， 那么它就需要重写接口中定义的全部方法 ， 否则该类就必须定义成 抽象类</p></li><li class="lvl-3"><p>接口中定义的变量默认是 public static final 型 ， 且必须赋初值</p></li><li class="lvl-3"><p>java中的 instanceof 关键字可以判断一个对象是否为某个类(或接口) 的实例</p></li><li class="lvl-3"><p>简答题</p><ol><li class="lvl-7"><p>简述java中继承的概念以及使用继承的好处</p><blockquote><p>概念： 在java中 ， 类的继承是指在一个现有类的基础上构建一个新的类 ， 构建出来的新类被作子类 ， 现有类被作为父类 ， 子类会自动拥有父类所有可继承的属性和方法。</p><p>好处：继承性主要描述的是类与类之间的关系 ， 通过继承 ， 可以无需重新编写原有类的情况下 ， 对原有类的功能进行使用和扩展</p></blockquote></li><li class="lvl-7"><p>简述多态的作用</p><blockquote><p>java中的多态性能够提高代码的灵活性 ， 可维护性和可扩展性 ， 是的程序设计更符合面向对象的思想</p></blockquote></li><li class="lvl-7"><p>简述接口和抽象类的区别</p><blockquote><ol><li class="lvl-3">接口只能定义抽象方法 ， 而抽象类可以定义抽象方法和非抽象方法</li><li class="lvl-3">类可以实现多个接口 ， 但只能继承一个抽象类</li><li class="lvl-3">接口中的成员默认是 public  , 抽象类中的成员可以有多种访问权限</li><li class="lvl-3">抽象类可以有构造方法 ， 而接口不能有构造方法</li></ol></blockquote></li></ol></li></ol><p>‍</p><h2 id="第五章：-异常">第五章： 异常</h2><ol><li class="lvl-3"><p>Java 中的异常是指Java程序在运行时可能出现的错误或非正常情况</p></li><li class="lvl-3"><p>Throwable 类的继承体系图</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231221172526-4vr5bcn.png" alt="image">​</p></li><li class="lvl-3"><p>RuntimeException 类及其子类用于表示运行时异常</p></li><li class="lvl-3"><p>异常分为两种 ， 分别是 运行时异常 和 编译时异常</p></li><li class="lvl-3"><p>自定义异常需要继承</p></li><li class="lvl-3"><p>Exception 类</p></li><li class="lvl-3"><p>简答题</p><ol><li class="lvl-7"><p>写出处理异常的5个关键字</p><blockquote><p>try , catch , finally , throw , throws</p></blockquote></li><li class="lvl-7"><p>简述 try … catch 语句的异常处理流程并画出流程图</p><blockquote><p>程序通过try语句捕获可能出现的异常，如果try语句没有捕获到异常，则直接跳出try…catch语句块执行其他程序；如果在try语句中捕获到了异常，则程序会自动跳转到catch语句中找到匹配的异常类型进行相应的处理。如果try语句捕获到的异常与catch语句例的异常匹配，则先执行catch中的语句，最后执行其他程序语句。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231221174731-8n6gjcs.png" alt="image">​</p></blockquote></li><li class="lvl-7"><p>简述处理编译时异常的两种方式</p><blockquote><ol><li class="lvl-3">使用try … catch 语句对异常进行捕获处理</li><li class="lvl-3">使用throws 关键字声明抛出异常 ， 调用者对异常进行处理</li></ol></blockquote></li></ol></li></ol><h2 id="第六章：Java-API">第六章：Java API</h2><ol><li class="lvl-3"><p>API 指的是应用程序变成接口</p></li><li class="lvl-3"><p>在Java中定义3个类 ， 用来封装对字符串的操作 ， 分别是 String , StringBuffer , StringBuilder</p></li><li class="lvl-3"><p>java中用来获取String字符串长度的方法是 ： length();</p></li><li class="lvl-3"><p>Java中用于将日期格式或为字符串的类是 ： DateFormat</p></li><li class="lvl-3"><p>Java中用于产生随机数的类位于 java.util包中的Random</p></li><li class="lvl-3"><p>Pattern 类用于创建一个正则表达式 ， 也可以说创建一个匹配模式 ，它的构造方法是私有的 ， 不可以直接创建正则表达式</p></li><li class="lvl-3"><p>简答题：</p><ol><li class="lvl-7"><p>简述 String , StringBuffer 和 StringBuilder 三者的区别</p><blockquote><p>String类表示的字符串是常量，一旦创建后，内容和长度都是无法改变的。而StringBuilder和StringBuffer表示字符容器，其内容和长度可以随时修改。在操作字符串时，如果该字符串仅用于表示数据类型，则使用String类即可，但是如果需要对字符串中的字符进行增删操作，则使用StringBuffer与StringBuilder类。如果有大量字符串拼接操作，不要求线程安全的情况下，采用StringBuilder更高效。相反如果需要线程安全则需要使用StringBuffer。</p></blockquote></li><li class="lvl-7"><p>简述8中基本数据类型及其对应的包装类</p><table><thead><tr><th><strong>基本数据类型</strong></th><th><strong>对应的包装类</strong></th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table></li></ol></li><li class="lvl-3"><p>编程题</p><ol><li class="lvl-7"><p>每次随机生成10个0~100的随机正整数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-7"><p>计算从今天算起100天以后是几月几日 ， 并格式化成xxxx年x月x日的形式打印出来</p><p>提示：</p><ol><li class="lvl-11"><p>调用Calendar类的add()方法计算100天以后得日期</p></li><li class="lvl-11"><p>调用Calendar类的getTime()方法返回Date类型的对象</p></li><li class="lvl-11"><p>教师用FULL格式的DateFormat对象 ， 调用format()方法格式化Date对象</p></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.DATE , <span class="number">100</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="type">DateFormat</span> <span class="variable">format</span> <span class="operator">=</span> DateFormat.getDateInstance(DateFormat.FULL);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> format.format(date);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="第七章：-集合">第七章： 集合</h2><ol><li class="lvl-3"><p>集合的核心继承体系图</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231221194231-tpgiwrj.png" alt="image"></p></li><li class="lvl-3"><p>Collection 是所有单列集合的父接口</p></li><li class="lvl-3"><p>使用Iterator 遍历集合时 ， 首先需要调用 hashNext() 方法区判断是否存在下一个元素 ， 若存在下一个元素 ， 则调用 next() 方法取出该元素</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>如果要对TreeSet集合中的对象进行排序 ， 必须实现 Comparable 接口</p></li><li class="lvl-3"><p>ArrayList 内部封装了一个长度可变的 数组</p></li><li class="lvl-3"><p>ArrayList 集合查询元素的速度很快 ， 但是增删改查效率较低</p></li><li class="lvl-3"><p>List 集合的特点是元素有序并且可重复</p></li><li class="lvl-3"><p>Set集合的她点事元素无序并且不可重复</p></li><li class="lvl-3"><p>简答题</p><ol><li class="lvl-7"><p>简述集合List ， Set 和Map 的区别</p><blockquote><p>List的特点是元素有序、可重复。List接口的主要实现类有ArrayList和LinkedList。</p><p>Set的特点是元素无序、不可重复。Set接口的主要实现类有HashSet和TreeSet。Map的特点是存储的元素是键(Key)、值(Value)映射关系，元素都是成对出现的。Map接口的主要实现类有HashMap和TreeMap。</p></blockquote></li><li class="lvl-7"><p>为什么ArrayList 的增删改查操作比较慢 ， 而查找操作比较快</p><blockquote><p>由于ArrayList集合的底层是使用一个数组来保存元素，在增加或删除指定位置的元素时，会导致创建新的数组，效率比较低，因此不适合做大量的增删操作。但这种数组的结构允许程序通过索引的方式来访问元素，因此使用ArrayList集合查找元素很便捷。</p></blockquote></li></ol></li><li class="lvl-4"><p>编程题</p><ol><li class="lvl-8"><p>编写程序，向ArmsList集合中添加元素，然后遍历并输出这些元素。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-8"><p>按照下列要求编写程序</p><ol><li class="lvl-12"><p>写一个Student类，包含name和age属性，提供有参构造方法。</p></li><li class="lvl-12"><p>在Snudent 类中，重写 toString()方法，输出age和name的值。</p></li><li class="lvl-12"><p>在Student类中，重写hashCode()和equals()方法。</p><ol><li class="lvl-16">.hshCode()的返回值是name的哈希值与age的和。</li><li class="lvl-16">.equals()判断对象的name和age是否相同，相同则返回true，不同则返回false。</li></ol></li><li class="lvl-12"><p>编写一个测试类，创建一个HashSet＜Student＞对象hs，向hs中添加多个sat对象，假设有两个Student对象相等。输出HashSet集合，观察Student对象是否添加成功。</p><p><strong>Student类</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">             <span class="keyword">package</span> com.north.chapter07;</span><br><span class="line">             </span><br><span class="line">             <span class="keyword">import</span> java.util.*;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">             <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">private</span> String name;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">                     <span class="built_in">this</span>.age = age;</span><br><span class="line">                     <span class="built_in">this</span>.name = name;</span><br><span class="line">             </span><br><span class="line">                 &#125;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> age + <span class="string">&quot;:&quot;</span> + name;</span><br><span class="line">             </span><br><span class="line">                 &#125;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> name.hashCode() + age;</span><br><span class="line">             </span><br><span class="line">                 &#125;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">                 <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">                     <span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line">                         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                     <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Student))</span><br><span class="line">                         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                     <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) obj;</span><br><span class="line">                     <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(stu.name) &amp;&amp; <span class="built_in">this</span>.age == stu.age;</span><br><span class="line">             </span><br><span class="line">                 &#125;</span><br><span class="line">             </span><br><span class="line">             &#125;</span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">## 第八章： 泛型</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 使用泛型的好处</span><br><span class="line"></span><br><span class="line">    &gt; <span class="number">1.</span> 提高类型的安全性</span><br><span class="line">    &gt; <span class="number">2.</span> 消除强制类型转换</span><br><span class="line">    &gt; <span class="number">3.</span> 提高代码的复用性</span><br><span class="line">    &gt; <span class="number">4.</span> 拥有更高的运行效率</span><br><span class="line">    &gt;</span><br><span class="line"><span class="number">2.</span> 泛型类</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li class="lvl-3"><p>泛型接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">North</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>泛型方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问权限修饰符 <span class="keyword">static</span> <span class="keyword">final</span> &lt;类型形象&gt; 返回值类型 方法名 (形参列表) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>泛型使用 ? 表示 参数化</p></li><li class="lvl-3"><p>泛型可以用在类 ， 接口和方法的定义中 ，分别称为 泛型类 ， 泛型接口 和 泛型方法</p></li><li class="lvl-3"><p>在java程序中 ， 经常会有参数类型或返回值类型不确定的方法 ， 这种方法在java中统称为 泛型方法</p></li><li class="lvl-3"><p>泛型接口的实现类有两种定义方式 ， 一种是直接接口中明确给出泛型类型 ， 另一种是直接在 实现 后声明泛型</p></li><li class="lvl-3"><p>在实际应用中 ， 只有泛型类被使用时 ， 该类所属的类型才能确定</p></li><li class="lvl-4"><p>简答题</p><ol><li class="lvl-8"><p>简述泛型的有</p><blockquote><ol><li class="lvl-3"><p>提高类型的安全性。</p><p>泛型的主要目标是提高Java程序的类型安全性，即可以通过泛型定义对变量类型进行限制，在对变量类型限制之后编译器可以更好的进行类型验证。</p></li><li class="lvl-3"><p>避免强制类型转换</p><p>使用泛型的另一个好处是避免源代码中的许多强制类型转换。这使得代码可读性更高，并且减少出错机会。尽管减少强制类型转换可以降低使用泛型类代码的复杂度，但是声明泛型变量会带来相应的复杂操作。</p></li></ol></blockquote></li></ol></li><li class="lvl-4"><p>编程题</p><ol><li class="lvl-8"><p>按照下列提示编写一个泛型接口以及其实现类</p><ol><li class="lvl-12"><p>创建泛型接口Generic<T>,并创建抽象方法get(T t)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-12"><p>创建实现类GenericImpl<T> , 并实现get(T t)方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericeImple</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generic</span>&lt;T&gt;  &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Received: &quot;</span> + t.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="第九章：-反射">第九章： 反射</h2><ol><li class="lvl-3"><p>反射机制的优点是可以实现动态创建对象和编译</p></li><li class="lvl-3"><p>如果通过Class类实例化其他类的对象 ， 则可以使用 newInstance() 方法 ， 但是必须保证被实例化的类中存在一个无参构造方法</p></li><li class="lvl-3"><p>通过反射可以得到一个类中的所有方法 ， 需要用到 java.lang.reflect 包中的 Method 类</p></li><li class="lvl-3"><p>在反射操作中 ， 通过 getDeclaredFields() 方法可以去的本类中的全部属性</p></li><li class="lvl-3"><p>要取得一个类中的全部方法 ， 可以使用Class 类中的 getMethods() 方法</p></li><li class="lvl-3"><p>简答题</p><ol><li class="lvl-7"><p>简述反射机制</p><blockquote><p>Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以得到任意一个对象所属的类的信息，可以调用任意一个类的成员变量和方法，可以获取任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制</p></blockquote></li><li class="lvl-7"><p>简述实例化Class 对象的三种方式</p><blockquote><p>（1）根据类名获取：类名.class；</p><p>（2）根据对象获取：对象.getClass()；</p><p>（3）根据全限定类名获取：Class.forName(“全限定类名”)。</p></blockquote></li></ol></li></ol><h2 id="第十章：-I-O流">第十章： I/O流</h2><ol><li class="lvl-3"><p>Java中的IO流按照传输数据的不同可分为 字节流 和 字符流</p></li><li class="lvl-3"><p><a href="http://java.io">java.io</a> 包中可以用于从文件直接读取字符的类是 Reader</p></li><li class="lvl-3"><p>IO系统提供了两个带缓冲的字节流 ， 分别是 BufferedInputStream 和 BufferedOutputStream</p></li><li class="lvl-3"><p>在JDK中提供了两个可将字节流转换为字符流的类分别是 ： InputStreamReader 和 OutputStreamWriter</p></li><li class="lvl-3"><p>java.io.FileOutputStream 是 OutputStream 的子类 ， 它是操作文件的字节输出流</p></li><li class="lvl-3"><p>转换流实现了字节流和字符流的相互转换</p></li><li class="lvl-3"><p>简答题</p><ol><li class="lvl-7"><p>简述字符流与字节流的区别</p><blockquote><p>字节流的两个基类是InputStream和OutputStream，字符流的两个基类是Reader和Writer，它们都是Object类的直接子类，字节流是处理以8位字节为基本单位的字节流类；Reader和Writer类是专门处理16位字节的字符流类。</p></blockquote></li><li class="lvl-7"><p>简述InputStreamReader 类与 OutputStreamWriter类的作用</p><blockquote><p>InputStreamReader是Reader的子类，它可以将一个字节输入流转换成字符输入流，方便直接读取字符。OutputStreamWriter是Writer的子类，它可以将一个字节输出流转换成字符输出流，方便直接写入字符。</p></blockquote></li></ol></li></ol><h2 id="第十一章：JDBC">第十一章：JDBC</h2><ol><li class="lvl-3"><p>JDBC 驱动程序管理器专门负责注册特定的JDBC驱动程序 ， 主要通过 java.sql.DriverManager 类实现的</p></li><li class="lvl-3"><p>在编写JDBC应用程序时 ， 必须要把制定数据库驱动程序或类库加载到 classpath 中</p></li><li class="lvl-3"><p>PreparedStatement 是Statement 的子接口 ， 用于执行 预编译 的SQL语句</p></li><li class="lvl-3"><p>创建Statement 对象的作用是 ： 执行SQL语句</p></li><li class="lvl-3"><p>简答题：</p><ol><li class="lvl-7"><p>简述JDBC编程的6个开发记录</p><blockquote><ol><li class="lvl-3">加载并注册数据库驱动；</li><li class="lvl-3">通过DriverManager获取数据库连接；</li><li class="lvl-3">通过Connection对象获取Statement对象；</li><li class="lvl-3">使用Statement执行SQL语句；</li><li class="lvl-3">操作ResultSet结果集；</li><li class="lvl-3">回收数据库资源。</li></ol></blockquote></li><li class="lvl-7"><p>什么是预编译</p><blockquote><p>所谓预编译,就是说当相同的SQL语句再次执行时,数据库只需使用缓冲区中的数据,而不需要对SQL语句再次编译,从而有效提高数据的访问效率。</p></blockquote></li></ol></li></ol><h2 id="第十二章：-多线程">第十二章： 多线程</h2><ol><li class="lvl-3"><p>实现多线程的两种方式是继承 Thread 和 实现 Runnable 接口</p></li><li class="lvl-3"><p>线程的整个生命周期分为5个阶段 ， 分别是 新建状态 ， 就绪状态 ， 运行状态 ， 堵塞状态 和 死亡状态</p></li><li class="lvl-3"><p>在Thread 类中 ， 提供了 start() 方法用于启动新线程</p></li><li class="lvl-3"><p>执行 sleep() 方法 ， 可以让线程在规定的时间内休眠</p></li><li class="lvl-3"><p>同步代码块使用 synchronized 关键字修饰</p></li><li class="lvl-3"><p>简答题：</p><ol><li class="lvl-7"><p>简述创建多线程的两种方式</p><blockquote><p>一种是继承java.lang包下的Thread类，覆写Thread类的run()方法，在run()方法中实现运行在线程上的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><p>另一种就是实现java.lang.Runnable接口，同样是在run()方法中实现运行在线程上的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li class="lvl-7"><p>简述同步代码块的作用</p><blockquote><p>同步代码块的作用是控制线程，保证同步代码块中只能有一个线程在运行，保证了多线程操作数据的安全性</p></blockquote></li></ol></li><li class="lvl-3"><p>编程题</p><ol><li class="lvl-7"><p>编写一个多线程程序 ， 模拟火车售票窗口的售票功能 ， 创建线程1 和 线程2 ， 通过这两个线程共同售出100张票</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketWindow</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">// 定义100张票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">String</span> <span class="variable">th_name</span> <span class="operator">=</span> th.getName();</span><br><span class="line">            System.out.println(th_name + <span class="string">&quot; 正在发售第 &quot;</span>  + num-- + <span class="string">&quot; 张票&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TicketWindow</span> <span class="variable">ticketWindow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindow</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketWindow , <span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketWindow , <span class="string">&quot;线程2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="第十三章-：-网络编程">第十三章 ： 网络编程</h2><ol><li class="lvl-3"><p>基于TCP/IP的网络草考模型被分为4层 ， 分别是 链路层 ， 网络层 ， 运输层 和应用层</p></li><li class="lvl-3"><p>在进行网络通信时 ， 传输层可以采用TCP ， 也可以采用UDP</p></li><li class="lvl-3"><p>在下载文件时 ，必须采用TCP</p></li><li class="lvl-3"><p>JDK提供了 DatagramSocket 类 ， 该类可以发送和接受数据包</p></li><li class="lvl-3"><p>在JDK中提供了两个用于实现TCP程序的类 ， 一个是 ServerSocket 类 ， 用于表示服务端 ， 另一个是Socket类 ， 用于表示客户端</p></li><li class="lvl-3"><p>简答题</p><ol><li class="lvl-7"><p>简述TCP通信与UDP通信的主要区别</p><blockquote><p>UDP通信与TCP通信的区别在于，UDP中只有发送端和接收端，不区分客户端与服务器端，计算机之间可以任意地发送数据；而TCP通信是严格区分客户端与服务器端的，在通信时，必须先由客户端去连接服务器端才能实现通信，服务器端不可以主动连接客户端，并且服务器端程序需要事先启动，等待客户端的连接。</p></blockquote></li><li class="lvl-7"><p>简述TCP中服务器端与客户端的连接过程</p><blockquote><p>在TCP连接中必须要明确客户端与服务器端，由客户端向服务器端发出连接请求，每次连接的创建都需要经过“三次握手”。第一次握手，客户端向服务器端发出连接请求，等待服务器确认；第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求；第三次握手，客户端再次向服务器端发送确认信息，确认连接。</p></blockquote></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java课程作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于独处</title>
      <link href="/posts/750cb0cc.html"/>
      <url>/posts/750cb0cc.html</url>
      
        <content type="html"><![CDATA[<p>你开始有一点抑郁的迹象了，是不是最近学习压力大，或者是与宿友同学的关系处理不太好，建议你不要总是把自己封闭在一个狭小的空间，多出去走走，也可以出去做做运动，或者是参加学校一些集体活动，或者去图书馆几本书看，心情会舒畅很多，孤独感也会自然而然消除了，如果你总是习惯性的回到宿舍躺在床上玩手机，久而久之你会对手机产生依赖，甚至网络上的一些错误的观念会直接影响你的思想，沉迷与短视频后，它会占用你大量的个人时间，一旦产生依赖，就是很难专注的学习，制定的学习计划也会沉迷网络难以执行下去，甚至会因为网络上一些错误的观念中途停止计划。还有就是你的身体，由于你习惯性躺在床上玩手机，沉迷于网络，久而久之你的身体素质会慢慢变差，身体开始会出现一些疾病，到后期的话你可能就需要经常去医院了。你的社交圈也会因为你经常封闭在一个空间里面无法拓展，你的思维能力与表达能力也会逐渐衰退。还有就是你认为二本不好，那你知不知道其实在中国，能够有拥有本科学历的比例其实并不高，绝大多人学历只有初中到大专的学历，你这个学历，你去那些知名的公司与政府单位可能不会受待见，但如果是去一些普通的工厂，你已经是算是高学历的人才，能够胜任技术工程师与办公室的文职工作，而不是去流水线打螺丝。还有就是你觉得二本不好，可能是别人给你灌输的观念，但如果你接受了这种观念，你的思想与行为会收到很大影响，思想会变得自卑，不思进取，行为也会变得缺乏动力，因为从心理上你已经定义了你自己是不行，你给自己贴上的标签，会很大程度影响日后的所有行动。不要小瞧心理对人的影响，往正面看他可以使一个人变得越来越上进，往负面看它也可以在无形中废掉一个人。抱怨是不会对现状有任何改变的，只会逐渐让你丧失斗志对生活失去希望，你唯有抱有一种永不服输的精神，你才会有那勇气，恒心，毅力去克服阻碍前进道路的所有困难。其实也没有什么好悲哀，如果是生活给你制造各种困难，那你应该想着如何解决这个困难，又或者是某些人给你制造了问题，你就要想如何去解决这个问题，当你能够凭借你的智慧把困难解决，那么在你前进道路上的阻碍就变少了，你的人生道路会越来越顺畅。甚至一些曾经的缺点也会因为经过改变后变成你的优点。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我在人间凑数的日子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的学习笔记</title>
      <link href="/posts/92d0de5b.html"/>
      <url>/posts/92d0de5b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git的简单介绍">Git的简单介绍</h2><p>‍</p><blockquote><p>Git是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目</p></blockquote><p>‍</p><h2 id="Git的常用命令">Git的常用命令</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config --global <a href="http://user.name">user.name</a> ‘用户名’</td><td>设置用户签名</td></tr><tr><td>git config --global user.email ‘邮箱’</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到缓存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git rest --hard 版本号</td><td>版本穿梭</td></tr><tr><td>git log</td><td>查看版本详细信息</td></tr></tbody></table><h2 id="Git的分支操作">Git的分支操作</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231204092707-wduhj78.png" alt="image">​</p><p>‍</p><p><strong>什么事是分支</strong></p><blockquote><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）</p></blockquote><p>‍</p><p><strong>分支的好处</strong></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>同时并行推进多个功能开发，提高开发效率。</p></li><li class="lvl-2"><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</p></li></ul></blockquote><p>‍</p><h2 id="分支操作命令">分支操作命令</h2><p>‍</p><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h3 id="冲突的产生和解决">冲突的产生和解决</h3><p>冲突的产生原因：</p><ul class="lvl-0"><li class="lvl-2"><p>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容</p></li></ul><p>解决冲突：</p><ol><li class="lvl-3"><p>编辑有冲突的文件，删除特殊符号，决定要使用的内容</p><ol><li class="lvl-7">特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD当前分支的代码=======合并过来的代码&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</li></ol></li></ol><h2 id="Gie团队协作机制">Gie团队协作机制</h2><p><strong>团队内协作</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231210083125-rvhdytr.png" alt="image">​</p><p><strong>跨团队协作</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231210083141-3c07vsv.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7. 特殊SQL的执行</title>
      <link href="/posts/51361b40.html"/>
      <url>/posts/51361b40.html</url>
      
        <content type="html"><![CDATA[<h1>1. 模糊查询</h1><p>‍</p><p>演示代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试模糊查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> mohu</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">testMohu</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;</span><br></pre></td></tr></table></figure><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; testMohu(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;testMohu&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--模糊查询的语句--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span></span><br><span class="line">select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h1>2. 批量删除</h1><p>‍</p><p>演示代码 ：</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 批量删除</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h1>3. 动态设置表名</h1><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态设置表名，查询所有的用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h1>4. 添加功能获取自增的主键</h1><p>‍</p><p>添加功能获取自增的主键 ——&gt; 获取受影响的行数</p><p>‍</p><p><strong>场景模拟：</strong></p><p><strong>t_clazz(clazz_id,clazz_name)</strong></p><p><strong>t_student(student_id,student_name,clazz_id)</strong></p><p><strong>1、添加班级信息</strong></p><p><strong>2、获取新添加的班级的id</strong></p><p><strong>3、为班级分配学生，即将某学的班级id修改为新添加的班级的id</strong></p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* useGeneratedKeys：设置使用自增的主键</span></span><br><span class="line"><span class="comment">* keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Java项目打包成exe可执行文件</title>
      <link href="/posts/8e1cab8e.html"/>
      <url>/posts/8e1cab8e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里将以 idea中项目打包成exe可执行文件为例</p></blockquote><p>‍</p><h2 id="所选工具">所选工具</h2><blockquote><p>IDEA , JDK , exe4j</p></blockquote><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.jetbrains.com/idea/">IDEA官网</a></p></li><li class="lvl-2"><p><a href="https://www.cnblogs.com/NorthPoet/p/16553157.html">JDK安装教程</a></p></li><li class="lvl-2"><p><a href="https://exe4j.apponic.com/download/">exe4j下载地址</a></p></li></ul><h2 id="准备工作">准备工作</h2><blockquote><p>首先确保该程序能够正常运行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118153539-os7aecx.png" alt="image">​</p><p>‍</p><blockquote><p>打包流程简述</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>把java项目打包成exe可执行文件简单来说只要两个步骤</p><ol><li class="lvl-5">把java项目打包成jar包</li><li class="lvl-5">使用exe4j把jar包加工成exe可执行文件</li></ol></li></ul><h2 id="打包流程">打包流程</h2><blockquote><p>首先将Java项目打包成jar包</p></blockquote><p><strong>进入Project Structure</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118153836-dso6vvp.png" alt="image">​​</p><p>‍</p><p><strong>接下来按照如图所示创建一个module</strong></p><p>​​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118154256-l4654eu.png" alt="image">​​​​</p><p>‍</p><p><strong>下一步：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118154726-sc4dzqj.png" alt="image">​</p><p>‍</p><blockquote><p>设置完之后出现该页面 ， 然后点击OK就行</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118154823-2flippv.png" alt="image">​</p><p>‍</p><blockquote><p>准备生成jar包 ， 点击idea工具栏上的Build–&gt;Build Artifacts</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118155128-tysr5rg.png" alt="image">​​</p><p>‍</p><blockquote><p>点击完之后会有这样一个弹窗 ，随后点击Build就行</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118155251-bxjtwo5.png" alt="image">​​</p><p>‍</p><blockquote><p>之后就会生成一个jar包 ， 在classes里面</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118155358-vgf2e74.png" alt="image">​</p><p>‍</p><h2 id="使用exe4j将jar包加工成为exe文件">使用exe4j将jar包加工成为exe文件</h2><blockquote><p>这里就不对exe4j做过多的解释了 ，跟着照做就行</p></blockquote><p>‍</p><p><strong>以管理员身份打开exe4j这个软件</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118155933-6ky4eyu.png" alt="image">​</p><p>‍</p><blockquote><p>选择要打包的类型，选择JAR in EXE mode，然后next</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118160647-wylv66h.png" alt="image">​</p><p>‍</p><blockquote><p>给要打包出来的程序文件起个名，再指定一下路径 ，设置完成之后点击next</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118161020-b72tbij-20231118162138-t5ds870.png" alt="image-20231118161020-b72tbij">​​</p><p>​​​</p><blockquote><p><strong>特别注意如果电脑是64位的需要去设置成64位 ， 设置完之后点next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118161449-k0wv0mk.png" alt="image">​</p><p>‍</p><blockquote><p>exe文件的格式选择 ， 选择之后点击next</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118161823-ptrmtur.png" alt="image">​</p><p>‍</p><blockquote><p>按下图添加jar包，选择项目启动的类，如果项目还有导入额外的jar包，也要进行添加</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118162443-9jl9gev.png" alt="image">​</p><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118162600-yc2l08p.png" alt="image">​</p><p>‍</p><blockquote><p>最后的界面是这个样子的 ， 然后点击next</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231130184755375.png" alt="image-20231130184755375"></p><p>‍</p><blockquote><p>设置jdk/jre的最高最低版本，运行项目时使用的环境顺序 , 设置完成之后 , 点击next</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118163016-08j5ak9.png" alt="image">​</p><p>‍</p><blockquote><p>然后就一直next ， 直至出现此页面</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118163243-jqnfdsa.png" alt="image">​​</p><p>‍</p><blockquote><p>最后点击Exit就大功告成了 ， 弹出的页面可以点击yes ， 也可以点击NO</p></blockquote><p>‍</p><h2 id="运行演示">运行演示</h2><blockquote><p>完成上述步骤 ， 可以去查看是否生成exe文件</p></blockquote><p>可以看出 ， 已经生成了exe文件</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118163601-ff3pll0.png" alt="image">​</p><p>‍</p><blockquote><p>运行该exe ， 看是否能够运行成功</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118163653-vhwrogz.png" alt="image">​</p><p>‍</p><p>恭喜完成！</p><p>​​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/0172CA8B-20231118163837-wp1y3w9.gif" alt="0172CA8B">​</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程和环境配置 </tag>
            
            <tag> Java课程作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6. Mybatis的各种查询功能</title>
      <link href="/posts/458f2701.html"/>
      <url>/posts/458f2701.html</url>
      
        <content type="html"><![CDATA[<h2 id="6-1、查询一个实体类对象">6.1、查询一个实体类对象</h2><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-2、查询一个list集合">6.2、查询一个list集合</h2><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p><strong>当查询的数据为多条时，不能使用实体类作为返回值，否则会抛出异常</strong></p><p>‍</p><p><strong>TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</strong></p><h2 id="6-3、查询单个数据">6.3、查询单个数据</h2><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询用户的总记录数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 在MyBatis中，对于Java中常用的类型都设置了类型别名</span></span><br><span class="line"><span class="comment">* 例如： java.lang.Integer--&gt;int|integer</span></span><br><span class="line"><span class="comment">* 例如： int--&gt;_int|_integer</span></span><br><span class="line"><span class="comment">* 例如： Map--&gt;map,List--&gt;list</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">    select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-4、查询一条数据为map集合">6.4、查询一条数据为map集合</h2><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果： &#123;password=123456, sex=男 , id=1, age=23, username=admin&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-5、查询多条数据为map集合">6.5、查询多条数据为map集合</h2><h3 id="①方式一">①方式一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此</span></span><br><span class="line"><span class="comment">时可以将这些map放在一个list集合中获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②方式二">②方式二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并</span></span><br><span class="line"><span class="comment">且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的</span></span><br><span class="line"><span class="comment">map集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">    2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">    3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. Mybatis获取参数值的两种方式</title>
      <link href="/posts/edd0080.html"/>
      <url>/posts/edd0080.html</url>
      
        <content type="html"><![CDATA[<p>‍</p><p><strong>MyBatis 获取参数值的两种方式：<strong>​ ==</strong>${} 和 #{}</strong>==</p><ul class="lvl-0"><li class="lvl-3"><p><strong>${}的本质就是字符串拼接，#{}的本质就是占位符赋值</strong></p></li><li class="lvl-3"><p><strong>${}使用字符串拼接的方式拼接 sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引</strong></p></li><li class="lvl-2"><p><strong>号；但是#{}使用占位符赋值的方式拼接 sql，此时为字符串类型或日期类型的字段进行赋值时，</strong></p></li><li class="lvl-2"><p><strong>可以自动添加单引号</strong></p></li></ul><p>‍</p><p><strong>#{}：先编译 sql 语句，再给占位符传值，底层是 PreparedStatement 实现。可以防止 sql 注入，比较常用。</strong></p><p><strong>${}：先进行 sql 语句拼接，然后再编译 sql 语句，底层是 Statement 实现。存在 sql 注入现象。只有在需要进行 sql 语句关键字拼接的情况下才会用到。</strong></p><p>‍</p><p>Mybatis 中的 <code>$&#123;&#125;</code>​ 和 <code>#&#123;&#125;</code>​ 都是用于 SQL 语句中参数的替代。</p><p><code>#&#123;&#125;</code>​ 使用的是预编译语句，用于将输入参数的值与 SQL 语句分开处理，防止 SQL 注入等安全问题，同时也有效的提高了 SQL 语句的查询性能。在 SQL 解析过程中，#{} 会将参数值进行一定的处理，比如转义特殊字符、处理成相应的数据类型等。</p><p><code>$ &#123;&#125;</code>​ 在 SQL 中是直接替换为参数的值，不做任何转义和修改。这种方式的优点是灵活性强，可以用于不同的场景，但是这种方式存在 SQL 注入的风险，因为输入的参数被直接拼接到 SQL 语句中，如果不充分防范，很容易被攻击者利用。</p><p>一般情况下，使用 <code>#&#123;&#125;</code>​ 是比较安全的方式，但是如果在某些特殊的情况下，确实需要使用 <code>$&#123;&#125;</code>​，比如在动态 SQL 中，将一些动态的 SQL 拼接到主 SQL 中。</p><p>综上所述，<code>#&#123;&#125;</code>​ 适用于大多情况下，比如查询、更新等；而 <code>$&#123;&#125;</code>​ 适用于某些特殊情况，比如动态 SQL，但是需要注意 SQL 注入的问题。</p><p>使用方式示例：</p><ul class="lvl-0"><li class="lvl-2"><p><code>#&#123;&#125;</code>:</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; param = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">param.put(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;getUserById&quot;</span>, param);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>$&#123;&#125;</code>:</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态 SQL 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from user where</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">    name = &#x27;$&#123;name&#125;&#x27;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">    and age = &#x27;$&#123;age&#125;&#x27;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; param = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">param.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">param.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;getUserByCondition&quot;</span>, param);</span><br></pre></td></tr></table></figure><h1>1. 单个字面量类型的参数</h1><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>若 mapper 接口中的方法参数为单个的字面量类型</strong></p></li><li class="lvl-2"><p><strong>此时可以使用</strong>​****​ <strong>{}需要手动加单引号</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180743222-1781818984-20231130182106-k7tovi2.png" alt="image">​</p><p>‍</p><h1>2. 多个字面量类型的参数</h1><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>若 mapper 接口中的方法参数为多个时</strong></p></li><li class="lvl-2"><p><strong>此时 MyBatis 会自动将这些参数放在一个 map 集合中，以 arg0,arg1…为键，以参数为值；以</strong></p></li><li class="lvl-2"><p><strong>param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问 map 集合的键就可以获取相</strong></p></li><li class="lvl-2"><p><strong>对应的值，注意${}需要手动加单引号</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180743653-251118378-20231130182106-qv2mpuf.png" alt="image">​</p><p>‍</p><h1>3. map 集合类型的参数</h1><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>若 mapper 接口中的方法需要的参数为多个时，此时可以手动创建 map 集合，将这些数据放在 map 中</strong></p></li><li class="lvl-2"><p><strong>只需要通过</strong>​****​ <strong>{}需要手动加单引号</strong></p></li></ul><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180743999-1122494194-20231130182106-si9c5pv.png" alt="image">​</p><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180744331-821332920-20231130182106-dfwe3li.png" alt="image">​</p><p>‍</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLoginMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginMap(map);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h1>4. 实体类类型的参数</h1><p>‍</p><p>若 mapper 接口中的方法参数为实体类对象时 ， 此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值</p><p>‍</p><p>注意 ：</p><ul class="lvl-0"><li class="lvl-2"><p>${} 需要手动添加单引号</p></li></ul><p>‍</p><p><mark>根据属性名获取属性值</mark></p><ul class="lvl-0"><li class="lvl-2"><p>这里的属性名指的是实体类当中<code>get后面的名字</code>​ , 就像 getAge 而这里的属性名值得就是 age , 大小写无所谓</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180744754-1403164100-20231130182106-4kwn5kc.png" alt="image">​</p></li></ul><p>‍</p><h1>5. 使用@Param 标识参数</h1><p>‍</p><p><strong>可以通过@Param 注解标识 mapper 接口中的方法参数， 此时会将这些参数放在 map 集合中，以@Param 注解的 value 属性值为键，以参数为值；以 param1,param2…为键，以参数为值；只需要通过${}和#{}访问 map 集合的键就可以获取相对应的值</strong></p><p>‍</p><p><strong>注意${}需要手动加单引号</strong></p><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604180745153-1248402056-20231130182106-pn8hprs.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. Mybatis的增删改查(CRUD)</title>
      <link href="/posts/852e85aa.html"/>
      <url>/posts/852e85aa.html</url>
      
        <content type="html"><![CDATA[<p>​​</p><h2 id="1、新增">1、新增</h2><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、删除">2、删除</h2><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id = 7</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、修改">3、修改</h2><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">    update t_user set username=&#x27;ybc&#x27;,password=&#x27;123&#x27; where id = 6</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、查询一个实体类对象">4、查询一个实体类对象</h2><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、查询-list-集合">5、查询 list 集合</h2><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p><strong>注意：</strong></p><ol><li class="lvl-3"><p><strong>查询的标签 select 必须设置属性 resultType 或 resultMap，用于设置实体类和数据库表的映射</strong></p></li><li class="lvl-3"><p><strong>关系</strong></p><ul class="lvl-2"><li class="lvl-6"><strong>resultType：自动映射，用于属性名和表中字段名一致的情况</strong></li><li class="lvl-6"><strong>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</strong></li></ul></li></ol><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 核心配置文件详解</title>
      <link href="/posts/f2f795cc.html"/>
      <url>/posts/f2f795cc.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.north.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;mapper resource=&quot;mappers/UserMapper.xml&quot;&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.north.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h1>1. configuration</h1><p>‍</p><p>configuration : 根标签 ， 表示配置信息</p><p>‍</p><h1>2. environments</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604164922907-1234604158-20231130133524-ay6y1qe.png" alt="image">​</p><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>environments : 配置多个连接数据库的环境 , 以 &quot;s&quot; 结尾表示复数 ， 也就是说 mybatis 的环境可以配置多个数据源</strong></p></li><li class="lvl-2"><p><strong>default 属性 ： 表示默认使用的环境 ， default 后面填写的是</strong>​<code>**environment **</code>​**的 id , **​<code>**default的值只需要和environment的id值一致即可**</code>​</p></li><li class="lvl-2"><p>**environment : 配置具体的环境(**​<code>**主要包括 ： 事务管理器的配置 + 数据源的配置**</code>​ <strong>)</strong></p><ul class="lvl-2"><li class="lvl-4"><strong>id：表示连接数据库的环境的唯一标识，不能重复 , 该表示用在 environments 的 default 后面 ，用来指定默认环境的选择</strong></li></ul></li></ul><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>transactionManager ： 配置事务管理器</strong></p><ul class="lvl-2"><li class="lvl-4"><p><strong>type 属性：指定事务管理器具体使用什么方式，可选值包括两个</strong></p><ul class="lvl-4"><li class="lvl-6"><strong>JDBC：使用 JDBC 原生的事务管理机制。底层原理：事务开启 conn.setAutoCommit(false); …处理业务…事务提交 conn.commit(); 执行 SQL 时，使用的是 JDBC 中原生的事务管理方式，事务的提交或回滚需要手动处理</strong></li><li class="lvl-6"><strong>MANAGED：交给其它容器来管理事务，比如 WebLogic、JBOSS 等。如果没有管理事务的容器，则没有事务。没有事务的含义：只要执行一条 DML 语句，则提交一次。</strong></li></ul></li></ul></li><li class="lvl-2"><p><strong>dataSource ： 指定数据源</strong></p><ul class="lvl-2"><li class="lvl-4"><p>**type : 设置数据源的类型 (**​<code>**type=&quot;POOLED|UNPOOLED|JNDI&quot;**</code>​ <strong>)</strong></p><ul class="lvl-4"><li class="lvl-6"><strong>POOLED：表示使用数据库连接池缓存数据库连接</strong></li><li class="lvl-6"><strong>UNPOOLED：表示不使用数据库连接池</strong></li><li class="lvl-6"><strong>JNDI：表示使用上下文中的数据源</strong></li></ul></li></ul></li></ul><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>property</strong></p><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>‍</p><h1>3. properties</h1><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入properties文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604164923447-1807619326-20231130133524-r1wt2dn.png" alt="image">​</p><p>‍</p><p><img src="assets/net-img-2942345-20230604164923824-192082376-20231130133524-113al8p.png" alt="image">​</p><p>‍</p><h1>4. typeAliases</h1><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>typeAlias：设置某个类型的别名</strong></p></li><li class="lvl-2"><p><strong>属性 ：</strong></p><ul class="lvl-2"><li class="lvl-4"><strong>type：设置需要设置别名的类型</strong></li><li class="lvl-4"><strong>alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名且不区分大小写</strong></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置类型别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">typeAlias：设置某个类型的别名</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名且不区分大小写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>‍</p><h1>5. mappers</h1><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604164924218-1294231253-20231130133524-td0w73v.png" alt="image">​</p><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>mappers : 引入映射文件 ， 在 mappers 标签中可以配置多个 SQL 映射文件的路径</strong></p></li><li class="lvl-2"><p><strong>mapper : 配置某个 sql 映射文件的路径</strong></p></li><li class="lvl-2"><p><strong>以包为单位引入映射文件的要求 ：</strong></p><ol><li class="lvl-5"><strong>mapper 接口所在的包要和映射文件所在的包一致</strong></li><li class="lvl-5"><strong>mapper 接口要和映射文件的名字一致</strong></li></ol></li></ul><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 搭建Mybatis</title>
      <link href="/posts/7105be24.html"/>
      <url>/posts/7105be24.html</url>
      
        <content type="html"><![CDATA[<ol><li class="lvl-3"><p><mark>确认开发环境</mark></p><ul class="lvl-2"><li class="lvl-6"><p><strong>MySQL不同版本的注意事项</strong></p><p><strong>1、驱动类driver-class-name</strong></p><p><strong>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver</strong></p><p><strong>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</strong></p><p><strong>2、连接地址url</strong></p><p><strong>MySQL 5版本的url：</strong></p><p><strong>jdbc:mysql://localhost:3306/ssm</strong></p><p><strong>MySQL 8版本的url：</strong></p><p><strong>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</strong></p><p><strong>否则运行测试用例报告如下错误：</strong></p><p><strong>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or</strong></p><p><strong>represents more</strong></p></li></ul></li><li class="lvl-3"><p><mark>创建Maven工程</mark></p><ul class="lvl-2"><li class="lvl-6">打包方式 ： jar</li><li class="lvl-6">引入依赖</li></ul></li><li class="lvl-3"><p><mark>创建Mybatis的核心配置文件</mark></p><ul class="lvl-2"><li class="lvl-6"><p><strong>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring</strong></p><p><strong>之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</strong></p><p><strong>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</strong></p><p><strong>核心配置文件存放的位置是src/main/resources目录下</strong></p></li></ul></li><li class="lvl-3"><p><mark>创建mapper接口</mark></p><ul class="lvl-2"><li class="lvl-6"><p><strong>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要</strong></p><p><strong>提供实现类。</strong></p></li></ul></li><li class="lvl-3"><p><mark>创建Mybatis的映射文件</mark></p><ul class="lvl-2"><li class="lvl-6"><p><strong>1、映射文件的命名规则：</strong></p><p><strong>表所对应的实体类的类名+Mapper.xml</strong></p><p><strong>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</strong></p><p><strong>因此一个映射文件对应一个实体类，对应一张表的操作</strong></p><p><strong>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</strong></p><p><strong>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</strong></p><p><strong>2、 MyBatis中可以面向接口操作数据，要保证两个一致：</strong></p><p><strong>a&gt;mapper接口的全类名和映射文件的命名空间（namespace）保持一致</strong></p><p><strong>b&gt;mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</strong></p></li><li class="lvl-6"><p><strong>相关概念：ORM</strong>（<strong>O</strong>bject <strong>R</strong>elationship <strong>M</strong>apping）对象关系映射。</p><ul class="lvl-4"><li class="lvl-8"><strong>对象：Java的实体类对象</strong></li><li class="lvl-8"><strong>关系：关系型数据库</strong></li><li class="lvl-8"><strong>映射：二者之间的对应关系</strong></li></ul><table><thead><tr><th><strong>Java概念</strong></th><th><strong>数据库概念</strong></th></tr></thead><tbody><tr><td><strong>类</strong></td><td><strong>表</strong></td></tr><tr><td><strong>属性</strong></td><td><strong>字段/列</strong></td></tr><tr><td><strong>对象</strong></td><td><strong>记录/行</strong></td></tr></tbody></table></li></ul></li><li class="lvl-3"><p><mark>通过junit测试功能</mark></p><ul class="lvl-2"><li class="lvl-6"><strong>SqlSession：代表Java程序和****数据库</strong>之间的<strong>会话</strong>。（HttpSession是Java程序和浏览器之间的会话）</li><li class="lvl-6"><strong>SqlSessionFactory：是“生产”SqlSession的“工厂”。</strong></li><li class="lvl-6"><strong>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的</strong></li></ul><p><strong>相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line"><span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span></span><br><span class="line">映射文件中的SQL标签，并执行标签中的SQL语句</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line"><span class="comment">//sqlSession.commit();</span></span><br><span class="line">System.out.println(<span class="string">&quot;结果：&quot;</span>+result);</span><br></pre></td></tr></table></figure></li></ol><p>‍</p><ol start="7"><li class="lvl-3"><p><mark>加入log4j日志功能</mark></p><ul class="lvl-2"><li class="lvl-6"><p><strong>①加入依赖</strong></p></li><li class="lvl-6"><p><strong>②加入log4j的配置文件</strong></p><p><strong>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</strong></p></li><li class="lvl-6"><p><strong>日志的级别：</strong></p><p><strong>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</strong></p><p><strong>从左到右打印的内容越来越详细</strong></p></li></ul></li></ol><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. Mybatis 简介</title>
      <link href="/posts/4e6d3c3b.html"/>
      <url>/posts/4e6d3c3b.html</url>
      
        <content type="html"><![CDATA[<h1>1. Mybatis历史</h1><p><strong>MyBatis最初是Apache的一个开源项目iBatis</strong>, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github。</p><p><strong>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）。</strong></p><p>‍</p><h1>2. MyBatis特性</h1><p>‍</p><p><strong>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</strong></p><p><strong>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</strong></p><p><strong>3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java</strong></p><p><strong>Objects，普通的Java对象）映射成数据库中的记录</strong></p><p><strong>4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</strong></p><p>‍</p><h1>3. 和其它持久化层技术对比</h1><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>JDBC</strong></p><ul class="lvl-2"><li class="lvl-4"><strong>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</strong></li><li class="lvl-4"><strong>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</strong></li><li class="lvl-4"><strong>代码冗长，开发效率低</strong></li></ul></li><li class="lvl-2"><p><strong>Hibernate 和 JPA</strong></p><ul class="lvl-2"><li class="lvl-4"><strong>操作简便，开发效率高</strong></li><li class="lvl-4"><strong>程序中的长难复杂 SQL 需要绕过框架</strong></li><li class="lvl-4"><strong>内部自动生产的 SQL，不容易做特殊优化</strong></li><li class="lvl-4"><strong>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</strong></li><li class="lvl-4"><strong>反射操作太多，导致数据库性能下降</strong></li></ul></li><li class="lvl-2"><p><strong>MyBatis</strong></p><ul class="lvl-2"><li class="lvl-4"><strong>轻量级，性能出色</strong></li><li class="lvl-4"><strong>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</strong></li><li class="lvl-4"><strong>开发效率稍逊于HIbernate，但是完全能够接受</strong></li></ul></li></ul><p>‍</p><h1>4. 三层架构</h1><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604134708948-2091935458-20231130122208-yx7xbcg.png" alt="image">​</p><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>表现层（UI）：直接跟前端打交互（一是接收前端ajax请求，二是返回json数据给前端）</strong></p></li><li class="lvl-2"><p><strong>业务逻辑层（BLL）：一是处理表现层转发过来的前端请求（也就是具体业务），二是将从持久层获取的数据返回到表现层。</strong></p></li><li class="lvl-2"><p><strong>数据访问层（DAL）：直接操作数据库完成CRUD，并将获得的数据返回到上一层（也就是业务逻辑层）。</strong></p></li><li class="lvl-2"><p><strong>Java持久层框架：</strong></p><ul class="lvl-2"><li class="lvl-4"><strong>MyBatis</strong></li><li class="lvl-4"><strong>Hibernate（实现了JPA规范）</strong></li><li class="lvl-4"><strong>jOOQ</strong></li><li class="lvl-4"><strong>Guzz</strong></li><li class="lvl-4"><strong>Spring Data（实现了JPA规范）</strong></li><li class="lvl-4"><strong>ActiveJDBC</strong></li><li class="lvl-5"><strong>…</strong></li></ul></li></ul><h1>5. ORM： <strong>对象关系映射</strong></h1><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>O（Object）：Java虚拟机中的Java对象</strong></p></li><li class="lvl-2"><p><strong>R（Relational）：关系型数据库</strong></p></li><li class="lvl-2"><p><strong>M（Mapping）：将Java虚拟机中的Java对象映射到数据库表中一行记录，或是将数据库表中一行记录映射成Java虚拟机中的一个Java对象。</strong></p></li><li class="lvl-2"><p><strong>ORM图示</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230604134708426-1388618453-20231130122208-rfy5gtt.png" alt="image">​</p></li><li class="lvl-2"><p><strong>MyBatis属于半自动化ORM框架。</strong></p></li><li class="lvl-2"><p><strong>Hibernate属于全自动化的ORM框架。</strong></p></li></ul><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot基础篇</title>
      <link href="/posts/18bf100b.html"/>
      <url>/posts/18bf100b.html</url>
      
        <content type="html"><![CDATA[<h1>1. 初始SpringBoot</h1><p>SpringBoot程序的核心功能及优点：</p><ul class="lvl-0"><li class="lvl-2"><p>起步依赖（简化依赖配置）</p><ul class="lvl-2"><li class="lvl-4">依赖配置的书写简化就是靠这个起步依赖达成的</li></ul></li><li class="lvl-2"><p>自动配置（简化常用工程相关配置）</p><ul class="lvl-2"><li class="lvl-4">配置过于繁琐，使用自动配置就可以做响应的简化，但是内部还是很复杂的</li></ul></li><li class="lvl-2"><p>辅助功能（内置服务器，……）</p><ul class="lvl-2"><li class="lvl-4">除了上面的功能，其实SpringBoot程序还有其他的一些优势，比如我们没有配置Tomcat服务器，但是能正常运行，这是SpringBoot程序的一个可以感知到的功能，也是SpringBoot的辅助功能之一。一个辅助功能都能做的这么6，太牛了</li></ul></li></ul><p>SpringBoot 简化主要体现在四个方面</p><ul class="lvl-0"><li class="lvl-2"><p>parent</p></li><li class="lvl-2"><p>starter</p></li><li class="lvl-2"><p>引导类</p></li><li class="lvl-2"><p>内嵌tomcat</p></li></ul><h2 id="1-1-parent">1.1 parent</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>parent</strong>仅仅帮我们进行版本管理，它不负责帮你导入坐标，说白了用什么还是你自己定，只不过版本不需要你管理了。整体上来说，<strong>使用parent可以帮助开发者进行版本的统一管理</strong></p><blockquote><p><strong>关注</strong>：parent定义出来以后，并不是直接使用的，仅仅给了开发者一个说明书，但是并没有实际使用，这个一定要确认清楚</p></blockquote><h2 id="1-2-starter">1.2  starter</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>starter定义了使用某种技术时对于依赖的固定搭配格式，也是一种最佳解决方案，<strong>使用starter可以帮助开发者减少依赖配置</strong></p></blockquote><p><strong>starter与parent的区别</strong><br>朦朦胧胧中感觉starter与parent好像都是帮助我们简化配置的，但是功能又不一样，梳理一下。<br><strong>starter</strong>是一个坐标中定了若干个坐标，以前写多个的，现在写一个，<strong>是用来减少依赖配置的书写量的</strong><br><strong>parent</strong>是定义了几百个依赖版本号，以前写依赖需要自己手工控制版本，现在由SpringBoot统一管理，这样就不存在版本冲突了，<strong>是用来减少依赖冲突的</strong></p><p><strong>实际开发应用方式</strong></p><ul class="lvl-0"><li class="lvl-2"><p>实际开发中如果需要用什么技术，先去找有没有这个技术对应的starter</p><ul class="lvl-2"><li class="lvl-4"><code>如果有对应的starter，直接写starter，而且无需指定版本，版本由parent提供</code>​</li><li class="lvl-4">如果没有对应的starter，手写坐标即可</li></ul></li><li class="lvl-2"><p>实际开发中如果发现坐标出现了冲突现象，确认你要使用的可行的版本号，使用手工书写的方式添加对应依赖，覆盖SpringBoot提供给我们的配置管理</p><ul class="lvl-2"><li class="lvl-4">方式一：直接写坐标</li><li class="lvl-4">方式二：覆盖<code>&lt;properties&gt;</code>​中定义的版本号，就是下面这堆东西了，哪个冲突了覆盖哪个就OK了</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.16.3<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.19.0<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-codec.version</span>&gt;</span>1.15<span class="tag">&lt;/<span class="name">commons-codec.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-dbcp2.version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">commons-dbcp2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-lang3.version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">commons-lang3.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-pool.version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">commons-pool.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-pool2.version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">commons-pool2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2.version</span>&gt;</span>1.4.200<span class="tag">&lt;/<span class="name">h2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.4.32.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hibernate-validator.version</span>&gt;</span>6.2.0.Final<span class="tag">&lt;/<span class="name">hibernate-validator.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jackson-bom.version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">jackson-bom.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javax-jms.version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">javax-jms.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javax-json.version</span>&gt;</span>1.1.4<span class="tag">&lt;/<span class="name">javax-json.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javax-websocket.version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">javax-websocket.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jetty-el.version</span>&gt;</span>9.0.48<span class="tag">&lt;/<span class="name">jetty-el.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-引用类">1.3 引用类</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230804182941317-719648346-20231129120540-bz7vzih.png" alt="">​</p><p>SpringBoot本身是为了加速Spring程序的开发的，而Spring程序运行的基础是需要创建自己的Spring容器对象（IoC容器）并将所有的对象交给Spring的容器管理，也就是一个一个的Bean。那还了SpringBoot加速开发Spring程序，这个容器还在吗？这个疑问不用说，一定在。当前这个类运行后就会产生一个Spring容器对象，并且可以将这个对象保存起来，通过容器对象直接操作Bean。</p><blockquote><p>其实SpringBoot程序启动还是创建了一个Spring容器对象。这个类在SpringBoot程序中是所有功能的入口，称这个类为<strong>引导类</strong>。</p></blockquote><p>作为一个引导类最典型的特征就是当前类上方声明了一个注解<code>@SpringBootApplication</code>​</p><h2 id="1-4-内嵌tomcat">1.4 内嵌tomcat</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>内嵌Tomcat定义位置</strong></p><p>谁把tomcat引入到程序中的？<br>spring-boot-starter-web中的spring-boot-starter-tomcat做的。</p><p><strong>内嵌Tomcat运行原理</strong></p><p>Tomcat服务器是一款用<code>java语言</code>​开发的一款软件<br>其中Spring容器是用来管理对象的 ， tomcat服务器运行其实是以对象的形式在Spring容器中运行的</p><p><strong>更换内嵌Tomcat</strong></p><blockquote><p>用什么服务器就引入相对应的坐标</p></blockquote><h1>2. SpringBoot 基础配置</h1><h2 id="2-1-属性配置">2.1 属性配置</h2><blockquote><p>properties格式的文件书写规范是<code>key=value</code>​</p></blockquote><ol><li class="lvl-3"><p>SpringBoot程序可以在application.properties文件中进行属性配置</p></li><li class="lvl-3"><p>application.properties文件中只要输入要配置的属性关键字就可以根据提示进行设置</p></li><li class="lvl-3"><p>SpringBoot将配置信息集中在一个文件中写，不管你是服务器的配置，还是数据库的配置，总之都写在一起，逃离一个项目十几种配置文件格式的尴尬局面</p></li></ol><p>打开SpringBoot的官网，找到SpringBoot官方文档，打开查看附录中的Application Properties就可以获取到对应的配置项了，网址奉上：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties</a></p><p>其中</p><ol><li class="lvl-3"><p>SpringBoot中导入对应starter后，提供对应配置属性</p></li><li class="lvl-3"><p>书写SpringBoot配置采用关键字+提示形式书写</p></li></ol><h2 id="2-2-配置文件分类">2.2 配置文件分类</h2><ul class="lvl-0"><li class="lvl-2"><p>properties格式</p></li><li class="lvl-2"><p>yml格式</p></li><li class="lvl-2"><p>yaml格式</p></li></ul><h2 id="2-3-配置文件的优先级">2.3 配置文件的优先级</h2><blockquote><p>application.properties  &gt;  application.yml  &gt;  application.yaml</p></blockquote><ol><li class="lvl-3"><p>配置文件间的加载优先级 properties（最高）&gt; yml &gt; yaml（最低）</p></li><li class="lvl-3"><p>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留</p></li></ol><h2 id="2-4-yaml-文件">2.4 yaml 文件</h2><p>YAML（YAML Ain’t Markup Language），一种数据序列化格式。具有容易阅读、容易与脚本语言交互、以数据为核心，重数据轻格式的特点。常见的文件扩展名有两种：</p><ul class="lvl-0"><li class="lvl-2"><p>.yml格式（主流）</p></li><li class="lvl-2"><p>.yaml格式</p></li></ul><p>对于文件自身在书写时，具有严格的语法格式要求，具体如下：</p><ol><li class="lvl-3"><p>大小写敏感</p></li><li class="lvl-3"><p>属性层级关系使用多行描述，<strong>每行结尾使用冒号结束</strong></p></li><li class="lvl-3"><p>使用缩进表示层级关系，同层级左侧对齐，<code>只允许使用空格</code>​（不允许使用Tab键）</p></li><li class="lvl-3"><p>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</p></li><li class="lvl-3"><p><code>#号</code>​ 表示注释</p></li></ol><blockquote><p>核心的一条规则要记住，<strong>数据前面要加空格与冒号隔开</strong></p></blockquote><h2 id="2-4-yaml数据读取">2.4 yaml数据读取</h2><h3 id="读取单一数据">读取单一数据</h3><blockquote><p>yaml中保存的单个数据，可以使用Spring中的注解直接读取，使用@Value可以读取单个数据，属性名引用方式： <strong>${一级属性名.二级属性名……}</strong></p></blockquote><ol><li class="lvl-3"><p>使用@Value配合SpEL读取单个数据</p></li><li class="lvl-3"><p>如果数据存在多层级，依次书写层级名称即可</p></li></ol><h3 id="读取全部数据">读取全部数据</h3><blockquote><p>读取单一数据可以解决读取数据的问题，但是如果定义的数据量过大，这么一个一个书写肯定会累死人的，SpringBoot提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫做Environment，使用自动装配注解可以将所有的yaml数据封装到这个对象中</p></blockquote><ol><li class="lvl-3"><p>使用Environment对象封装全部配置信息</p></li><li class="lvl-3"><p>使用@Autowired自动装配数据到Environment对象中</p></li></ol><h3 id="读取对象数据">读取对象数据</h3><ol><li class="lvl-3"><p>使用@ConfigurationProperties注解绑定配置信息到封装类中</p></li><li class="lvl-3"><p>封装类需要定义为Spring管理的bean，否则无法进行属性注入</p></li></ol><h3 id="yaml文件中的数据引用">yaml文件中的数据引用</h3><ol><li class="lvl-3"><p>在配置文件中可以使用${属性名}方式引用属性值</p></li><li class="lvl-3"><p>如果属性中出现特殊字符，可以使用双引号包裹起来作为字符解析</p></li></ol><h1>3. 基于SpringBoot实现SSMP整合</h1><blockquote><p>整合的核心：<br>1.导入对应技术的starter坐标<br>2.根据对应技术的要求做配置</p></blockquote><h2 id="3-1-整合JUnit">3.1 整合JUnit</h2><blockquote><p>使用SpringBoot整合JUnit需要保障导入test对应的starter，不过初始化项目时此项是默认导入的</p></blockquote><ol><li class="lvl-3"><p>导入测试对应的starter</p></li><li class="lvl-3"><p>测试类使用@SpringBootTest修饰</p></li><li class="lvl-3"><p>使用自动装配的形式添加要测试的对象</p></li><li class="lvl-3"><p>测试类如果存在于引导类所在包或子包中无需指定引导类</p></li><li class="lvl-3"><p>测试类如果不存在于引导类所在的包或子包中需要通过classes属性指定引导类</p></li></ol><h2 id="3-2-整合Mybatis">3.2 整合Mybatis</h2><ol><li class="lvl-3"><p>整合操作需要勾选MyBatis技术，也就是导入MyBatis对应的starter</p></li><li class="lvl-3"><p>数据库连接相关信息转换成配置</p></li><li class="lvl-3"><p>数据库SQL映射需要添加@Mapper被容器识别到</p></li><li class="lvl-3"><p>MySQL 8.X驱动强制要求设置时区</p><ul class="lvl-2"><li class="lvl-6">修改url，添加serverTimezone设定</li><li class="lvl-6">修改MySQL数据库配置</li></ul></li><li class="lvl-3"><p>驱动类过时，提醒更换为com.mysql.cj.jdbc.Driver</p></li></ol><p>配置信息的书写：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.配置相关信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h2 id="3-3-整合MyBatis-Plus">3.3  整合MyBatis-Plus</h2><ol><li class="lvl-3"><p>手工添加MyBatis-Plus对应的starter</p></li><li class="lvl-3"><p>数据层接口使用BaseMapper简化开发</p></li><li class="lvl-3"><p>需要使用的第三方技术无法通过勾选确定时，需要手工添加坐标</p></li></ol><hr><p>MyBatis-Plus对应的坐标为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>配置文件信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.配置相关信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><hr><p>设置所有表名的通用前缀名</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span><span class="comment">#设置所有表的通用前缀名称为tbl_</span></span><br></pre></td></tr></table></figure><h2 id="3-4-整合Druid">3.4 整合Druid</h2><ol><li class="lvl-3"><p>整合Druid需要导入Druid对应的starter</p></li><li class="lvl-3"><p>根据Druid提供的配置方式进行配置</p></li><li class="lvl-3"><p>整合第三方技术通用方式</p><ul class="lvl-2"><li class="lvl-6">导入对应的starter</li><li class="lvl-6">根据提供的配置格式，配置非默认值对应的配置项</li></ul></li></ol><hr><p>Druid对应坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 计算机系统概述</title>
      <link href="/posts/31c36041.html"/>
      <url>/posts/31c36041.html</url>
      
        <content type="html"><![CDATA[<h1>1. 操作系统的概念(功能和目标)</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107151108155-20231108091632-8ldvv8p.png" alt="">​</p><h2 id="1-1-操作系统的概念">1.1 操作系统的概念</h2><ul class="lvl-0"><li class="lvl-2"><p>操作系统负责管理协调硬件，软件等计算机资源的工作</p></li><li class="lvl-2"><p>操作系统为上层用户，应用程序提供简单易用的服务</p></li><li class="lvl-2"><p>操作系统是一种系统软件</p></li></ul><h2 id="1-2-操作系统的功能和目标">1.2 操作系统的功能和目标</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107151034434-20231108091632-z0lxkrm.png" alt=""></p><h1>2. 操作系统的四个特征</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107153012994-20231108091632-zcjnizd.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>并发和共享最基本的两个性质</p></li><li class="lvl-2"><p>并发和共享互为存在条件</p></li><li class="lvl-2"><p>没有并发和共享，就谈不上虚拟和异步</p></li></ul><p><strong>注意（重要考点）：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>单核CPU同一时刻只能执行一个程序，各个程序只能并发地执行</p></li><li class="lvl-2"><p>多核CPU同一时刻可以同时执行多个程序，多个程序可以并行地执行</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107152911204-20231108091632-x2vxs25.png" alt=""></p><h1>3. 操作系统的发展与分类</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107151307984-20231108091632-w4gs7cm.png" alt=""></p><h2 id="3-1-常考的三种操作系统对比">3.1 常考的三种操作系统对比</h2><table><thead><tr><th>批操作系统</th><th>定义</th></tr></thead><tbody><tr><td>批操作系统</td><td>脱机使⽤计算机；作业是批处理的；系统内多道程序并发执⾏；交互能⼒差；</td></tr><tr><td>分时操作系统</td><td>多个⽤户同时使⽤计算机；⼈机交互强；具有每个⽤户独⽴使⽤计算机的独占性；系统响应及时</td></tr><tr><td>实时操作系统</td><td>能对控制对象做出及时反应；可靠性⾼；响应及时；但资源利⽤率低</td></tr></tbody></table><h2 id="3-2-其他操作系统对比">3.2 其他操作系统对比</h2><ul class="lvl-0"><li class="lvl-2"><p>Unix系统是多用户，多任务操作系统，属于分时操作系统<br><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107152332951-20231108091632-ccg00l2.png" alt=""></p></li></ul><h1>4. 操作系统的运行机制</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107160000944-20231108091632-y03krsv.png" alt=""></p><h2 id="4-1-程序运行的原理">4.1 程序运行的原理</h2><ul class="lvl-0"><li class="lvl-2"><p>高级语言编写代码，然后转换为机器指令</p></li><li class="lvl-2"><p>程序运行的过程就是CPU执行指令的过程</p></li></ul><h2 id="4-2-两种程序">4.2 两种程序</h2><ol><li class="lvl-3"><p>内核程序</p></li><li class="lvl-3"><p>应用程序</p></li></ol><h2 id="4-3-🐳两种指令">4.3 🐳两种指令</h2><ol><li class="lvl-3"><p>特权指令 ： 指不允许用户直接使用的指令</p><ul class="lvl-2"><li class="lvl-5">对I/O设备操作指令</li><li class="lvl-5">存取特殊寄存器的指令</li><li class="lvl-5">有关访问程序状态的指令</li><li class="lvl-5">置中断指令</li><li class="lvl-5">关中断指令</li><li class="lvl-5">清内存指令</li><li class="lvl-5">置时钟指令</li></ul></li><li class="lvl-3"><p>非特权指令：允许用户直接使用的指令 ， 不能直接访问系统中的软硬件资源 ，只限于访问用户的地址空间</p><ul class="lvl-2"><li class="lvl-5">访管/trap指令</li></ul></li></ol><h2 id="4-4-🦋两种处理器状态">4.4 🦋两种处理器状态</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>核心态【管态】</strong></p><ul class="lvl-2"><li class="lvl-4">只能在核心态运行的指令和程序：<ul class="lvl-4"><li class="lvl-6">时钟管理相关的指令【置时钟指令】</li><li class="lvl-6">中断机制相关的指令【时钟中断程序】</li><li class="lvl-6">原语相关的指令</li><li class="lvl-6">系统控制的数据结构与处理【进程调度程序】【进程切换】【缺页处理程序】【系统调用命令】</li></ul></li></ul></li><li class="lvl-2"><p><strong>用户态【目态】</strong></p><ul class="lvl-2"><li class="lvl-4">在用户态运行的指令和程序/发生的事件：<ul class="lvl-4"><li class="lvl-6">命令解释程序【属于命令接口，面向用户】</li><li class="lvl-6">访管/Trap指令，跳转指令，压栈指令</li><li class="lvl-6">广义指令(系统调用)的调用</li><li class="lvl-6">外部中断，缺页</li></ul></li></ul></li></ul><h2 id="4-5-🚀如何变态">4.5 🚀如何变态</h2><ul class="lvl-0"><li class="lvl-2"><p>内核态 ——&gt; 用户态 ： 发⽣在中断返回⽤户程序时，需要⼀条修改PSW(程序状态字)的特权命令</p></li><li class="lvl-2"><p>用户态 ——&gt; 内核态 ：发生在中断时，通过硬件完成</p></li></ul><h2 id="4-6-为什么要区别核心态和用户态">4.6 为什么要区别核心态和用户态</h2><ul class="lvl-0"><li class="lvl-2"><p>为了保护系统程序</p></li></ul><h2 id="4-7-操作系统的内核">4.7 操作系统的内核</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107160226845-20231108091632-9n0wgzw.png" alt=""></p><p><code>内核是计算机上配置的底层软件，是操作系统最基本、最核心的部分。 实现操作系统内核功能的那些程序就是内核程序。</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107163911129-20231108091632-wtxeaw3.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107163933101-20231108091632-zp9hhzc.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107163944455-20231108091632-aufktij.png" alt=""></p><h2 id="4-8-内核的功能">4.8 内核的功能</h2><ul class="lvl-0"><li class="lvl-2"><p>时钟管理：实现计时功能</p></li><li class="lvl-2"><p>中断处理：负责实现中断机制</p></li><li class="lvl-2"><p>设备管理：完成设备的请求和释放，以及设备启动等功能</p></li><li class="lvl-2"><p>文件管理：完成文件的读，写，创建和删除等功能</p></li><li class="lvl-2"><p>进程管理：完成进程的创建，撤销，阻塞及唤醒等功能</p></li><li class="lvl-2"><p>进程通信：完成进程之间的信息传递或信号传递等功能</p></li><li class="lvl-2"><p>内存管理：完成内存的分配，回收以及获取作业占用内存区大小及地址等功能</p></li><li class="lvl-2"><p><strong>原语</strong></p><ul class="lvl-2"><li class="lvl-4">是一种特殊的程序</li><li class="lvl-4">处于操作系统最底层，是最接近硬件的部分</li><li class="lvl-4">该程序运行具有原子性（运行只能一气呵成，不可中断）</li><li class="lvl-4">运行时间较短，调用频繁</li></ul></li></ul><h1>5. 中断和异常</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107164208450-20231108091632-if7ua1v.png" alt=""></p><h2 id="6-1-异常-内中断">6.1 异常(内中断)</h2><blockquote><p>基本概念</p><ul class="lvl-1"><li class="lvl-2">由CPU内部产生的意外事件</li><li class="lvl-2">是CPU执行一条命令时，由CPU在其内部检测到的、与正在执行指令相关的同步事件</li><li class="lvl-2">故障和自陷为异常</li><li class="lvl-2">终止异常和外中断属于硬件中断</li></ul></blockquote><p>‍</p><blockquote><p>分类</p><ul class="lvl-1"><li class="lvl-2">故障 ： 在引起故障的指令启动之后、执行结束前被检测到的异常事件</li><li class="lvl-2">自陷：  也称陷阱或陷入，是预先安排的一种“异常事件”，就像预先设置好的“陷阱”一样</li><li class="lvl-2">终止：若在执行指令的过程中发生了使计算机无法继续执行的硬件故障，那么程序将无法继续执行，只能终止</li></ul></blockquote><p>‍</p><blockquote><p>举例</p><ul class="lvl-1"><li class="lvl-2"><p>故障</p><ul class="lvl-3"><li class="lvl-4">指令译码时，出现“非法操作码”</li><li class="lvl-4">取数据时，发生“缺段”或“缺页”</li><li class="lvl-4">除数为零</li><li class="lvl-4">地址越界</li></ul></li><li class="lvl-2"><p>自陷</p><ul class="lvl-3"><li class="lvl-4">x86机器中，用于程序调试“断点设置”和单步跟踪功能</li><li class="lvl-4">系统调用指令</li><li class="lvl-4">条件自陷指令</li></ul></li><li class="lvl-2"><p>终止</p><ul class="lvl-3"><li class="lvl-4">控制器出错</li><li class="lvl-4">存储器校验错</li><li class="lvl-4">调出中断服务程序来重启系统</li></ul></li></ul></blockquote><p>‍</p><blockquote><p>执行时间</p><ul class="lvl-1"><li class="lvl-2">CPU在执行指令时会检查是否有异常发生</li></ul></blockquote><p>‍</p><blockquote><p>和外中断不同的是</p><ul class="lvl-1"><li class="lvl-2">缺页”或“溢出”等异常事件是由特定指令在执行过程中产生的</li><li class="lvl-2">异常的检测由CPU自身完成，不必通过外部的某个信号通知CPU</li></ul></blockquote><h2 id="6-2-中断-外中断">6.2 中断(外中断)</h2><blockquote><p>基本概念</p><ul class="lvl-1"><li class="lvl-2">由来自CPU外部的设备发出的中断请求（常用于输入输出）</li><li class="lvl-2">典型的由外部设备触发的、与当前正在执行的指令无关的异步事件</li><li class="lvl-2">外部I/O设备通过特定的中断请求信号线向CPU提出中断请求</li><li class="lvl-2">CPU每执行完一条指令就检查中断请求信号线，若检测到中断请求，则进入中断响应期</li><li class="lvl-2">外部中断都是在一条指令执行完成后（中断周期）才被检测并处理的</li></ul></blockquote><p>‍</p><blockquote><p>分类</p><ul class="lvl-1"><li class="lvl-2"><p>可屏蔽中断</p><ul class="lvl-3"><li class="lvl-4">通过可屏蔽中断请求线INTR向CPU发出的中断请求</li><li class="lvl-4">CPU可以通过在中断控制器中设置相应的屏蔽字来屏蔽或不屏蔽它，被屏蔽的中断信号将不被送到CPU</li></ul></li><li class="lvl-2"><p>不可屏蔽中断</p><ul class="lvl-3"><li class="lvl-4">通过不可屏蔽中断请求线NMI向CPU发出的中断请求</li><li class="lvl-4">通常是非常紧急的硬件故障，如电源掉电等</li></ul></li></ul></blockquote><p>‍</p><blockquote><p>举例</p><ul class="lvl-1"><li class="lvl-2">Cache缺失</li><li class="lvl-2">I/O中断：键盘输入，打印机缺纸</li><li class="lvl-2">时钟中断</li><li class="lvl-2">I/O中断请求</li></ul></blockquote><p>‍</p><blockquote><p>执行时间</p><ul class="lvl-1"><li class="lvl-2">每个指令周期末尾，CPU都会检查是否有外中断信号需要处理</li></ul></blockquote><p>‍</p><blockquote><p>和内中断不同的是</p><ul class="lvl-1"><li class="lvl-2">中断不与任何指令相关联，也不阻止任何指令的完成</li></ul></blockquote><h1>7. 系统调用</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231107180135537-20231108091632-zjrtpin.png" alt="">​</p><p>‍</p><h2 id="7-1-系统调用【又叫做广义指令】">7.1 系统调用【又叫做广义指令】</h2><blockquote><p>定义</p><ul class="lvl-1"><li class="lvl-2">操作系统对应用程序和程序员提供的接口</li><li class="lvl-2">系统调用需要触发Trap【也叫陷入/访管指令】</li><li class="lvl-2">os通过提供系统调用避免用户程序直接访问外设【应用程序通过系统调用使用OS的设备管理服务】</li></ul></blockquote><p>‍</p><blockquote><p>目的</p><ul class="lvl-1"><li class="lvl-2">请求系统服务</li></ul></blockquote><p>‍</p><blockquote><p>与库函数的区别</p><ul class="lvl-1"><li class="lvl-2"><p>库函数</p><ul class="lvl-3"><li class="lvl-4">是语言或应用程序的一部分 ，可以运行在用户空间中</li><li class="lvl-4">许多库函数都会使用系统调用来实现功能</li><li class="lvl-4">有的库函数没有使用系统调用</li></ul></li><li class="lvl-2"><p>系统调用</p><ul class="lvl-3"><li class="lvl-4">是操作系统的一部分，是内核为用户提供的程序接口，运行在内核空间</li><li class="lvl-4">未使用系统调用的库函数，执行效率通常比系统调用的高 ， 【因为系统调用要完成上下文的切换和状态的转换】</li></ul></li></ul></blockquote><p>‍</p><blockquote><p>按功能分类</p><ul class="lvl-1"><li class="lvl-2">设备管理：完成设备的请求或释放+设备启动</li><li class="lvl-2">文件管理：完成文件的读+写+创建+删除</li><li class="lvl-2">进程控制：完成进程的创建+撤销+阻塞+唤醒</li><li class="lvl-2">进程通信：完成进程之间的信息传递或信号传递</li><li class="lvl-2">内存管理：完成内存的分配+回收+获取作业占用内存区大小及始址</li></ul></blockquote><p>‍</p><blockquote><p>系统调用的过程</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110154517-pkh1tai.png" alt="image"></p><ul class="lvl-1"><li class="lvl-2"><p>step1：传参</p></li><li class="lvl-2"><p>step2：陷入指令/Trap/访管【执行系统调用】，发生在用户态</p></li><li class="lvl-2"><p>step3：由操作系统内核程序处理系统调用请求，发生在内核态</p></li><li class="lvl-2"><p>step4：返回应用程序</p></li></ul></blockquote><h2 id="7-2-系统调用和一般过程调用的差别">7.2 系统调用和一般过程调用的差别</h2><ol><li class="lvl-3"><p>运行状态不同</p><ul class="lvl-2"><li class="lvl-6">一般过程调用的调用过程和被调用过程运行在同一系统状态【用户态或内核态】</li><li class="lvl-6">系统调用的调用过程是运行在用户态，被调用过程是运行在内核态</li></ul></li><li class="lvl-3"><p>软中断进入机制</p><ul class="lvl-2"><li class="lvl-6">一般的过程调用可直接由调用过程转向被调用过程</li><li class="lvl-6">系统调用不允许由调用过程直接转向被调用过程，一般通过软中断机制，先进入操作系统内核，经内核分析后才转向相应命令处理程序</li></ul></li><li class="lvl-3"><p>返回及重新调度</p><ul class="lvl-2"><li class="lvl-6">一般过程调用被调用结束后，返回调用点继续执行</li><li class="lvl-6">系统调用被调用完后，要对系统中所有运行进程重新调度</li><li class="lvl-6">只有当调用进程仍具有最高优先权才返回调用过程继续执行</li></ul></li></ol><h2 id="7-3-系统调用的过程">7.3 系统调用的过程</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110154941-rrjhnpx.png" alt="image">​</p><p>‍</p><h1>8. 操作系统的体系结构</h1><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110155312-u0c5x1f.png" alt="image">​</p><p><img src="assets/image-20231110155432-qxl3kcc.png" alt="image">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110155548-0fcn8ht.png" alt="image">​</p><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p>微内核OS知识点补充</p><ul class="lvl-2"><li class="lvl-4">优点：【内核足够小】【基于C/S模式】【应用机制与策略分离原理】【采用面向对象技术】</li><li class="lvl-4">缺点：【性能问题】【开销偏大】</li></ul></li></ul><h1>9. 操作系统引导 【Boot】</h1><h2 id="9-1-操作系统的引导-即开机过程">9.1 操作系统的引导 即开机过程</h2><blockquote><p>开机过程</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110160543-1bhy4qy.png" alt="image">​</p><p>A、启动过程</p><ol><li class="lvl-3"><p>CPU加电，CS：IP指向FFFF0H</p></li><li class="lvl-3"><p>执行JMP指令跳转到BIOS</p></li><li class="lvl-3"><p>登记BIOS中断例程入口地址</p></li><li class="lvl-3"><p>硬件自检</p></li><li class="lvl-3"><p>进行操作系统引导</p></li></ol><p>B、引导过程</p><ul class="lvl-1"><li class="lvl-2"><p>step1：CPU从一个特定主存地址开始，取指令，执行ROM中的引导装入程序【即前面的启动过程】</p></li><li class="lvl-2"><p>step2：将磁盘的第一块----主引导记录读入内存，执行磁盘引导程序，扫描分区表</p></li><li class="lvl-2"><p>step3：从活动分区【又称主分区，即安装了操作系统的分区】读入分区引导记录，执行其中的程序</p></li><li class="lvl-2"><p>step4：从根目录下找到完整的操作系统初始化程序【即启动管理器】并执行，完成开机的一系列操作</p></li></ul><p>C、计算机加电启动过程中执行程序的过程</p><p>自检程序----&gt;引导装入程序/自举装入程序------&gt;引导程序------&gt;操作系统</p><p>D、注意点</p><table><thead><tr><th>引导装入程序/自举装入程序</th><th>是位于ROM中的自举程序（BIOS的组成部分）</th><th>用于启动具体的设备</th></tr></thead><tbody><tr><td>引导程序/启动管理器</td><td>是位于装有操作系统硬盘的活动分区的引导扇区的程序</td><td>用于引导操作系统</td></tr><tr><td>1、操作系统被装入RAM中</td><td>2、自举程序BIOS装在ROM中</td><td>3、引导程序装在硬盘中</td></tr></tbody></table></blockquote><p>‍</p><h1>10. 虚拟机</h1><p>定义： 使用虚拟化技术，将一台物理机器虚化为多台虚拟机器VM，每个虚拟机器都可用独立运行一个操作系统</p><p>分类：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231110161610-8mndk1a.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 考研408 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合Mybatis</title>
      <link href="/posts/3513a7dc.html"/>
      <url>/posts/3513a7dc.html</url>
      
        <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>导入坐标，MyBatis坐标不能少，Spring整合MyBatis还有自己专用的坐标，此外Spring进行数据库操作的jdbc坐标是必须的，剩下还有mysql驱动坐标，本例中使用了Druid数据源，这个倒是可以不要</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.导入mybatis与spring整合的jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入spring操作数据库必选的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>Spring核心配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>MyBatis要交给Spring接管的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义mybatis专用的配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line"><span class="comment">//    定义创建SqlSessionFactory对应的bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBean是由mybatis-spring包提供的，专用于整合用的对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置数据源替代原始配置中的environments的配置</span></span><br><span class="line">        sfb.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//设置类型别名替代原始配置中的typeAliases的配置</span></span><br><span class="line">        sfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sfb;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    定义加载所有的映射配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>数据源对应的bean，此处使用Druid数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>数据库连接信息（properties格式）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/spring_db?useSSL=false</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring整合系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合</title>
      <link href="/posts/254393f0.html"/>
      <url>/posts/254393f0.html</url>
      
        <content type="html"><![CDATA[<h1>1. 流程分析</h1><p>(1) 创建工程</p><ul class="lvl-0"><li class="lvl-2"><p>创建一个 Maven 的 web 工程</p></li><li class="lvl-2"><p>pom.xml 添加 SSM 需要的依赖 jar 包</p></li><li class="lvl-2"><p>编写 Web 项目的入口配置类，实现<code>AbstractAnnotationConfigDispatcherServletInitializer</code>​ 重写以下方法</p><ul class="lvl-2"><li class="lvl-4">getRootConfigClasses() ：返回 Spring 的配置类-&gt;需要<mark>SpringConfig</mark>配置类</li><li class="lvl-4">getServletConfigClasses() ：返回 SpringMVC 的配置类-&gt;需要<mark>SpringMvcConfig</mark>配置类</li><li class="lvl-4">getServletMappings() : 设置 SpringMVC 请求拦截路径规则</li><li class="lvl-4">getServletFilters() ：设置过滤器，解决 POST 请求中文乱码问题</li></ul></li></ul><p>(2)SSM 整合[<mark>重点是各个配置的编写</mark>]</p><ul class="lvl-0"><li class="lvl-2"><p>SpringConfig</p><ul class="lvl-2"><li class="lvl-4"><p>标识该类为配置类 @Configuration</p></li><li class="lvl-4"><p>扫描 Service 所在的包 @ComponentScan</p></li><li class="lvl-4"><p>在 Service 层要管理事务 @EnableTransactionManagement</p></li><li class="lvl-4"><p>读取外部的 properties 配置文件 @PropertySource</p></li><li class="lvl-4"><p>整合 Mybatis 需要引入 Mybatis 相关配置类 @Import</p><ul class="lvl-4"><li class="lvl-6"><p>第三方数据源配置类 JdbcConfig</p><ul class="lvl-6"><li class="lvl-8">构建 DataSource 数据源，DruidDataSouroce,需要注入数据库连接四要素， @Bean @Value</li><li class="lvl-8">构建平台事务管理器，DataSourceTransactionManager,@Bean</li></ul></li><li class="lvl-6"><p>Mybatis 配置类 MybatisConfig</p><ul class="lvl-6"><li class="lvl-8">构建 SqlSessionFactoryBean 并设置别名扫描与数据源，@Bean</li><li class="lvl-8">构建 MapperScannerConfigurer 并设置 DAO 层的包扫描</li></ul></li></ul></li></ul></li><li class="lvl-2"><p>SpringMvcConfig</p><ul class="lvl-2"><li class="lvl-4">标识该类为配置类 @Configuration</li><li class="lvl-4">扫描 Controller 所在的包 @ComponentScan</li><li class="lvl-4">开启 SpringMVC 注解支持 @EnableWebMvc</li></ul></li></ul><p>(3)功能模块[与具体的业务模块有关]</p><ul class="lvl-0"><li class="lvl-2"><p>创建数据库表</p></li><li class="lvl-2"><p>根据数据库表创建对应的模型类</p></li><li class="lvl-2"><p>通过 Dao 层完成数据库表的增删改查(接口+自动代理)</p></li><li class="lvl-2"><p>编写 Service 层[Service 接口+实现类]</p><ul class="lvl-2"><li class="lvl-4"><p>@Service</p></li><li class="lvl-4"><p>@Transactional</p></li><li class="lvl-4"><p>整合 Junit 对业务层进行单元测试</p><ul class="lvl-4"><li class="lvl-6">@RunWith</li><li class="lvl-6">@ContextConfiguration</li><li class="lvl-6">@Test</li></ul></li></ul></li><li class="lvl-2"><p>编写 Controller 层</p><ul class="lvl-2"><li class="lvl-4"><p>接收请求 @RequestMapping @GetMapping @PostMapping @PutMapping @DeleteMapping</p></li><li class="lvl-4"><p>接收数据 简单、POJO、嵌套 POJO、集合、数组、JSON 数据类型</p><ul class="lvl-4"><li class="lvl-6">@RequestParam</li><li class="lvl-6">@PathVariable</li><li class="lvl-6">@RequestBody</li></ul></li><li class="lvl-4"><p>转发业务层</p><ul class="lvl-4"><li class="lvl-6">@Autowired</li></ul></li><li class="lvl-4"><p>响应结果</p><ul class="lvl-4"><li class="lvl-6">@ResponseBody</li></ul></li></ul></li></ul><h1>2. 整合配置</h1><h2 id="步骤-1：创建-Maven-的-web-项目">步骤 1：创建 Maven 的 web 项目</h2><h2 id="步骤-2-添加依赖">步骤 2:添加依赖</h2><p>pom.xml 添加 SSM 所需要的依赖 jar 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_08_ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤-3-创建项目包结构">步骤 3:创建项目包结构</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155804511-276282620-20231127213207-7vaj8dn.png" alt="image">​</p><ul class="lvl-0"><li class="lvl-2"><p>config 目录存放的是相关的配置类</p></li><li class="lvl-2"><p>controller 编写的是 Controller 类</p></li><li class="lvl-2"><p>dao 存放的是 Dao 接口，因为使用的是 Mapper 接口代理方式，所以没有实现类包</p></li><li class="lvl-2"><p>service 存的是 Service 接口，impl 存放的是 Service 实现类</p></li><li class="lvl-2"><p>resources:存入的是配置文件，如 Jdbc.properties</p></li><li class="lvl-2"><p>webapp:目录可以存放静态资源</p></li><li class="lvl-2"><p>test/java:存放的是测试类</p></li></ul><h2 id="步骤-4-创建-SpringConfig-配置类">步骤 4:创建 SpringConfig 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.north.service&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤-5-创建-JdbcConfig-配置类">步骤 5:创建 JdbcConfig 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        ds.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤-6-创建-MybatisConfig-配置类">步骤 6:创建 MybatisConfig 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);</span><br><span class="line">        factoryBean.setTypeAliasesPackage(<span class="string">&quot;com.north.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.north.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤-7-创建-jdbc-properties">步骤 7:创建 jdbc.properties</h2><p>在 resources 下提供 jdbc.properties,设置数据库连接四要素</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h2 id="步骤-8-创建-SpringMVC-配置类">步骤 8:创建 SpringMVC 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.north.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤-9-创建-Web-项目入口配置类">步骤 9:创建 Web 项目入口配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载Spring配置类</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载SpringMVC配置类</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置SpringMVC请求地址拦截规则</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置post请求中文乱码过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此 SSM 整合的环境就已经搭建好了。在这个环境上，我们如何进行功能模块的开发呢?</p><h1>3. 功能模块开发</h1><blockquote><p>需求:对表 tbl_book 进行新增、修改、删除、根据 ID 查询和查询所有</p></blockquote><h2 id="步骤-1-创建数据库及表">步骤 1:创建数据库及表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database ssm_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use ssm_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_book(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  type <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  description <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `tbl_book`(`id`,`type`,`name`,`description`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring实战 第五版&#x27;</span>,<span class="string">&#x27;Spring入门经典教程，深入理解Spring原理技术内幕&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5核心原理与30个类手写实践&#x27;</span>,<span class="string">&#x27;十年沉淀之作，手写Spring精华思想&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5设计模式&#x27;</span>,<span class="string">&#x27;深入Spring源码刨析Spring源码中蕴含的10大设计模式&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring MVC+Mybatis开发从入门到项目实战&#x27;</span>,<span class="string">&#x27;全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;轻量级Java Web企业应用实战&#x27;</span>,<span class="string">&#x27;源码级刨析Spring框架，适合已掌握Java基础的读者&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Java核心技术 卷Ⅰ 基础知识(原书第11版)&#x27;</span>,<span class="string">&#x27;Core Java第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新&#x27;</span>),(<span class="number">7</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;深入理解Java虚拟机&#x27;</span>,<span class="string">&#x27;5个纬度全面刨析JVM,大厂面试知识点全覆盖&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Java编程思想(第4版)&#x27;</span>,<span class="string">&#x27;Java学习必读经典，殿堂级著作！赢得了全球程序员的广泛赞誉&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;零基础学Java(全彩版)&#x27;</span>,<span class="string">&#x27;零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术&#x27;</span>),(<span class="number">10</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播就这么做:主播高效沟通实战指南&#x27;</span>,<span class="string">&#x27;李子柒、李佳奇、薇娅成长为网红的秘密都在书中&#x27;</span>),(<span class="number">11</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播销讲实战一本通&#x27;</span>,<span class="string">&#x27;和秋叶一起学系列网络营销书籍&#x27;</span>),(<span class="number">12</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播带货:淘宝、天猫直播从新手到高手&#x27;</span>,<span class="string">&#x27;一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="步骤-2-编写模型类">步骤 2:编写模型类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(Integer id, String type, String name, String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, description=&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤-3-编写-Dao-接口">步骤 3:编写 Dao 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Insert(&quot;insert into tbl_book values(null,#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤-4-编写-Service-接口和实现类">步骤 4:编写 Service 接口和实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        bookDao.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul class="lvl-0"><li class="lvl-2"><p>bookDao 在 Service 中注入的会提示一个红线提示，为什么呢?</p><ul class="lvl-2"><li class="lvl-4">BookDao 是一个接口，没有实现类，接口是不能创建对象的，所以最终注入的应该是代理对象</li><li class="lvl-4">代理对象是由 Spring 的 IOC 容器来创建管理的</li><li class="lvl-4">IOC 容器又是在 Web 服务器启动的时候才会创建</li><li class="lvl-4">IDEA 在检测依赖关系的时候，没有找到适合的类注入，所以会提示错误提示</li><li class="lvl-4">但是程序运行的时候，代理对象就会被创建，框架会使用 DI 进行注入，所以程序运行无影响。</li></ul></li><li class="lvl-2"><p>如何解决上述问题?</p><ul class="lvl-2"><li class="lvl-4">可以不用理会，因为运行是正常的</li><li class="lvl-4">设置错误提示级别</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155805451-363376482-20231127213207-h554bqn.png" alt="image">​</p><h2 id="步骤-5-编写-Contorller-类">步骤 5:编写 Contorller 类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.update(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于图书模块的增删改查就已经完成了编写，我们可以从后往前写也可以从前往后写，最终只需要能把功能实现即可。</p><p>接下来我们就先把业务层的代码使用<code>Spring整合Junit</code>​ 的知识点进行单元测试:</p><h1>4. 单元测试</h1><h2 id="步骤-1-新建测试类">步骤 1:新建测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤-2-注入-Service-类">步骤 2:注入 Service 类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤-3-编写测试方法">步骤 3:编写测试方法</h2><p>我们先来对查询进行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 ID 查询，测试的结果为:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155806170-2079328457-20231127213207-c9eoif1.png" alt="image">​</p><p>查询所有，测试的结果为:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155806690-518214461-20231127213207-jcj96kf.png" alt="image">​</p><h1>5. PostMan 测试</h1><h2 id="5-1-新增">5.1 新增</h2><p><code>http://localhost/books</code>​</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;类别测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;书名测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;描述测试数据&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155807156-2088162009-20231127213207-vjauyuf.png" alt="image">​</p><h2 id="5-2-修改">5.2 修改</h2><p><code>http://localhost/books</code>​</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;类别测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;书名测试数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;描述测试数据&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155807590-1173018371-20231127213208-ooimbje.png" alt="image">​</p><h2 id="5-3-删除">5.3 删除</h2><p><code>http://localhost/books/13</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155808014-640341094-20231127213208-c1hqh4x.png" alt="image">​</p><h2 id="5-4-查询单个">5.4 查询单个</h2><p><code>http://localhost/books/1</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155808455-1348561215-20231127213208-vtzoewe.png" alt="image">​</p><h2 id="5-5-查询所有">5.5 查询所有</h2><p><code>http://localhost/books</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230702155808923-1038874493-20231127213208-zejdul0.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring整合系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-约束</title>
      <link href="/posts/fac97174.html"/>
      <url>/posts/fac97174.html</url>
      
        <content type="html"><![CDATA[<h1>1.概述</h1><p><strong>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</strong></p><p><strong>目的：保证数据库中数据的正确、有效性和完整性。</strong></p><p>分类:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102743391-1115602335-20231127200320-8z15694.png" alt="image-20230501090726321">​</p><blockquote><p><strong>注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。</strong></p></blockquote><h1>2. 约束演示</h1><p>案例需求： 根据需求，完成表结构的创建。需求如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102743900-1950792058-20231127200320-ze6zhnl.png" alt="image-20230501090835632">​</p><p>对应的建表语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;ID唯一标识&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;姓名&#x27;</span> ,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> age <span class="type">int</span> <span class="keyword">check</span> (age <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> age <span class="operator">&lt;=</span> <span class="number">120</span>) COMMENT <span class="string">&#x27;年龄&#x27;</span> ,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> gender <span class="type">char</span>(<span class="number">1</span>) COMMENT <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>展示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> tb_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> status <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">1</span>       <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在为字段添加约束时，我们只需要在字段之后加上约束的关键字即可，需要关注其语法。我们执行上面 的 SQL 把表结构创建完成，然后接下来，就可以通过一组数据进行测试，从而验证一下，约束是否可以 生效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom1&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;Tom2&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom3&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="keyword">null</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom3&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom4&#x27;</span>,<span class="number">80</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>,<span class="number">-1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>,<span class="number">121</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(name,age,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>,<span class="number">120</span>,<span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上面，我们是通过编写 SQL 语句的形式来完成约束的指定，那加入我们是通过图形化界面来创建表结构 时，又该如何来指定约束呢？ 只需要在创建表的时候，根据我们的需要选择对应的约束即可。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102744395-1718861358-20231127200321-2zvbays.png" alt="image-20230501095657271">​</p><h1>3.外键约束</h1><h2 id="3-1-介绍">3.1 介绍</h2><blockquote><p><strong>外键：用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</strong></p></blockquote><p>我们来看一个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102744917-1379729215-20231127200321-15i26hf.png" alt="image-20230501095802662">​</p><p>左侧的 emp 表是员工表，里面存储员工的基本信息，包含员工的 ID、姓名、年龄、职位、薪资、入职日 期、上级主管 ID、部门 ID，在员工的信息中存储的是部门的 ID dept_id，而这个部门的 ID 是关联的 部门表 dept 的主键 id，那 emp 表的 dept_id 就是外键,关联的是另一张表的主键。</p><blockquote><p><strong>注意：目前上述两张表，只是在逻辑上存在这样一层关系；在数据库层面，并未建立外键关联， 所以是无法保证数据的一致性和完整性的。</strong></p></blockquote><p>没有数据库外键关联的情况下，能够保证一致性和完整性呢，我们来测试一下。</p><p>准备数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;部门名称&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept (id, name) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;研发部&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;市场部&#x27;</span>),(<span class="number">3</span>, <span class="string">&#x27;财务部&#x27;</span>), (<span class="number">4</span>,<span class="string">&#x27;销售部&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;总经办&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">job <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;职位&#x27;</span>,</span><br><span class="line">salary <span class="type">int</span> comment <span class="string">&#x27;薪资&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">managerid <span class="type">int</span> comment <span class="string">&#x27;直属领导ID&#x27;</span>,</span><br><span class="line">dept_id <span class="type">int</span> comment <span class="string">&#x27;部门ID&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, name, age, job,salary, entrydate, managerid, dept_id)<span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;金庸&#x27;</span>, <span class="number">66</span>, <span class="string">&#x27;总裁&#x27;</span>,<span class="number">20000</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="keyword">null</span>,<span class="number">5</span>),(<span class="number">2</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="number">20</span>,<span class="string">&#x27;项目经理&#x27;</span>,<span class="number">12500</span>, <span class="string">&#x27;2005-12-05&#x27;</span>, <span class="number">1</span>,<span class="number">1</span>),(<span class="number">3</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="number">33</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">8400</span>,<span class="string">&#x27;2000-11-03&#x27;</span>, <span class="number">2</span>,<span class="number">1</span>),(<span class="number">4</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">48</span>, <span class="string">&#x27;开发&#x27;</span>,<span class="number">11000</span>, <span class="string">&#x27;2002-02-05&#x27;</span>, <span class="number">2</span>,<span class="number">1</span>),(<span class="number">5</span>, <span class="string">&#x27;常遇春&#x27;</span>,<span class="number">43</span>, <span class="string">&#x27;开发&#x27;</span>,<span class="number">10500</span>, <span class="string">&#x27;2004-09-07&#x27;</span>, <span class="number">3</span>,<span class="number">1</span>),(<span class="number">6</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;程序员鼓励师&#x27;</span>,<span class="number">6600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">2</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102745370-843964216-20231127200321-m64hkrr.png" alt="image-20230501100356071">​</p><p>结果，我们看到删除成功，而删除成功之后，部门表不存在 id 为 1 的部门，而在 emp 表中还有很多的员 工，关联的为 id 为 1 的部门，此时就出现了数据的不完整性。 而要想解决这个问题就得通过数据库的 外键约束。</p><h2 id="3-2-语法">3.2 语法</h2><blockquote><p><strong>1. 添加外键</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表 (主表列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名)</span><br><span class="line"><span class="keyword">REFERENCES</span> 主表 (主表列名) ;</span><br></pre></td></tr></table></figure><p>案例：</p><p>为 emp 表的 dept_id 字段添加外键约束,关联 dept 表的主键 id。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key (dept_id) <span class="keyword">references</span> dept(id);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102745841-1929959897-20231127200321-0lh07zi.png" alt="image-20230501100928391">​</p><p>添加了外键约束之后，我们再到 dept 表(父表)删除 id 为 1 的记录，然后看一下会发生什么现象。 此时 将会报错，不能删除或更新父表记录，因为存在外键约束。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102746286-2060850583-20231127200321-wq5sr1f.png" alt="image-20230501101202653">​</p><blockquote><p><strong>2. 删除外键</strong></p></blockquote><p>案例：</p><p>删除 emp 表的外键 fk_emp_dept_id。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_emp_id;</span><br></pre></td></tr></table></figure><p>执行成功</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102746655-1099079948-20231127200321-i2lkuz2.png" alt="image-20230501101450485">​</p><h2 id="3-3-删除-更新行为">3.3 删除/更新行为</h2><p><strong>添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除/更新行为。</strong></p><p>具体的删除/更新行 为有以下几种:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501102747148-1626119543-20231127200321-2m8iizm.png" alt="image-20230501101541309">​</p><p>具体语法为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段) <span class="keyword">REFERENCES</span></span><br><span class="line">主表名 (主表字段名) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-函数</title>
      <link href="/posts/65c29e.html"/>
      <url>/posts/65c29e.html</url>
      
        <content type="html"><![CDATA[<h1>1.概述</h1><blockquote><p><strong>函数： 是指一段可以直接被另一段程序调用的程序或代码。</strong></p></blockquote><p>使用场景：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090601622-1023274415-20231127133321-zsasasd.png" alt="image-20230430081024053">​</p><ol><li class="lvl-3"><p>在企业的 OA 或其他的人力系统中，经常会提供的有这样一个功能，每一个员工登录上来之后都能 够看到当前员工入职的天数。 而在数据库中，存储的都是入职日期，如 2000-11-12，那如果快速计 算出天数呢？</p></li><li class="lvl-3"><p>在做报表这类的业务需求中,我们要展示出学员的分数等级分布。而在数据库中，存储的是学生的 分数值，如 98/75，如何快速判定分数的等级呢？</p></li></ol><p>其实，上述的这一类的需求呢，我们通过 MySQL 中的函数都可以很方便的实现 。</p><blockquote><p>MySQL 中的函数主要分为以下四类： <strong>字符串函数、数值函数、日期函数、流程函数。</strong></p></blockquote><h1>2. 字符串函数</h1><p>MySQL 中内置了很多字符串函数，常用的几个如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090602216-1068891071-20231127133321-iib3thb.png" alt="image-20230430081249197">​</p><p>演示如下：</p><blockquote><p><strong>1. concat : 字符串拼接</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;Hello&#x27;</span> , <span class="string">&#x27; MySQL&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090602689-1726972087-20231127133321-3ctnt3o.png" alt="image-20230430081630547">​</p><blockquote><p><strong>2. lower : 全部转小写</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090603185-6116237-20231127133321-bc1pn5d.png" alt="image-20230430082052519">​</p><blockquote><p><strong>3. upper : 全部转大写</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090603698-2018602104-20231127133321-zwdhnsv.png" alt="image-20230430082245295">​</p><blockquote><p><strong>4. lpad : 左填充</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> lpad(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>意思是 ： 在字符串 01 的左边填充 - 然后填充的字符串加上 01 刚好有五个字符串</strong></p><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090604164-1025031415-20231127133321-r04e6z9.png" alt="image-20230430082630148">​</p><blockquote><p><strong>5. rpad : 右填充</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090604658-2045219695-20231127133321-rx3i189.png" alt="image-20230430082937425">​</p><blockquote><p><strong>6. trim : 去除空格</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="string">&#x27; Hello MySQL &#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090605091-563265028-20231127133322-d2b5j6r.png" alt="image-20230430083131686">​</p><blockquote><p><strong>7. substring : 截取子字符串</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;Hello MySQL&#x27;</span>,<span class="number">1</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090605526-1935867974-20231127133322-u1y1xsm.png" alt="image-20230430083316674">​</p><h1>3. 数值函数</h1><p>常见的数值函数如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090606056-2107302551-20231127133322-4fkv578.png" alt="image-20230430083742802">​</p><p>演示如下：</p><blockquote><p><strong>1. ceil：向上取整</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">1.1</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090606499-1710334136-20231127133322-x69nttr.png" alt="image-20230430102856606">​</p><blockquote><p><strong>2. floor：向下取整</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1.9</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090606933-1562435198-20231127133322-ger7w8m.png" alt="image-20230430103252431">​</p><blockquote><p><strong>3. mod：取模</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">7</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p><strong>我的理解：前面的数除以后面的数然后进行取余</strong></p><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090607377-497998419-20231127133322-cznkdit.png" alt="image-20230430103513312">​</p><blockquote><p><strong>4. rand：获取随机数</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> rand();</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090607862-325489956-20231127133322-xll89xu.png" alt="image-20230430103618418">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090608335-1900154558-20231127133322-wrpe4e4.png" alt="image-20230430103631243">​</p><blockquote><p><strong>5. round：四舍五入</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="number">2.344</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>个人理解：<strong>round() 函数 ， 后面的数字是多少就前面的数字就保留多少位小数</strong></p><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090608790-371719217-20231127133322-em6s4xk.png" alt="image-20230430103830038">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090609270-904852070-20231127133322-4ied98j.png" alt="image-20230430104020371">​</p><h1>4.日期函数</h1><p>常见的日期函数如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090609745-920385974-20231127133322-cpxvcbb.png" alt="image-20230430104406323">​</p><p>演示如下：</p><blockquote><p><strong>1. curdate：当前日期</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> curdate();</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090610198-1192012608-20231127133323-lih51qo.png" alt="image-20230430105334675">​</p><blockquote><p><strong>2. curtime：当前时间</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> curtime();</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090610614-704134119-20231127133323-z5y5sue.png" alt="image-20230430105458165">​</p><blockquote><p><strong>3. now：当前日期和时间</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> now();</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090611040-1089457852-20231127133323-2vynl76.png" alt="image-20230430105617254">​</p><blockquote><p><strong>4. YEAR , MONTH , DAY：当前年、月、日</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">YEAR</span>(now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">MONTH</span>(now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DAY</span>(now());</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090611496-109435908-20231127133323-b22dhue.png" alt="image-20230430105853093">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090611997-1189255699-20231127133323-l28ya7s.png" alt="image-20230430105913533">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090612428-413806314-20231127133323-7ucvc0u.png" alt="image-20230430105927953">​</p><blockquote><p><strong>5. date_add：增加指定的时间间隔</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> date_add(now(), <span class="type">INTERVAL</span> <span class="number">70</span> <span class="keyword">YEAR</span> );</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090612879-343758205-20231127133323-cmm7zi7.png" alt="image-20230430110123657">​</p><blockquote><p><strong>6. datediff：获取两个日期相差的天数</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2021-10-01&#x27;</span>, <span class="string">&#x27;2021-12-01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090613291-1079571065-20231127133323-iu3292u.png" alt="image-20230430110252490">​</p><h1>5. 流程函数</h1><p>流程函数也是很常用的一类函数，可以在 SQL 语句中实现条件筛选，从而提高语句的效率。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090613743-1243438736-20231127133323-admcmp7.png" alt="image-20230430124145323">​</p><p>演示如下：</p><blockquote><p><strong>1. if</strong></p><ul class="lvl-1"><li class="lvl-2"><strong>IF(value , t , f) ， 如果 value 为 true，则返回 t，否则返回 f</strong></li></ul></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if(<span class="literal">false</span>, <span class="string">&#x27;Ok&#x27;</span>, <span class="string">&#x27;Error&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090614186-406223395-20231127133323-pamwh9s.png" alt="image-20230430124322340">​</p><blockquote><p><strong>2. ifnull</strong></p><ul class="lvl-1"><li class="lvl-2"><strong>IFNULL(value1 , value2) , 如果 value1 不为空，返回 value1，否则 返 value2</strong></li></ul></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ifnull(<span class="string">&#x27;Ok&#x27;</span>,<span class="string">&#x27;Default&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;Default&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="keyword">null</span>,<span class="string">&#x27;Default&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><ol><li class="lvl-3"><p>value 不为空</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090614609-927475336-20231127133323-o7v7eul.png" alt="image-20230430124618453">​</p></li><li class="lvl-3"><p>valuel 为空</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090615055-1552296925-20231127133323-ycucsn9.png" alt="image-20230430124806458">​</p></li></ol><blockquote><p><strong>3. case when then else end</strong></p><ul class="lvl-1"><li class="lvl-2"><strong>CASE WHEN [ val1 ] THEN [res1] … ELSE [ default ] END , 如果 val1 为 true，返回 res1，… 否 则返回 default 默认值</strong></li></ul></blockquote><p>需求:</p><p>查询 emp 表的员工姓名和工作地址 (北京/上海 ----&gt; 一线城市 , 其他 ----&gt; 二线城市)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">name,</span><br><span class="line">( <span class="keyword">case</span> workaddress <span class="keyword">when</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">when</span> <span class="string">&#x27;上海&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">else</span></span><br><span class="line"><span class="string">&#x27;二线城市&#x27;</span> <span class="keyword">end</span> ) <span class="keyword">as</span> <span class="string">&#x27;工作地址&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">id <span class="type">int</span> comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">math <span class="type">int</span> comment <span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">english <span class="type">int</span> comment <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">chinese <span class="type">int</span> comment <span class="string">&#x27;语文&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;学员成绩表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(id, name, math, english, chinese) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">67</span>, <span class="number">88</span>, <span class="number">95</span>), (<span class="number">2</span>, <span class="string">&#x27;Rose&#x27;</span> , <span class="number">23</span>, <span class="number">66</span>, <span class="number">90</span>),(<span class="number">3</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">56</span>, <span class="number">98</span>, <span class="number">76</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090615457-1765753616-20231127133323-uqhdfgj.png" alt="image-20230430125214182">​</p><p>具体的 SQL 语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">id,</span><br><span class="line">name,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> math <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> math <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span> )</span><br><span class="line"><span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> english <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> english <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line"><span class="keyword">end</span> ) <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> chinese <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> chinese <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line"><span class="keyword">end</span> ) <span class="string">&#x27;语文&#x27;</span></span><br><span class="line"><span class="keyword">from</span> score;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230501090615881-19027710-20231127133324-lq2fkeq.png" alt="image-20230430125500146">​</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-SQL</title>
      <link href="/posts/fdab9a5f.html"/>
      <url>/posts/fdab9a5f.html</url>
      
        <content type="html"><![CDATA[<h1>1. SQL</h1><blockquote><p>全称 Structured Query Language，<strong>结构化查询语言</strong>。操作关系型数据库的编程语言，定义了 一套操作关系型数据库统一标准 。</p></blockquote><h1>2. SQL 通用语法</h1><p>1). SQL 语句可以单行或多行书写，<strong>以分号结尾。</strong></p><p>2). <strong>SQL 语句可以使用空格</strong>/<strong>缩进来增强语句的可读性。</strong></p><p>3). MySQL 数据库的 SQL 语句<strong>不区分大小写</strong>，关键字建议使用大写。</p><p>4). <strong>注释：</strong></p><blockquote><p>单行注释：-- 注释内容 或 # 注释内容</p><p>多行注释：/_ 注释内容 _/</p></blockquote><h1>3. SQL 分类</h1><blockquote><p>SQL 语句，根据其功能，主要分为四类：<strong>DDL、DML、DQL、DCL。</strong></p></blockquote><table><thead><tr><th style="text-align:center">分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center"><strong>DDL</strong></td><td>Data Definition Language</td><td>数据定义语言，用来定义<strong>数据库对象</strong>(<strong>数据库，表， 字段</strong>)</td></tr><tr><td style="text-align:center"><strong>DML</strong></td><td>Data Manipulation Language</td><td>数据操作语言，用来对<strong>数据库表中的数据进行增删改</strong></td></tr><tr><td style="text-align:center"><strong>DQL</strong></td><td>Data Query Language</td><td>数据查询语言，用来<strong>查询数据库中表的记录</strong></td></tr><tr><td style="text-align:center"><strong>DCL</strong></td><td>Data Control Language</td><td>数据控制语言，用来<strong>创建数据库用户、控制数据库的 访问权限</strong></td></tr></tbody></table><h1>4. DDL</h1><blockquote><p>Data Definition Language，数据定义语言，<strong>用来定义数据库对象(数据库，表，字段) 。</strong></p></blockquote><h2 id="4-1-数据库操作">4.1 数据库操作</h2><blockquote><p><strong>查询所有数据</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> student            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>查询当前数据库</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> database();</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> database() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> student    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>创建数据库</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database [ if <span class="keyword">not</span> <span class="keyword">exists</span> ] 数据库名 [ <span class="keyword">default</span> charset 字符集 ] [ <span class="keyword">collate</span> 排序规则 ] ;</span><br></pre></td></tr></table></figure><p>案例：</p><p>创建一个 itcast 数据库, 使用数据库默认的字符集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database itcast;</span><br></pre></td></tr></table></figure><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database itcast;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> itcast             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> student            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在同一个数据库服务器中，不能创建两个名称相同的数据库，否则将会报错。(也就是同一个数据库创建两遍会报错)</p><p><strong>报错的结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database itcast;</span><br><span class="line">ERROR <span class="number">1007</span> (HY000): Can<span class="string">&#x27;t create database &#x27;</span>itcast<span class="string">&#x27;; database exists</span></span><br><span class="line"><span class="string">mysql&gt; create database if not exists itcast;</span></span><br></pre></td></tr></table></figure><p>可以通过 i<strong>f not exists 参数</strong>来解决这个问题，数据库不存在, 则创建该数据库，如果存在，则不创建。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> extists itcast;</span><br></pre></td></tr></table></figure><p><strong>使用结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> itcast;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>创建一个 north 数据库，并且指定字符集</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database north <span class="keyword">default</span> charset utf8mb4 ;</span><br></pre></td></tr></table></figure><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database north <span class="keyword">default</span> charset utf8mb4</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> itcast             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> north              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> student            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>删除数据库</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [ if <span class="keyword">exists</span> ] 数据库名 ;</span><br></pre></td></tr></table></figure><p><strong>如果删除一个不存在的数据库，将会报错</strong>。此时，可以加上<strong>参数 if exists</strong> ，如果数据库存在，再 执行删除，否则不执行删除。</p><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database if <span class="keyword">exists</span> north;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221759330-800741048-20231127121716-x3ziv9h.png" alt="image-20230422173017680">​</p><blockquote><p><strong>切换数据库</strong></p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><p><strong>我们要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则是不能操作的。</strong>  比如，切换到 itcast 数据，执行如下 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use itcast;</span><br></pre></td></tr></table></figure><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use itcast</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h2 id="4-2-表操作">4.2 表操作</h2><h3 id="4-2-1-表操作-—-查询创建">4.2.1 表操作 —&gt; 查询创建</h3><blockquote><p><strong>查询当前数据库所有表</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p>注意 ：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>使用表查询的前提是 use 当前的数据库</strong></p></li></ul><p>比如,我们可以切换到 sys 这个系统数据库,并查看系统数据库中的所有表结构。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use sys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p><strong>结果展示：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use sys;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_sys                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> host_summary                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> host_summary_by_file_io                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> host_summary_by_file_io_type                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> host_summary_by_stages                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> host_summary_by_statement_latency             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> host_summary_by_statement_type                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_stats_by_schema                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_stats_by_table                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_lock_waits                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> io_by_thread_by_latency                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> io_global_by_file_by_bytes                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> io_global_by_file_by_latency                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> io_global_by_wait_by_bytes                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> io_global_by_wait_by_latency                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> latest_file_io                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_by_host_by_current_bytes               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_by_thread_by_current_bytes             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_by_user_by_current_bytes               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_global_by_current_bytes                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_global_total                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> metrics                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> processlist                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ps_check_lost_instrumentation                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_auto_increment_columns                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_index_statistics                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_object_overview                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_redundant_indexes                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_table_lock_waits                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_table_statistics                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_table_statistics_with_buffer           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_tables_with_full_table_scans           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> schema_unused_indexes                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> session                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> session_ssl_status                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statement_analysis                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statements_with_errors_or_warnings            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statements_with_full_table_scans              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statements_with_runtimes_in_95th_percentile   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statements_with_sorting                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statements_with_temp_tables                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys_config                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary_by_file_io                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary_by_file_io_type                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary_by_stages                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary_by_statement_latency             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_summary_by_statement_type                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> version                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> wait_classes_global_by_avg_latency            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> wait_classes_global_by_latency                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> waits_by_host_by_latency                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> waits_by_user_by_latency                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> waits_global_by_latency                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary_by_file_io                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary_by_file_io_type                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary_by_stages                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary_by_statement_latency           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$host_summary_by_statement_type              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$innodb_buffer_stats_by_schema               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$innodb_buffer_stats_by_table                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$innodb_lock_waits                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$io_by_thread_by_latency                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$io_global_by_file_by_bytes                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$io_global_by_file_by_latency                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$io_global_by_wait_by_bytes                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$io_global_by_wait_by_latency                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$latest_file_io                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$memory_by_host_by_current_bytes             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$memory_by_thread_by_current_bytes           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$memory_by_user_by_current_bytes             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$memory_global_by_current_bytes              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$memory_global_total                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$processlist                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$ps_digest_95th_percentile_by_avg_us         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$ps_digest_avg_latency_distribution          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$ps_schema_table_statistics_io               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_flattened_keys                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_index_statistics                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_table_lock_waits                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_table_statistics                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_table_statistics_with_buffer         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$schema_tables_with_full_table_scans         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$session                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statement_analysis                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statements_with_errors_or_warnings          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statements_with_full_table_scans            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statements_with_runtimes_in_95th_percentile <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statements_with_sorting                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$statements_with_temp_tables                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary_by_file_io                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary_by_file_io_type                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary_by_stages                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary_by_statement_latency           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$user_summary_by_statement_type              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$wait_classes_global_by_avg_latency          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$wait_classes_global_by_latency              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$waits_by_host_by_latency                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$waits_by_user_by_latency                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x$waits_global_by_latency                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="number">101</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>查看指定表结构</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><p>通过这条指令，可以查看到<strong>指定表的字段，字段的类型、是否可以为 NULL</strong>，<strong>是否存在默认值等信息。</strong></p><p><strong>结果显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> tb_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>查询指定表的建表语句</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>通过这条指令，<strong>主要是用来查看建表语句的</strong>，而有部分参数我们在创建表的时候，并未指定也会查询 到，因为这部分是<strong>数据库的默认值</strong>，如：<strong>存储引擎、字符集等。</strong></p><p><strong>结果显示：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tb_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>   <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span></span><br><span class="line"></span><br><span class="line">                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> tb_user <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `gender` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>创建表结构</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [ COMMENT 字段<span class="number">1</span>注释 ],</span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释 ],</span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 [COMMENT 字段<span class="number">3</span>注释 ],</span><br><span class="line">......</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释 ]</span><br><span class="line">) [ COMMENT 表注释 ] ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：  <strong>[…] 内为可选参数，最后一个字段后面没有逗号</strong></p><p>比如，我们创建一张表 tb_user ，对应的结构如下，那么建表语句为：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">age</th><th style="text-align:center">gender</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">陈平安</td><td style="text-align:center">19</td><td style="text-align:center">男</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">徐凤年</td><td style="text-align:center">23</td><td style="text-align:center">男</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">李长寿</td><td style="text-align:center">25</td><td style="text-align:center">男</td></tr></tbody></table><p><strong>创建语法展示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_user (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> gender <span class="type">varchar</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) comment <span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="4-2-2-表操作-—-数据类型">4.2.2 表操作 —&gt; 数据类型</h3><p>MySQL 中的数据类型有很多，主要分为三类：<strong>数值类型</strong>、<strong>字符串类型</strong>、<strong>日期时间类</strong>型。</p><blockquote><p><strong>数值类型</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221759970-560171444-20231127121717-yhodmfy.png" alt="image-20230423090920746">​</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 年龄字段 <span class="comment">-- 不会出现负数, 而且人的年龄不会太大</span></span><br><span class="line">age tinyint unsigned</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 分数 <span class="comment">-- 总分100分, 最多出现一位小数</span></span><br><span class="line">score <span class="keyword">double</span>(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>字符串类型</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221800525-19883521-20231127121717-mrtip84.png" alt="image-20230423101815176">​</p><p><strong>注意：</strong></p><p><strong>char</strong> 与 <strong>varchar</strong> 都可以描述字符串，<strong>char 是定长字符串</strong>，<strong>指定长度多长，就占用多少个字符，和 字段值的长度无关</strong> 。<strong>而 varchar 是变长字符串，指定的长度为最大占用长度</strong> 。<strong>相对来说，char 的性 能会更高些。</strong></p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 用户名 username <span class="comment">------&gt; 长度不定, 最长不会超过50</span></span><br><span class="line">username <span class="type">varchar</span>(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 性别 gender <span class="comment">---------&gt; 存储值, 不是男,就是女</span></span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>). 手机号 phone <span class="comment">--------&gt; 固定长度为11</span></span><br><span class="line">phone <span class="type">char</span>(<span class="number">11</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>日期时间类型</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221801031-81344008-20231127121717-i9obu6x.png" alt="image-20230423102840777">​</p><p><strong>如：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 生日字段 birthday</span><br><span class="line">birthday <span class="type">date</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 创建时间 createtime</span><br><span class="line">createtime datetime</span><br></pre></td></tr></table></figure><h3 id="4-2-3-表操作-案例">4.2.3 表操作-案例</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221801458-1949782738-20231127121717-0jrn8r2.png" alt="image-20230423103753973">​</p><p><strong>对应的建表语句如下:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">workno <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">idcard <span class="type">char</span>(<span class="number">18</span>) comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SQL 语句编写完毕之后，就可以在 MySQL 的命令行中执行 SQL，然后也可以通过 desc 指令查询表结构 信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>表结构创建好了，里面的 name 字段是 varchar 类型，最大长度为 10，也就意味着如果超过 10 将会报 错，如果我们想修改这个字段的类型 或 修改字段的长度该如何操作呢？接下来再来讲解 DDL 语句中， 如何操作表字段。</p><h3 id="4-2-4-表操作-修改">4.2.4 表操作-修改</h3><blockquote><p><strong>添加字段</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure><p>案例：</p><p>为 emp 表增加一个新的字段”昵称”为 nickname，类型为 varchar(20)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> nickname <span class="type">varchar</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;昵称&#x27;</span>;</span><br></pre></td></tr></table></figure><p>效果显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> nickname <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;昵称&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>结果显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> nickname  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221801850-899687670-20231127121717-g1w1w0e.png" alt="image-20230423123706803">​</p><blockquote><p><strong>修改数据类型</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型 (长度)</span><br></pre></td></tr></table></figure><p>效果展示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp modify nickname <span class="type">varchar</span>(<span class="number">30</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221802198-201021965-20231127121717-5ewg2fq.png" alt="image-20230423124143177">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221802627-1668094539-20231127121717-xbozprc.png" alt="image-20230423124206923">​</p><blockquote><p><strong>修改字段名和字段类型</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><p>将 emp 表的 nickname 字段修改为 username，类型为 varchar(30)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp CHANGE nickname username <span class="type">varchar</span>(<span class="number">30</span>) COMMENT <span class="string">&#x27;昵称&#x27;</span>;</span><br></pre></td></tr></table></figure><p>效果展示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp change nickname username <span class="type">varchar</span>(<span class="number">30</span>) comment <span class="string">&#x27;昵称&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221803020-1547027412-20231127121717-hspl377.png" alt="image-20230423124605714">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> nickname  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221803427-166402159-20231127121717-uvnyaoh.png" alt="image-20230423124621768">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> username  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>删除字段</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><p>案例：</p><p>将 emp 表的字段 username 删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> username;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221803834-33311679-20231127121717-ce4lllv.png" alt="image-20230423124943398">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> username  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221804230-1409675547-20231127121718-4b5f6y7.png" alt="image-20230423124958626">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> username;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>修改表名</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure><p>案例:</p><p>将 emp 表的表名修改为 employee</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp RENAME <span class="keyword">TO</span> employee;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221804546-358246442-20231127121718-fs72rpx.png" alt="image-20230423125202943">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp rename <span class="keyword">to</span> employee;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221804903-858357145-20231127121718-473rj55.png" alt="image-20230423125338360">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_itcast <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> employee         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tb_user          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="4-2-5-表操作-删除">4.2.5 表操作-删除</h3><blockquote><p><strong>删除表</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">EXISTS</span> ] 表名;</span><br></pre></td></tr></table></figure><p>可选项 <strong>IF EXISTS 代表，只有表名存在时才会删除该表，表名不存在，则不执行删除操作</strong>(<strong>如果不 加该参数项，删除一张不存在的表，执行将会报错</strong>)。</p><p>案例:</p><p>如果 tb_user 表存在，则删除 tb_user 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>执行前：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_itcast <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> employee         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tb_user          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>执行后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_itcast <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> employee         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>删除指定表, 并重新创建表</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">truncate</span> <span class="keyword">table</span> employee;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">truncate</span> <span class="keyword">table</span> employee;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_itcast <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> employee         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type             <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> workno    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender    <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age       <span class="operator">|</span> tinyint unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> idcard    <span class="operator">|</span> <span class="type">char</span>(<span class="number">18</span>)         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> entrydate <span class="operator">|</span> <span class="type">date</span>             <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意: 在删除表的时候，表中的全部数据也都会被删除。</strong></p></blockquote><h1>5. 图形化界面工具</h1><h2 id="5-1-安装">5.1 安装</h2><ol><li class="lvl-3"><p>找到资料中准备好的安装包，双击开始安装</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221805268-1162203395-20231127121718-ltajb5c.png" alt="image-20230423130211231">​</p></li><li class="lvl-3"><p>点击 next，一步一步的完成安装</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221805770-1360948783-20231127121718-ts25kfj.png" alt="image-20230423130230386">​</p></li><li class="lvl-3"><p>选择 DataGrip 的安装目录，然后选择下一步</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221806319-1350096740-20231127121718-skmqjbh.png" alt="image-20230423130258571">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221806790-352462778-20231127121718-y8djxxy.png" alt="image-20230423130317687">​</p></li><li class="lvl-3"><p>下一步，执行安装</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221807208-1054886330-20231127121718-tpmihmb.png" alt="image-20230423130334254">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221807657-963900819-20231127121718-vn8xre7.png" alt="image-20230423130342663">​</p></li></ol><h2 id="5-2-使用">5.2 使用</h2><blockquote><p><strong>1. 添加数据源</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221808194-1666694291-20231127121719-hvcuto6.png" alt="image-20230423130426665">​</p><p>配置以及驱动 jar 包下载完毕之后，就可以点击 “Test Connection” 就可以测试，是否可以连接 MySQL，如果出现 “<strong>Successed</strong>”，就表名连接成功了 。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221808692-1090481734-20231127121719-8qoqggh.png" alt="image-20230423130840015">​</p><blockquote><p><strong>2. 展示所有数据库</strong></p></blockquote><p>连接上了 MySQL 服务之后，并未展示出所有的数据库，此时，我们需要设置，展示所有的数据库，具体 操作如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221809068-1324353060-20231127121719-n6us21n.png" alt="image-20230423130901734">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221809436-1448677270-20231127121719-wy941go.png" alt="image-20230423130920225">​</p><blockquote><p><strong>3. 创建数据库</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221809906-372530165-20231127121719-l9vya1j.png" alt="image-20230423131000791">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">注意:</span><br><span class="line"></span><br><span class="line">以下两种方式都可以创建数据库：</span><br><span class="line"></span><br><span class="line">A. <span class="keyword">create</span> database db01;</span><br><span class="line"></span><br><span class="line">B. <span class="keyword">create</span> schema db01;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>4. 创建表</strong></p></blockquote><p>在指定的数据库上面右键，选择<strong>new –&gt; Table</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221810404-1491780438-20231127121719-2baoqhn.png" alt="image-20230423131113903">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221810977-589538117-20231127121719-xm9qnpw.png" alt="image-20230423131127797">​</p><blockquote><p><strong>5. 修改表结构</strong></p></blockquote><p>在需要修改的表上，右键选择  <strong>&quot;Modify Table…&quot;</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221811623-850205127-20231127121719-ydf2eif.png" alt="image-20230423131231755">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221812064-1684590522-20231127121720-azeeq7z.png" alt="image-20230423131244726">​</p><blockquote><p>如果想增加字段，直接点击+号，录入字段信息，然后点击 Execute 即可。</p><p>如果想删除字段，直接点击-号，就可以删除字段，然后点击 Execute 即可。</p><p>如果想修改字段，双击对应的字段，修改字段信息，然后点击 Execute 即可。</p><p>如果要修改表名，或表的注释，直接在输入框修改，然后点击 Execute 即可。</p></blockquote><blockquote><p><strong>6. 在 DataGrip 中执行 SQL 语句</strong></p></blockquote><p>在指定的数据库上，右键，选择 <strong>New –&gt; Query Console</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221812575-119534486-20231127121720-8z1hfef.png" alt="image-20230423131348053">​</p><p>然后就可以在打开的 Query Console 控制台，并在控制台中编写 SQL，执行 SQL。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221813037-1146047136-20231127121720-1pxp5mz.png" alt="image-20230423131403442">​</p><h1>6. DML</h1><p>DML 英文全称是 Data Manipulation Language(数据操作语言)，<strong>用来对数据库中表的数据记录进 行增、删、改操作。</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>添加数据（INSERT）</strong></p></li><li class="lvl-2"><p><strong>修改数据（UPDATE）</strong></p></li><li class="lvl-2"><p><strong>删除数据（DELETE）</strong></p></li></ul><h2 id="6-1-添加数据">6.1 添加数据</h2><blockquote><p><strong>1. 给指定字段添加数据</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>案例:</p><p>给 employee 表所有的字段添加数据 ；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(id,workno,name,gender,age,idcard,entrydate)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Itcast&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;123456789012345678&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>插入数据完成之后，我们有两种方式，查询数据库的数据：</p><p><strong>A. 方式一</strong></p><p>在左侧的表名上双击，就可以查看这张表的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221813424-1577950796-20231127121720-76nfjpv.png" alt="image-20230423195708841">​</p><p><strong>B. 方式二</strong></p><p>可以直接一条查询数据的 SQL 语句, 语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><p>查询结果如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> workno <span class="operator">|</span> name   <span class="operator">|</span> gender <span class="operator">|</span> age  <span class="operator">|</span> idcard             <span class="operator">|</span> entrydate  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span> 徐凤年 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">23</span> <span class="operator">|</span> <span class="number">333333333333333333</span> <span class="operator">|</span> <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>案例:</p><p>给 employee 表所有的字段添加数据</p><p>执行如下 SQL，添加的年龄字段值为-1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(id,workno,name,gender,age,idcard,entrydate)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Itcast&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">-1</span>,<span class="string">&#x27;123456789012345678&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行上述的 SQL 语句时，报错了，具体的错误信息如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> employee(id , workno , name , gender , age , idcard , entrydate) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Itcast&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">-1</span>,<span class="string">&#x27;123456789012345678&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1264</span> (<span class="number">22003</span>): <span class="keyword">Out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">value</span> <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>因为 employee 表的 age 字段类型为 <strong>tinyint</strong>，而且还是<strong>无符号的 unsigned</strong> ，所以<strong>取值只能在 0-255 之间。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221813821-820043321-20231127121720-1jx2vj4.png" alt="image-20230423200022139">​</p><blockquote><p><strong>2. 给全部字段添加数据</strong></p></blockquote><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>案例：</p><p>插入数据到 employee 表，具体的 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;张无忌&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;123456789012345670&#x27;</span>,<span class="string">&#x27;2005-01-</span></span><br><span class="line"><span class="string">01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">2</span> , <span class="string">&#x27;2&#x27;</span> , <span class="string">&#x27;张无忌&#x27;</span> , <span class="string">&#x27;男&#x27;</span> , <span class="number">18</span> , <span class="string">&#x27;123456789012345670&#x27;</span> , <span class="string">&#x27;2005-01-01&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> workno <span class="operator">|</span> name   <span class="operator">|</span> gender <span class="operator">|</span> age  <span class="operator">|</span> idcard             <span class="operator">|</span> entrydate  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span> 徐凤年 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">23</span> <span class="operator">|</span> <span class="number">333333333333333333</span> <span class="operator">|</span> <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span>      <span class="operator">|</span> 张无忌 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">123456789012345670</span> <span class="operator">|</span> <span class="number">2005</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>3. 批量添加数据</strong></p></blockquote><p><strong>语法：</strong></p><p>第一种：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值</span><br><span class="line"><span class="number">1</span>, 值<span class="number">2</span>, ...) ;</span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...) ;</span><br></pre></td></tr></table></figure><p>案例：</p><p>批量插入数据到 employee 表，具体的 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;韦一笑&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;123456789012345670&#x27;</span>,<span class="string">&#x27;2005-01-</span></span><br><span class="line"><span class="string">01&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;123456789012345670&#x27;</span>,<span class="string">&#x27;2005-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;韦一笑&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;123456789012345670&#x27;</span>,<span class="string">&#x27;2005-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;123456789012345670&#x27;</span>,<span class="string">&#x27;2005-01-01&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">Records: <span class="number">2</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> workno <span class="operator">|</span> name   <span class="operator">|</span> gender <span class="operator">|</span> age  <span class="operator">|</span> idcard             <span class="operator">|</span> entrydate  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span> 徐凤年 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">23</span> <span class="operator">|</span> <span class="number">333333333333333333</span> <span class="operator">|</span> <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span>      <span class="operator">|</span> 张无忌 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">123456789012345670</span> <span class="operator">|</span> <span class="number">2005</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> <span class="number">3</span>      <span class="operator">|</span> 韦一笑 <span class="operator">|</span> 男     <span class="operator">|</span>   <span class="number">38</span> <span class="operator">|</span> <span class="number">123456789012345670</span> <span class="operator">|</span> <span class="number">2005</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> <span class="number">4</span>      <span class="operator">|</span> 赵敏   <span class="operator">|</span> 女     <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">123456789012345670</span> <span class="operator">|</span> <span class="number">2005</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+--------+------+--------------------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</strong></p></li><li class="lvl-2"><p><strong>字符串和日期型数据应该包含在引号中。</strong></p></li><li class="lvl-2"><p><strong>插入的数据大小，应该在字段的规定范围内。</strong></p></li></ul><h2 id="6-2-修改数据">6.2 修改数据</h2><blockquote><p><strong>修改数据的具体语法为:</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span> , 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span> , .... [ <span class="keyword">WHERE</span> 条件 ] ;</span><br></pre></td></tr></table></figure><p>案例：</p><p>A. 修改 id 为 1 的数据，将 name 修改为陈平安</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;陈平安&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221814232-369002850-20231127121720-qdo3ccd.png" alt="image-20230426083731355">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221814578-1062717177-20231127121720-bbxm7fl.png" alt="image-20230426084008534">​</p><p>B. 修改 id 为 1 的数据, 将 name 修改为小昭, gender 修改为 女</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;小昭&#x27;</span> , gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221814982-920438443-20231127121720-edhel6i.png" alt="image-20230426084114734">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221815412-661545022-20231127121720-6uuf4l5.png" alt="image-20230426084255680">​</p><p>C. 将所有的员工入职日期修改为 2008-01-01</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> entrydate <span class="operator">=</span> <span class="string">&#x27;2008-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221815770-1967120081-20231127121720-c5mgxr3.png" alt="image-20230426084349465">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221816162-1676998925-20231127121721-r58rw08.png" alt="image-20230426084506993">​</p><blockquote><p><strong>注意事项:</strong></p><p><strong>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</strong></p></blockquote><h2 id="6-3-删除数据">6.3 删除数据</h2><blockquote><p><strong>删除数据的具体语法为</strong>：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [ <span class="keyword">WHERE</span> 条件 ] ;</span><br></pre></td></tr></table></figure><p>案例:</p><p>A. 删除 gender 为女的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> employee <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221816600-505597524-20231127121721-07e9awn.png" alt="image-20230426084840545">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221816990-750263586-20231127121721-oseref7.png" alt="image-20230426084913968">​</p><p>B. 删除所有员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221816990-750263586-20231127121721-t52w1dc.png" alt="image-20230426084913968">​</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221817297-740564317-20231127121721-m6syuuo.png" alt="image-20230426085111316">​</p><blockquote><p><strong>注意事项：</strong></p><ul class="lvl-1"><li class="lvl-2"><strong>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数 据。</strong></li><li class="lvl-2"><strong>DELETE 语句不能删除某一个字段的值(可以使用 UPDATE，将该字段值置为 NULL 即 可)。</strong></li><li class="lvl-2"><strong>当进行删除全部数据操作时，datagrip 会提示我们，询问是否确认删除，我们直接点击 Execute 即可。</strong></li></ul></blockquote><h1>7.DQL</h1><p>DQL 英文全称是<code>Data Query Language(数据查询语言)</code>​，数据查询语言，<code>用来查询数据库中表的记录</code>​。</p><blockquote><p><strong>查询关键字: SELECT</strong></p></blockquote><p>在一个正常的业务系统中，查询操作的频次是要远高于增删改的，当我们去访问企业官网、电商网站， 在这些网站中我们所看到的数据，实际都是需要从数据库中查询并展示的。而且在查询的过程中，可能 还会涉及到条件、排序、分页等操作。</p><p><strong>数据准备</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">workno <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">idcard <span class="type">char</span>(<span class="number">18</span>) comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">workaddress <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;工作地址&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;00001&#x27;</span>, <span class="string">&#x27;柳岩666&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;123456789&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;00002&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;123456789012345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-09-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;00003&#x27;</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;123456789712345670&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2005-08-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;00004&#x27;</span>, <span class="string">&#x27;赵敏&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;123456757123845670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2009-12-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;00005&#x27;</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;123456769012345678&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2007-07-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;00006&#x27;</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;12345678931234567X&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2006-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;00007&#x27;</span>, <span class="string">&#x27;范瑶&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">40</span>, <span class="string">&#x27;123456789212345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;00008&#x27;</span>, <span class="string">&#x27;黛绮丝&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;123456157123645670&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;00009&#x27;</span>, <span class="string">&#x27;范凉凉&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">45</span>, <span class="string">&#x27;123156789012345678&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2010-04-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;00010&#x27;</span>, <span class="string">&#x27;陈友谅&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">53</span>, <span class="string">&#x27;123456789012345670&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2011-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;00011&#x27;</span>, <span class="string">&#x27;张士诚&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">55</span>, <span class="string">&#x27;123567897123465670&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;00012&#x27;</span>, <span class="string">&#x27;常遇春&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;123446757152345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2004-02-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;00013&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">88</span>, <span class="string">&#x27;123656789012345678&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2020-11-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;00014&#x27;</span>, <span class="string">&#x27;灭绝&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">65</span>, <span class="string">&#x27;123456719012345670&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;00015&#x27;</span>, <span class="string">&#x27;胡青牛&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">70</span>, <span class="string">&#x27;12345674971234567X&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2018-04-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">&#x27;00016&#x27;</span>, <span class="string">&#x27;周芷若&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="keyword">null</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2012-06-01&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="7-1-基本语法">7.1 基本语法</h2><blockquote><p><strong>DQL 查询语句，语法结构如下：</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><p><strong>语法拆分：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>基本查询（不带任何条件）</p></li><li class="lvl-2"><p>条件查询（WHERE）</p></li><li class="lvl-2"><p>聚合函数（count、max、min、avg、sum）</p></li><li class="lvl-2"><p>分组查询（group by）</p></li><li class="lvl-2"><p>排序查询（order by）</p></li><li class="lvl-2"><p>分页查询（limit）</p></li></ul><h2 id="7-2-基础查询">7.2 基础查询</h2><p><strong>在基本查询的 DQL 语句中，不带任何的查询条件，查询的语法如下：</strong></p><blockquote><p><strong>1. 查询多个字段</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3</span> ... <span class="keyword">FROM</span> 表名 ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意 : * 号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）。</strong></p></blockquote><blockquote><p><strong>2. 字段设置别名</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [ <span class="keyword">AS</span> 别名<span class="number">1</span> ] , 字段<span class="number">2</span> [ <span class="keyword">AS</span> 别名<span class="number">2</span> ] ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [ 别名<span class="number">1</span> ] , 字段<span class="number">2</span> [ 别名<span class="number">2</span> ] ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><blockquote><p><strong>3. 去除重复记录</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>案例：</p><blockquote><p>A. 查询指定字段 name, workno, age 并返回</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,workno,age <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221817680-1204751724-20231127121721-zg8xt2j.png" alt="image-20230426095350030">​</p><blockquote><p>B. 查询返回所有字段</p></blockquote><p><strong>第一种：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id ,workno,name,gender,age,idcard,workaddress,entrydate <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><strong>第二种：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>结果显示是想同的 ， 不过更建议使用第一中方法：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221818153-54577779-20231127121721-jkwnab2.png" alt="image-20230426094712156">​</p><blockquote><p>C. 查询所有员工的工作地址,起别名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> workaddress <span class="keyword">as</span> <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- as可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> workaddress <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>没有起别名前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221818621-333086956-20231127121721-2f75nwk.png" alt="image-20230426095043443">​</p><p>起别名之后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221818986-862277531-20231127121721-6k49mim.png" alt="image-20230426095015969">​</p><blockquote><p>D. 查询公司员工的上班地址有哪些(不要重复)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> workaddress <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>使用该语法前：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221819359-1153174317-20231127121721-ipe67pa.png" alt="image-20230426095233573">​</p><p>使用该语法之后：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221819688-1228775014-20231127121721-e3c58tn.png" alt="image-20230426095310409">​</p><h2 id="7-3-条件查询">7.3 条件查询</h2><blockquote><p><strong>1.语法</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表 ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>2. 条件</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221820070-605700995-20231127121721-d4k96xm.png" alt="image-20230427131853007">​</p><p><strong>常用的逻辑运算符如下:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221820526-1625811114-20231127121721-0ygr5lr.png" alt="image-20230427131911542">​</p><p>案例：</p><p>A. 查询年龄等于 88 的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">88</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221820935-1163852875-20231127121721-yiisgca.png" alt="image-20230427132112210">​</p><p>B. 查询年龄小于 20 的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221821430-226321716-20231127121722-k6rfup7.png" alt="image-20230427132243237">​</p><p>C. 查询年龄小于等于 20 的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221821887-387042361-20231127121722-fm3rfk6.png" alt="image-20230427132449264">​</p><p>D. 查询没有身份证号的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221822325-810683804-20231127121722-zloezrd.png" alt="image-20230427132639831">​</p><p>E. 查询有身份证号的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221822837-535928460-20231127121722-rbszlb3.png" alt="image-20230427135551768">​</p><p>F. 查询年龄不等于 88 的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">88</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;&gt;</span> <span class="number">88</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221823350-1683352113-20231127121722-xubjean.png" alt="image-20230427135745897">​</p><p>G. 查询年龄在 15 岁(包含) 到 20 岁(包含)之间的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">15</span> <span class="operator">&amp;&amp;</span> age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">15</span> <span class="keyword">and</span> age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="assets/net-img-2942345-20230429221823851-583667052-20231127121722-3igx7pa.png" alt="image-20230427140055874">​</p><p>H. 查询性别为 女 且年龄小于 25 岁的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">and</span> age <span class="operator">&lt;</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221824304-346197296-20231127121722-wgbfg51.png" alt="image-20230427140217223">​</p><p>I. 查询年龄等于 18 或 20 或 40 的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">20</span> <span class="keyword">or</span> age <span class="operator">=</span><span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="keyword">in</span>(<span class="number">18</span>,<span class="number">20</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221824752-2137500427-20231127121722-b8g8ptj.png" alt="image-20230427140405658">​</p><p>J. 查询姓名为两个字的员工信息 _ %</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221825240-954765200-20231127121723-h4ol96f.png" alt="image-20230427140633058">​</p><p>K. 查询身份证号最后一位是 X 的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;%X&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;_________________X&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221825695-1635507923-20231127121723-gwsc5r9.png" alt="image-20230427140839834">​</p><h2 id="7-4-聚合函数">7.4 聚合函数</h2><p><strong>介绍：</strong></p><blockquote><p><strong>将一列数据作为一个整体，进行纵向计算 。</strong></p></blockquote><p><strong>常见的聚合函数</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221826054-126717578-20231127121723-sof9089.png" alt="image-20230428204930049">​</p><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数(字段列表) <span class="keyword">FROM</span> 表名 ;</span><br></pre></td></tr></table></figure><blockquote><p>注意 : NULL 值是不参与所有聚合函数运算的。</p></blockquote><p>对于 count 聚合函数，<strong>统计符合条件的总记录数，还可以通过 count(数字/字符串)的形式进行统计查询</strong>，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><blockquote><p>对于 count(*) 、count(字段)、 count(1) 的具体原理，我们在进阶篇中 SQL 优化部分会详 细讲解，此处大家只需要知道如何使用即可。</p></blockquote><h2 id="7-5-分组查询">7.5 分组查询</h2><ol><li class="lvl-3"><p><strong>语法</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [ <span class="keyword">WHERE</span> 条件 ] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [ <span class="keyword">HAVING</span> 分组后过滤条件 ];</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>where 与 having 区别</strong></p></li></ol><ul class="lvl-0"><li class="lvl-2"><p><strong>执行时机不同</strong>：where 是分组之前进行过滤，不满足 where 条件，不参与分组；而 having 是分组 之后对结果进行过滤。</p></li><li class="lvl-2"><p><strong>判断条件不同：where 不能对聚合函数进行判断，而 having 可以。</strong></p></li></ul><blockquote><p>注意事项:</p><p>• 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</p><p>• 执行顺序: **where &gt; 聚合函数 &gt; having **</p><p>• 支持多字段分组, 具体语法为 : <strong>group by columnA,columnB</strong></p></blockquote><h2 id="7-6-排序查询">7.6 排序查询</h2><p>排序在日常开发中是非常常见的一个操作，有升序排序，也有降序排序。</p><ol><li class="lvl-3"><p><strong>语法：</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span> , 字段<span class="number">2</span> 排序方式<span class="number">2</span> ;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>排序方式</p><ul class="lvl-2"><li class="lvl-6">ASC : 升序(默认值)</li><li class="lvl-6">DESC: 降序</li></ul><blockquote><p>注意事项：</p><ul class="lvl-3"><li class="lvl-2">如果是升序, 可以不指定排序方式 ASC ;</li><li class="lvl-2">如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</li></ul></blockquote></li></ol><p>案例：</p><p>A. 根据年龄对公司的员工进行升序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221826530-1647890493-20231127121723-y07w6ei.png" alt="image-20230429131551172">​</p><p>B. 根据入职时间, 对员工进行降序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>结果显示</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221827098-698755346-20231127121723-nr23kh5.png" alt="image-20230429131735436">​</p><p>C. 根据年龄对公司的员工进行升序排序 , 年龄相同 , 再按照入职时间进行降序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> , entrydate <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>结果显示</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221827620-557032807-20231127121723-n6udw5j.png" alt="image-20230429131941837">​</p><h2 id="7-7-分页查询">7.7 分页查询</h2><p>分页操作在业务系统开发时，也是非常常见的一个功能，我们在网站中看到的各种各样的分页条，后台 都需要借助于数据库的分页操作。</p><ol><li class="lvl-3"><p><strong>语法：</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT 起始索引, 查询记录数 ;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p><ul class="lvl-3"><li class="lvl-2"><em><em>起始索引从 0 开始，起始索引 = （查询页码 - 1）</em> 每页显示记录数。</em>*</li><li class="lvl-2"><strong>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL 中是 LIMIT。</strong></li><li class="lvl-2"><strong>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10。</strong></li></ul></blockquote></li></ol><p>案例：</p><p>A. 查询第 1 页员工数据, 每页展示 10 条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221828091-1014453429-20231127121723-uilirsl.png" alt="image-20230429132320191">​</p><p>B. 查询第 2 页员工数据, 每页展示 10 条记录 --------&gt; (页码-1)*页展示记录数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">10</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221828563-1943528113-20231127121724-itg594h.png" alt="image-20230429132505487">​</p><h2 id="7-8-执行顺序">7.8 执行顺序</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221828997-594190798-20231127121724-6n881fe.png" alt="image-20230429133850462">​</p><p>验证：</p><p>查询年龄大于 15 的员工姓名、年龄，并根据年龄进行升序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name , age <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221829501-382405608-20231127121724-wkgfekn.png" alt="image-20230429134116935">​</p><p>在查询时，我们给 emp 表起一个别名 e，然后在 select 及 where 中使用该别名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name , e.age <span class="keyword">from</span> emp e <span class="keyword">where</span> e.age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221829501-382405608-20231127121724-72hndt2.png" alt="image-20230429134116935">​</p><blockquote><p>执行上述 SQL 语句后，我们看到依然可以正常的查询到结果，此时就说明： from 先执行, 然后 where 和 select 执行。那 where 和 select 到底哪个先执行呢?</p></blockquote><p>此时我们可以给 select 后面的字段起别名，然后在 where 中使用这个别名，然后看看是否可 以执行成功。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name ename , e.age eage <span class="keyword">from</span> emp e <span class="keyword">where</span> eage <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>执行上述 SQL 报错了:</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221829974-469592531-20231127121724-lvc2tne.png" alt="image-20230429134533105">​</p><blockquote><p>由此我们可以得出结论: <strong>from 先执行，然后执行 where ， 再执行 select 。</strong></p></blockquote><p>接下来，我们再执行如下 SQL 语句，查看执行效果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name ename , e.age eage <span class="keyword">from</span> emp e <span class="keyword">where</span> e.age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> eage <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221830424-858321476-20231127121724-r4qm64s.png" alt="image-20230429134733358">​</p><p>结果执行成功。 那么也就验证了: order by 是在 select 语句之后执行的。</p><blockquote><p>综上所述，我们可以看到 DQL 语句的<strong>执行顺序为： from … where … group by … having … select … order by … limit …</strong></p></blockquote><h1>8. DCL</h1><blockquote><p>DCL 英文全称是 Data Control Language(数据控制语言)，<strong>用来管理数据库用户、控制数据库的访 问权限。</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221830900-2134093449-20231127121724-l8jyzx9.png" alt="image-20230429215032354">​</p><h2 id="8-1-管理用户">8.1 管理用户</h2><blockquote><p><strong>1. 查询用户</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.user;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221831329-393013424-20231127121724-ypu2pkq.png" alt="image-20230429215243174">​</p><p>其中 <strong>Host 代表当前用户访问的主机</strong>, 如果为 localhost, 仅代表只能够在当前本机访问，是不可以 远程访问的。 <strong>User 代表的是访问该数据库的用户名</strong>。在 MySQL 中需要通过 Host 和 User 来唯一标识一 个用户。</p><blockquote><p><strong>2. 创建用户</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>3. 修改用户密码</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span> ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>4. 删除用户</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p><ul class="lvl-1"><li class="lvl-2"><strong>在 MySQL 中需要通过用户名@主机名的方式，来唯一标识一个用户。</strong></li><li class="lvl-2"><strong>主机名可以使用 % 通配。</strong></li><li class="lvl-2"><strong>这类 SQL 开发人员操作的比较少，主要是 DBA（ Database Administrator 数据库 管理员）使用。</strong></li></ul></blockquote><p>案例：</p><p>A. 创建用户 itcast, 只能够在当前主机 localhost 访问, 密码 123456;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221831863-1591669678-20231127121725-nn1n5d7.png" alt="image-20230429220415116">​</p><p>B. 创建用户 heima, 可以在任意主机访问该数据库, 密码 123456;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221832395-440530340-20231127121725-trol0ah.png" alt="image-20230429220728489">​</p><p>C. 修改用户 heima 的访问密码为 1234;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;1234&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221832962-1585160389-20231127121725-ismsqkb.png" alt="image-20230429221021218">​</p><p>D. 删除 itcast@localhost 用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221833564-1316229773-20231127121725-l0aeob7.png" alt="image-20230429221306572">​</p><h2 id="8-2-权限控制">8.2 权限控制</h2><p>MySQL 中定义了很多种权限，但是常用的就以下几种：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230429221833965-675536777-20231127121725-j9owltd.png" alt="image-20230429221508473">​</p><blockquote><p><strong>1. 查询权限</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>2. 授予权限</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>3. 撤销权限</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><ul class="lvl-1"><li class="lvl-2"><strong>多个权限之间，使用逗号分隔</strong></li><li class="lvl-2"><strong>授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</strong></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-MySQL概述</title>
      <link href="/posts/629aaf98.html"/>
      <url>/posts/629aaf98.html</url>
      
        <content type="html"><![CDATA[<h1>1. 数据库相关概念</h1><blockquote><p>数据库 ， 数据库管理系统 ，SQL</p></blockquote><table><thead><tr><th>名称</th><th>全称</th><th>简称</th></tr></thead><tbody><tr><td>数据库</td><td><strong>存储数据的仓库</strong>，数据是有组织的进行存储</td><td>DataBase（DB）</td></tr><tr><td>数据库管理系统</td><td>操纵和管理数据库的大型软件</td><td>DataBase Management System (DBMS)</td></tr><tr><td>SQL</td><td>操作关系型数据库的编程语言，定义了一套操作 关系型数据库统一<strong>标准</strong></td><td>Structured Query Language (SQL)</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230422164020280-1485291161-20231127093306-rizzj17.png" alt="image-20230422160458690">​</p><p>目前主流的关系型数据库管理系统的市场占有率排名如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230422164020778-714225309-20231127093306-5o140kg.png" alt="image-20230422160535747">​</p><ul class="lvl-0"><li class="lvl-2"><p>Oracle：大型的收费数据库，Oracle 公司产品，价格昂贵。</p></li><li class="lvl-2"><p>MySQL：开源免费的中小型数据库，后来 Sun 公司收购了 MySQL，而 Oracle 又收购了 Sun 公司。 目前 Oracle 推出了收费版本的 MySQL，也提供了免费的社区版本。</p></li><li class="lvl-2"><p>SQL Server：Microsoft 公司推出的收费的中型数据库，C#、.net 等语言常用</p></li><li class="lvl-2"><p>PostgreSQL：开源免费的中小型数据库。 DB2：IBM 公司的大型收费数据库产品。</p></li><li class="lvl-2"><p>SQLLite：嵌入式的微型数据库。Android 内置的数据库采用的就是该数据库。</p></li><li class="lvl-2"><p>MariaDB：开源免费的中小型数据库。是 MySQL 数据库的另外一个分支、另外一个衍生产品，与 MySQL 数据库有很好的兼容性。</p></li></ul><blockquote><p>而不论我们使用的是上面的哪一个关系型数据库，最终在操作时，都是使用 SQL 语言来进行统一操作， 因为我们前面讲到 SQL 语言，是操作关系型数据库的 <strong>统一标准</strong></p></blockquote><h1>2. MySQL 数据库</h1><h2 id="2-1-MySQL-的下载安装">2.1 MySQL 的下载安装</h2><p><strong>详见</strong>： <a href="https://www.cnblogs.com/NorthPoet/p/16901095.html">https://www.cnblogs.com/NorthPoet/p/16901095.html</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><blockquote><p>其中 ： -u 指定连接用户名 ，-p 指定连接密码</p></blockquote><h2 id="2-2-数据模型">2.2 数据模型</h2><h3 id="2-2-1-关系型数据库（RDBMS）">2.2.1 关系型数据库（RDBMS）</h3><blockquote><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库。</p></blockquote><p>而所谓二维表，指的是由行和列组成的表，如下图（<strong>就类似于 Excel 表格数据，有表头、有列、有行， 还可以通过一列关联另外一个表格中的某一列数据</strong>）。我们之前提到的 MySQL、Oracle、DB2、 SQLServer 这些都是属于关系型数据库，里面都是基于二维表存储数据的。简单说，基于二维表存储 数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230422164021137-2021991269-20231127093306-rgg297h.png" alt="image-20230422163441345">​</p><p><strong>特点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>使用表存储数据，格式统一，便于维护。</strong></p></li><li class="lvl-2"><p><strong>使用 SQL 语言操作，标准统一，使用方便。</strong></p></li></ul><h3 id="2-2-2-数据模型">2.2.2 数据模型</h3><blockquote><p>MySQL 是关系型数据库，是基于二维表进行数据存储的，具体的结构图下:</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230422164021517-247250016-20231127093306-8n5flg2.png" alt="image-20230422163705424">​</p><ul class="lvl-0"><li class="lvl-2"><p><strong>我们可以通过 MySQL 客户端连接数据库管理系统 DBMS，然后通过 DBMS 操作数据库。</strong></p></li><li class="lvl-2"><p><strong>可以使用 SQL 语句，通过数据库管理系统操作数据库，以及操作数据库中的表结构及数据。</strong></p></li><li class="lvl-2"><p><strong>一个数据库服务器中可以创建多个数据库</strong>，<strong>一个数据库中也可以包含多张表</strong>，<strong>而一张表中又可以包 含多行记录。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. IDEA的安装与使用（上）</title>
      <link href="/posts/ed8ba887.html"/>
      <url>/posts/ed8ba887.html</url>
      
        <content type="html"><![CDATA[<h2 id="本章专题与脉络">本章专题与脉络</h2><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194227836-518611559.png" alt="第1阶段：Java基本语法-第04章" style="zoom:50%;" /><hr><p><strong>【Why IDEA ?】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194235723-907595215-20230929073515-e3hopcz.png" alt="image-20221018105217845">​</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194228436-291230161.jpg" alt="2022-10-18_11-00-29" style="zoom:80%;" /><blockquote><p>【注】JetBrains官方说明：</p><p>尽管我们采取了多种措施确保受访者的代表性，但结果可能会略微偏向 JetBrains 产品的用户，因为这些用户更有可能参加调查。</p></blockquote><p>此外，2022年，某美国软件开发商在对近千名专业的Java开发者调研后，发布了《2022年Java开发者生产力报告》。报告提到：JetBrains 的 IntelliJ IDEA是最受欢迎的 Java IDE，占 <code>48%</code>​，其次是 Eclipse，占 24%，Visual Studio Code 占 18%。</p><hr><p>本着&quot;<code>工欲善其事必先利其器</code>​&quot;的精神，本章从IDEA的介绍、安装、设置入手，讲解IDEA中项目的创建、快捷键与模板的使用、断点调试、常用插件等。</p><h2 id="1-认识IntelliJ-IDEA">1. 认识IntelliJ IDEA</h2><h3 id="1-1-JetBrains-公司介绍">1.1 JetBrains  公司介绍</h3><p>IDEA，是 JetBrains (<a href="https://www.jetbrains.com/">https://www.jetbrains.com/</a>)公司的产品，该公司成立于2000年，总部位于捷克的布拉格，致力于为开发者打造最高效智能的开发工具。</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194228810-972333514.png" alt="1576217376761" style="zoom:80%;" /><p>公司旗下还有其它产品，比如：</p><ul class="lvl-0"><li class="lvl-2"><p>WebStorm：用于开发 JavaScript、HTML5、CSS3 等前端技术</p></li><li class="lvl-2"><p>PyCharm：用于开发 python</p></li><li class="lvl-2"><p>PhpStorm：用于开发 PHP</p></li><li class="lvl-2"><p>RubyMine：用于开发 Ruby/Rails</p></li><li class="lvl-2"><p>AppCode：用于开发 Objective - C/Swift</p></li><li class="lvl-2"><p>CLion：用于开发 C/C++</p></li><li class="lvl-2"><p>DataGrip：用于开发数据库和 SQL</p></li><li class="lvl-2"><p>Rider：<a href="http://xn--6kq11kn9kgkw.NET">用于开发.NET</a></p></li><li class="lvl-2"><p>GoLand：用于开发 Go</p></li></ul><p>用于开发 Android的Android Studio，也是Google 基于 IDEA 社区版进行迭代的。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194236236-408473233-20230929073515-x0io18d.png" alt="1593264471351">​</p><h3 id="1-2-IntelliJ-IDEA-介绍">1.2 IntelliJ IDEA  介绍</h3><p>IDEA，全称 <code>IntelliJ IDEA</code>​，是 Java 语言的集成开发环境，目前已经（基本）<code>代替</code>​了Eclipse的使用。IDEA 在业界被公认为是最好的 Java 开发工具（之一），因其<code>功能强悍</code>​、<code>设置人性化</code>​，而深受Java、大数据、移动端程序员的喜爱。</p><p>IntelliJ IDEA 在 2015 年的官网上这样介绍自己：</p><blockquote><p>Excel at enterprise, mobile and web development with Java, Scala and Groovy,with all the latest modern technologies and frameworks available out of thebox.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194236685-278185348-20230929073515-eobkuqq.png" alt="image-20221018104714861">​</p><h3 id="1-3-IDEA的主要优势：-vs-Eclipse">1.3 IDEA的主要优势：(vs Eclipse)</h3><p><strong>功能强大：</strong></p><p>① 强大的整合能力。比如：Git、Maven、Spring等</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194229253-380322136.png" alt="1576218068631" style="zoom: 67%;" /><p>② 开箱即用的体验（集成版本控制系统、多语言支持的框架随时可用，无需额外安装插件）</p><p><strong>符合人体工程学：</strong></p><p>① 高度智能（快速的智能代码补全、实时代码分析、可靠的重构工具）</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194237253-1537148626-20230929073516-g60yd5m.png" alt="image-20221018104821144">​</p><p>② 提示功能的快速、便捷、范围广</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194237705-1899984618-20230929073516-1vtz1bf.jpg" alt="img">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194238178-1316620354-20230929073516-fp7fff7.png" alt="image-20221018104942633">​</p><p>③ 好用的快捷键和代码模板</p><p>④ 精准搜索</p><h3 id="1-4-IDEA-的下载">1.4 IDEA  的下载</h3><ul class="lvl-0"><li class="lvl-2"><p>下载网址： <a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></p></li><li class="lvl-2"><p>IDEA 分为两个版本： <code>旗舰版(Ultimate)</code>​和 <code>社区版(Community)</code>​。</p></li><li class="lvl-2"><p>IDEA的大版本每年迭代一次，大版本下的小版本（如：2022.x）迭代时间不固定，一般每年3个小版本。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194238706-1676965488-20230929073516-5pcuzfk.png" alt="image-20220606191620253">​</p><p>两个不同版本的详细对比，可以参照官网：<br><a href="https://www.jetbrains.com/idea/features/editions_comparison_matrix.html">https://www.jetbrains.com/idea/features/editions_comparison_matrix.html</a></p><p>官网提供的详细使用文档：<br><a href="https://www.jetbrains.com/help/idea/meet-intellij-idea.html">https://www.jetbrains.com/help/idea/meet-intellij-idea.html</a></p><h2 id="2-卸载与安装">2. 卸载与安装</h2><h3 id="2-1-卸载过程">2.1 卸载过程</h3><p>这里以卸载2022.1.2版本为例说明。在【控制面板】找到【卸载程序】</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194229753-1145913340.png" alt="image-20221019120032582" style="zoom: 80%;" /><p>右键点击或左键双击IntelliJ IDEA 2022.1.2进行卸载：</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194230218-951489097.png" alt="image-20221019121258294" style="zoom:80%;" /><p>如果需要保留下述数据，就不要打√。如果想彻底删除IDEA所有数据，那就打上√。</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194230646-885029392.png" alt="image-20221019122135368" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194230990-1164009663.png" alt="image-20221019122323575" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194231392-1953551018.png" alt="image-20221019122349195" style="zoom:80%;" /><p>软件卸载完以后，还需要删除其它几个位置的残留：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194239173-1357870981-20230929073516-e00blyy.png" alt="image-20221019161147552">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194239610-146454590-20230929073516-16u9o5o.png" alt="image-20221019161226843">​</p><h3 id="2-2-安装前的准备">2.2 安装前的准备</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194240027-1891562264-20230929073516-8c9jpjr.png" alt="image-20221018110944516">​</p><ul class="lvl-0"><li class="lvl-2"><p>64 位 Microsoft Windows 11、10、8</p></li><li class="lvl-2"><p>最低 2 GB 可用 RAM，推荐 8 GB 系统总 RAM</p></li><li class="lvl-2"><p>2.5 GB 硬盘空间，推荐 SSD</p></li><li class="lvl-2"><p>最低屏幕分辨率 1024x768</p></li></ul><p>从安装上来看，IntelliJ IDEA 对硬件的要求<code>似乎不是很高</code>​。可是在实际开发中并不是这样的，因为 IntelliJ IDEA 执行时会有大量的缓存、索引文件，所以如果你正在使用 Eclipse / MyEclipse，想通过 IntelliJ IDEA 来解决计算机的卡、慢等问题，这基本上是不可能的，本质上你应该对自己的硬件设备进行升级。</p><h3 id="2-3-安装过程">2.3 安装过程</h3><p>1、下载完安装包，双击直接安装<img src="assets/net-img-2942345-20230912194240424-2139381526-20230929073516-1vv6kmv.png" alt="image-20220606191800719">​</p><p>2、欢迎安装</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194240887-553855849-20230929073516-drr0e2z.png" alt="image-20220606191825728">​</p><p>3、是否删除电脑上低版本的IDEA（如果有，可以选择忽略）</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194241405-1076476098-20230929073516-a71i7qt.png" alt="image-20220606191838180">​</p><ul class="lvl-0"><li class="lvl-2"><p>如果电脑上有低版本的IDEA，可以选择删除或保留。</p></li><li class="lvl-2"><p>这里没有卸载旧版本，如果需要卸载，记得勾选下面的保留旧的设置和配置。</p></li></ul><p>4、选择安装目录</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194241875-1523028171-20230929073516-oskdeqg.png" alt="image-20220606191942308">​</p><p>选择安装目录，目录中要避免中文和空格。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194242376-83701423-20230929073516-7900ofv.png" alt="image-20220606192004081">​</p><p>5、创建桌面快捷图标等</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194242816-1717771425-20230929073516-5asst39.png" alt="image-20220606192053432">​</p><p>确认是否与.java、.groovy、.kt 格式文件进行关联。这里建议不关联。</p><p>6、在【开始】菜单新建一个文件夹（这里需要确认文件夹的名称），来管理IDEA的相关内容。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194243238-1303878791-20230929073516-tkiyoga.png" alt="image-20220606192126130">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194243615-2093318529-20230929073516-xlzcbj1.png" alt="image-20220606192135684">​</p><p>7、完成安装</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194244006-547923071-20230929073516-zg3labp.png" alt="image-20220606192148284">​</p><p>重启以后，单击登录：<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194244353-1674973491-20230929073516-76rnvp6.png" alt="image-20220615164056349">​</p><h3 id="2-4-注册">2.4 注册</h3><p>首先，需要通过用户协议：</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194231879-905647570.png" alt="image-20221019170223226" style="zoom:80%;" /><p>是否同意发送用户数据（特性、使用的插件、硬件与软件配置等），建议选择：不发送。</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194232333-428945710.png" alt="image-20221019170301256" style="zoom:80%;" /><p>接着，会提示我们进行注册。</p><ul class="lvl-0"><li class="lvl-2"><p>选择1：试用30天。在IDEA2022.1.2版本中，需要先登录，才能开启试用。</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194232796-157843387.png" alt="image-20221019170638164" style="zoom:80%;" />{: id="20230929073511-tfi4kk2" updated="20230929073511"}</li><li class="lvl-2"><p>选择2：付费购买旗舰版</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194233190-1216314629.png" alt="image-20221019170740875" style="zoom:80%;" />{: id="20230929073511-ej4wblu" updated="20230929073511"}<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194233565-1038953548.png" alt="image-20221019170820975" style="zoom:50%;" />{: id="20230929073511-k0m0z46" updated="20230929073511"}</li><li class="lvl-2"><p>选择3：（推荐）</p><ul class="lvl-2"><li class="lvl-4">大家参照《<code>.\03-资料\01-IDEA 2022.1 注册文档\IntelliJ IDEA2022.1注册文档.docx</code>​》操作即可。</li><li class="lvl-4">由于存在时效性，如果失效，大家可以自行搜索注册方式即可。</li></ul></li></ul><h3 id="2-5-闪退问题">2.5 闪退问题</h3><p>问题描述：2022.1启动不了，双击桌面图标，没有响应。</p><p>解决办法：</p><p>打开<code>C:\Users\songhk\AppData\Roaming\JetBrains\IntelliJIdea2022.1\idea64.exe.vmoptions</code>​ 这个文件。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194244781-92192023-20230929073516-6g9esc0.png" alt="image-20220606195927066">​</p><p>内容如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194245259-1742388707-20230929073516-u9s8aj2.png" alt="image-20220606195938517">​</p><p>删除红框的数据以后，再登录即可正常进入。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194245794-1799239633-20230929073516-t8u7krh.png" alt="image-20220606200011927">​</p><p>原因：之前使用过的比如2021.2.2版本，pojie了。新版IEDA太智能了，把现有的启运参数也都复制过去了。又因为最新的IDEA，不兼容pojie程序-javaagent:D:\develop_tools\IDEA\IntelliJ IDEA 2021.2.2\bin\jetbrains-agent.jar了，所以报错了，所以JVM结束了，所以没有启动画面，凉凉了。</p><h2 id="3-HelloWorld的实现">3. HelloWorld的实现</h2><h3 id="3-1-新建Project-Class">3.1 新建Project - Class</h3><p>选择&quot;New Project&quot;：</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194233937-1891610836.png" alt="image-20221019174051967" style="zoom:80%;" /><p>指名工程名、使用的JDK版本等信息。如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194246308-1771840502-20230929073516-nmogpto.png" alt="image-20221019174355370">​</p><p>接着创建Java类：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194246766-679413562-20230929073516-znfz05c.png" alt="image-20221019174505876">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194247103-225814896-20230929073516-prvy6vs.png" alt="image-20221019174551606">​</p><h3 id="3-2-编写代码">3.2 编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-运行">3.3 运行</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194247484-180648714-20230929073516-9odvmxb.png" alt="image-20221019174716442">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194247903-1113445732-20230929073516-m0y3lkx.png" alt="image-20221019174801370">​</p><h2 id="4-JDK相关设置">4. JDK相关设置</h2><h3 id="4-1-项目的JDK设置">4.1 项目的JDK设置</h3><p><code>File--&gt;Project Structure...--&gt;Platform Settings --&gt;SDKs</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194248369-120035111-20230929073516-ak7zlj0.png" alt="image-20221019174847921">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194248834-170038069-20230929073516-6jjqhe5.png" alt="image-20221019175030852">​</p><ul class="lvl-0"><li class="lvl-2"><p>注1：SDKs全称是Software Development Kit ，这里一定是选择JDK的安装根目录，不是JRE的目录。</p></li><li class="lvl-2"><p>注2：这里还可以从本地添加多个JDK。使用“+”即可实现。</p></li></ul><h3 id="4-2-out目录和编译版本">4.2 out目录和编译版本</h3><p><code>File--&gt;Project Structure...--&gt;Project Settings --&gt;Project</code>​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194249321-918421480-20230929073517-pgvqjxh.png" alt="image-20221019175358200">​</p><h2 id="5-详细设置">5. 详细设置</h2><h3 id="5-1-如何打开详细配置界面">5.1 如何打开详细配置界面</h3><p>1、显示工具栏</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194249785-2069116566-20230929073517-861jsyg.png" alt="image-20221019175536721">​</p><p>2、选择详细配置菜单或按钮</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194250377-1700631500-20230929073517-94yj9wv.png" alt="image-20221019175620422">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194250886-1871125442-20230929073517-32w5yyc.png" alt="image-20221019175953767">​</p><h3 id="5-2-系统设置">5.2 系统设置</h3><h4 id="1、默认启动项目配置">1、默认启动项目配置</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194251486-371356783-20230929073517-dz3gp1d.png" alt="image-20221019180050832">​</p><p>启动IDEA时，默认自动打开上次开发的项目？还是自己选择？</p><p>如果去掉Reopen projects on startup前面的对勾，每次启动IDEA就会出现如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194251873-2143268425-20230929073517-3l5zmj0.png" alt="image-20221019180304644">​</p><h4 id="2、取消自动更新">2、取消自动更新</h4><p>Settings–&gt;Appearance &amp; Behavior-&gt;System Settings -&gt; Updates</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194252299-458528170-20230929073517-n5sfv6a.png" alt="image-20221019180428323">​</p><p>默认都打√了，建议检查IDE更新的√去掉，检查插件更新的√选上。</p><h3 id="5-3-设置整体主题">5.3 设置整体主题</h3><h4 id="1、选择主题">1、选择主题</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194252690-1618838387-20230929073517-ynnjso0.png" alt="image-20221019180637822">​</p><h4 id="2、设置菜单和窗口字体和大小">2、设置菜单和窗口字体和大小</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194253103-969942172-20230929073517-6oszvtn.png" alt="1655136527800">​</p><h4 id="3、设置IDEA背景图">3、设置IDEA背景图</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194253674-2057886748-20230929073517-0mtlth7.png" alt="image-20221018204241748">​</p><p>选择一张合适的图片作为背景，即可。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194254181-397049076-20230929073517-e1zgr2r.png" alt="image-20221018204305159">​</p><h3 id="5-4-设置编辑器主题样式">5.4 设置编辑器主题样式</h3><h4 id="1、编辑器主题">1、编辑器主题</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194254617-809465157-20230929073517-q1bfpfk.png" alt="1655136655026">​</p><h4 id="2、字体大小">2、字体大小</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194255041-1968073051-20230929073517-qhdhbw3.png" alt="1655136907073">​</p><p>更详细的字体与颜色如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194255595-1251292545-20230929073517-ooyzgz9.png" alt="image-20221019182625234">​</p><blockquote><p>温馨提示：如果选择某个font字体，中文乱码，可以在fallback font（备选字体）中选择一个支持中文的字体。</p></blockquote><h4 id="3、注释的字体颜色">3、注释的字体颜色</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194256121-1891196296-20230929073517-34b005m.png" alt="image-20220616121435182">​</p><ul class="lvl-0"><li class="lvl-2"><p>Block comment：修改多行注释的字体颜色</p></li><li class="lvl-2"><p>Doc Comment –&gt; Text：修改文档注释的字体颜色</p></li><li class="lvl-2"><p>Line comment：修改单行注释的字体颜色</p></li></ul><h3 id="5-5-显示行号与方法分隔符">5.5 显示行号与方法分隔符</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194256654-1272688065-20230929073517-v4njfcb.png" alt="1655137441471">​</p><h3 id="5-6-代码智能提示功能">5.6 代码智能提示功能</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194257059-1910554282-20230929073517-kczzjzi.png" alt="1655137649491">​</p><p>IntelliJ IDEA 的代码提示和补充功能有一个特性：<code>区分大小写</code>​。 如果想不区分大小写的话，就把这个对勾去掉。<code>建议去掉勾选</code>​。</p><h3 id="5-7-自动导包配置">5.7 自动导包配置</h3><ul class="lvl-0"><li class="lvl-2"><p>默认需要自己手动导包，Alt+Enter快捷键</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194257521-1134987162-20230929073517-d7jdv6k.png" alt="1655138308426">​</p><ul class="lvl-0"><li class="lvl-2"><p>自动导包设置</p><ul class="lvl-2"><li class="lvl-4">动态导入明确的包：Add unambiguous imports on the fly，该设置具有全局性；</li><li class="lvl-4">优化动态导入的包：Optimize imports on the fly，该设置只对当前项目有效；</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194257927-1441568449-20230929073517-s17qvey.png" alt="1655138465774">​</p><h3 id="5-8-设置项目文件编码（一定要改）">5.8 设置项目文件编码（一定要改）</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194258351-1782940890-20230929073517-cy7zjzx.png" alt="image-20220615190832482">​</p><p>说明： Transparent native-to-ascii conversion主要用于转换ascii，显式原生内容。一般都要勾选。</p><h3 id="5-9-设置控制台的字符编码">5.9 设置控制台的字符编码</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194258749-2136801684-20230929073517-hce4wk2.png" alt="image-20221019003153265">​</p><h3 id="5-10-修改类头的文档注释信息">5.10 修改类头的文档注释信息</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194259154-1678565654-20230929073517-kys3ume.png" alt="image-20221018114632127">​</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ClassName: $&#123;NAME&#125;</span></span><br><span class="line"><span class="comment">* Package: $&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">* Description: </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Create</span> $&#123;DATE&#125; $&#123;TIME&#125; </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0   </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>常用的预设的变量，这里直接贴出官网给的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PACKAGE_NAME&#125; - the name of the target <span class="keyword">package</span> where the <span class="keyword">new</span> <span class="title class_">class</span> or <span class="keyword">interface</span> <span class="title class_">will</span> be created. </span><br><span class="line">$&#123;PROJECT_NAME&#125; - the name of the current project. </span><br><span class="line">$&#123;FILE_NAME&#125; - the name of the PHP file that will be created. </span><br><span class="line">$&#123;NAME&#125; - the name of the <span class="keyword">new</span> <span class="title class_">file</span> which you specify in the New File dialog box during the file creation. </span><br><span class="line">$&#123;USER&#125; - the login name of the current user. </span><br><span class="line">$&#123;DATE&#125; - the current system date. </span><br><span class="line">$&#123;TIME&#125; - the current system time. </span><br><span class="line">$&#123;YEAR&#125; - the current year. </span><br><span class="line">$&#123;MONTH&#125; - the current month. </span><br><span class="line">$&#123;DAY&#125; - the current day of the month. </span><br><span class="line">$&#123;HOUR&#125; - the current hour. </span><br><span class="line">$&#123;MINUTE&#125; - the current minute. </span><br><span class="line">$&#123;PRODUCT_NAME&#125; - the name of the IDE in which the file will be created. </span><br><span class="line">$&#123;MONTH_NAME_SHORT&#125; - the first <span class="number">3</span> letters of the month name. Example: Jan, Feb, etc. </span><br><span class="line">$&#123;MONTH_NAME_FULL&#125; - full name of a month. Example: January, February, etc.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-11-设置自动编译">5.11 设置自动编译</h3><p><code>Settings--&gt;Build,Execution,Deployment--&gt;Compiler</code>​</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194234403-2017146150.png" alt="1655109415450" style="zoom: 67%;" /><h3 id="5-12-设置为省电模式-可忽略">5.12 设置为省电模式 (可忽略)</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194259580-1312602859-20230929073517-dag0pjp.png" alt="image-20220616121851207">​</p><p>IntelliJ IDEA 有一种叫做<code>省电模式</code>​的状态，开启这种模式之后 IntelliJ IDEA 会<code>关掉代码检查</code>​和<code>代码提示</code>​等功能。所以一般也可认为这是一种<code>阅读模式</code>​，如果你在开发过程中遇到突然代码文件不能进行检查和提示，可以来看看这里是否有开启该功能。</p><h3 id="5-13-取消双击shift搜索">5.13 取消双击shift搜索</h3><p>因为我们按shift切换中英文输入方式，经常被按到，总是弹出搜索框，太麻烦了。可以取消它。</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194234852-614399732.png" alt="1659191272699" style="zoom:80%;" /><ul class="lvl-0"><li class="lvl-2"><p>方式1：适用于IDEA 2022.1.2版本</p></li></ul><p>在2022.1版本中，采用如下方式消双击shift出现搜索框：搜索double即可，勾选Disable double modifier key shortcuts，禁用这个选项。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194259947-316321090-20230929073517-lxnyna9.png" alt="1659190132458">​</p><ul class="lvl-0"><li class="lvl-2"><p>方式2：适用于IDEA 2022.1.2之前版本</p></li></ul><p>双击shift 或 ctrl + shift + a，打开如下搜索窗口：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194300364-681809275-20230929073517-hht8c2a.png" alt="1577243967254">​</p><p>选择registry…，找到&quot;ide.suppress.double.click.handler&quot;，把复选框打上勾就可以取消双击shift出现搜索框了。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194300746-175411444-20230929073517-c0prii4.png" alt="1577244045320">​</p><h2 id="6-工程与模块管理">6. 工程与模块管理</h2><h3 id="6-1-IDEA项目结构">6.1 IDEA项目结构</h3><p><strong>层级关系：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project(工程) - module(模块) - package(包) - class(类)</span><br></pre></td></tr></table></figure><p><strong>具体的：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一个project中可以创建多个module</span><br><span class="line"></span><br><span class="line">一个module中可以创建多个package</span><br><span class="line"></span><br><span class="line">一个package中可以创建多个class</span><br></pre></td></tr></table></figure><blockquote><p>这些结构的划分，是为了方便管理功能代码。</p></blockquote><h3 id="6-2-Project和Module的概念">6.2 Project和Module的概念</h3><p>在 IntelliJ IDEA 中，提出了Project和Module这两个概念。</p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/2942345-20230912194235237-1837431122.png" alt="image-20220523014358169" style="zoom:80%;" /><p>在 IntelliJ IDEA 中Project是<code>最顶级的结构单元</code>​，然后就是Module。目前，主流的大型项目结构基本都是多Module的结构，这类项目一般是<code>按功能划分</code>​的，比如：user-core-module、user-facade-module和user-hessian-module等等，模块之间彼此可以<code>相互依赖</code>​，有着不可分割的业务关系。因此，对于一个Project来说：</p><ul class="lvl-0"><li class="lvl-2"><p>当为单Module项目的时候，这个单独的Module实际上就是一个Project。</p></li><li class="lvl-2"><p>当为多Module项目的时候，多个模块处于同一个Project之中，此时彼此之间具有<code>互相依赖</code>​的关联关系。</p></li><li class="lvl-2"><p>当然多个模块没有建立依赖关系的话，也可以作为单独一个“小项目”运行。</p></li></ul><h3 id="6-3-Module和Package">6.3 Module和Package</h3><p>在一个module下，可以声明多个包（package），一般命名规范如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.不要有中文</span><br><span class="line">2.不要以数字开头</span><br><span class="line">3.给包取名时一般都是公司域名倒着写,而且都是小写</span><br><span class="line">  比如：尚硅谷网址是www.atguigu.com</span><br><span class="line">  那么我们的package包名应该写成：com.atguigu.子名字。</span><br></pre></td></tr></table></figure><h3 id="6-4-创建Module">6.4 创建Module</h3><p>建议创建“Empty空工程”，然后创建多模块，每一个模块可以独立运行，相当于一个小项目。JavaSE阶段不涉及到模块之间的依赖。后期再学习模块之间的依赖。</p><p>步骤：</p><p>（1）选择创建模块</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194301162-1796630310-20230929073518-iom3w1z.png" alt="1655167625885">​</p><p>（2）选择模块类型：这里选择创建Java模块，给模块命名，确定存放位置</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194301596-1802245120-20230929073518-brb4t14.png" alt="1659191966074">​</p><p>（4）模块声明在工程下面</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194301996-910689322-20230929073518-jbk15qc.png" alt="1659192028623">​</p><h3 id="6-5-删除模块">6.5 删除模块</h3><p>（1）移除模块</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194302472-587735023-20230929073518-i32qtsy.png" alt="1659192150052">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194302893-1707347031-20230929073518-nj5u8i6.png" alt="1659192180062">​</p><p>（2）彻底删除模块</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194303321-478368801-20230929073518-2320zun.png" alt="1659192241224">​</p><h3 id="6-6-导入老师的模块">6.6 导入老师的模块</h3><p>（1）将老师的模块<code>teacher_chapter04</code>​整个的复制到自己IDEA项目的路径下</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194303705-127263840-20230929073518-do60h2e.png" alt="1659192514219">​</p><p>接着打开自己IDEA的项目，会在项目目录下看到拷贝过来的module，只不过不是以模块的方式呈现。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194304071-1707998036-20230929073518-kcmxy57.png" alt="1659192692658">​</p><p>（2）查看Project Structure，选择import module</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194304424-239117705-20230929073518-5je4j80.png" alt="image-20220615213827271">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194304785-642925561-20230929073518-dq0scas.png" alt="image-20220615214746952">​</p><p>（3）选择要导入的module：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194305215-580345398-20230929073518-ch7erhj.png" alt="1659192850055">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194305605-1220953808-20230929073518-x8daq0g.png" alt="image-20220615214916374">​</p><p>（4）接着可以一路Next下去，最后选择Overwrite</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194306022-1579200053-20230929073518-iuauyk3.png" alt="1659192928140">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194306401-1883872760-20230929073518-d0ah94d.png" alt="1659192995900">​</p><p>最后点击OK即可了。</p><h3 id="6-7-同时打开两个IDEA项目工程">6.7 同时打开两个IDEA项目工程</h3><h4 id="1、两个IDEA项目工程效果">1、两个IDEA项目工程效果</h4><p>有些同学想要把上课练习代码和作业代码分开两个IDEA项目工程。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194306751-1251973248-20230929073518-owvjbd4.png" alt="image-20211229111753237">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194307157-1919097052-20230929073518-a5et1xh.png" alt="image-20211229111906342">​</p><h4 id="2、新建一个IDEA项目">2、新建一个IDEA项目</h4><p>注意：第一次需要新建，之后直接打开项目工程即可</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194307562-1094331305-20230929073518-g3pb3dq.png" alt="1655170522054">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194307960-98842931-20230929073518-7a1m5nu.png" alt="1655170341953">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194308318-632950082-20230929073518-wq2ldqu.png" alt="1655170765902">​</p><h4 id="3、打开两个IDEA项目">3、打开两个IDEA项目</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194308657-1216190818-20230929073518-cymbqi1.png" alt="image-20211229112314671">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194309024-200263753-20230929073518-wxlo2c8.png" alt="image-20211229112343470">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194309428-1073623061-20230929073518-5haaxvq.png" alt="1655173351720">​</p><h3 id="6-8-导入前几章非IDEA工程代码">6.8 导入前几章非IDEA工程代码</h3><p><strong>1、创建chapter01、chapter02、chapter03等章节的module</strong></p><p>将相应章节的源文件粘贴到module的src下。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194310229-2144490223-20230929073518-qtw865e.png" alt="image-20220615220728669">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194310659-1149507918-20230929073518-ptgyv2r.png" alt="image-20220615220755529">​</p><p>打开其中各个源文件，会发现有乱码。比如：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194311172-988500429-20230929073518-2a20xtu.png" alt="image-20220615220846097">​</p><p><strong>2、设置编码</strong></p><p>当前项目是UTF-8。如果原来的.java文件都是GBK的（如果原来.java文件有的是GBK，有的是UTF-8就比较麻烦了）。</p><p>可以单独把这两个模块设置为GBK编码的。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194311721-1830147432-20230929073518-kv6kdok.png" alt="image-20220615220544760">​</p><p>改为GBK，确认即可。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194312102-1756266896-20230929073518-iizltey.png" alt="image-20220615220950214">​</p><h2 id="7-代码模板的使用">7. 代码模板的使用</h2><h3 id="7-1-查看Postfix-Completion模板-后缀补全">7.1 查看Postfix Completion模板(后缀补全)</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194312511-1839601235-20230929073518-0f27xfz.png" alt="1655173712802">​</p><h3 id="7-2-查看Live-Templates模板-实时模板">7.2 查看Live Templates模板(实时模板)</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194313070-1777143258-20230929073518-nknowmq.jpg" alt="img">​</p><h3 id="7-3-常用代码模板">7.3 常用代码模板</h3><h4 id="1、非空判断">1、非空判断</h4><ul class="lvl-0"><li class="lvl-2"><p>变量.null：if(变量 == null)</p></li><li class="lvl-2"><p>变量.nn：if(变量 != null)</p></li><li class="lvl-2"><p>变量.notnull：if(变量 != null)</p></li><li class="lvl-2"><p>ifn：if(xx  == null)</p></li><li class="lvl-2"><p>inn：if(xx  != null)</p></li></ul><h4 id="2、遍历数组和集合">2、遍历数组和集合</h4><ul class="lvl-0"><li class="lvl-2"><p>数组或集合变量.fori：for循环</p></li><li class="lvl-2"><p>数组或集合变量.for：增强for循环</p></li><li class="lvl-2"><p>数组或集合变量.forr：反向for循环</p></li><li class="lvl-2"><p>数组或集合变量.iter：增强for循环遍历数组或集合</p></li></ul><h4 id="3、输出语句">3、输出语句</h4><ul class="lvl-0"><li class="lvl-2"><p>sout：相当于System.out.println</p></li><li class="lvl-2"><p>soutm：打印当前方法的名称</p></li><li class="lvl-2"><p>soutp：打印当前方法的形参及形参对应的实参值</p></li><li class="lvl-2"><p>soutv：打印方法中声明的最近的变量的值</p></li><li class="lvl-2"><p>变量.sout：打印当前变量值</p></li><li class="lvl-2"><p>变量.soutv：打印当前变量名及变量值</p></li></ul><h4 id="4、对象操作">4、对象操作</h4><ul class="lvl-0"><li class="lvl-2"><p>创建对象</p><ul class="lvl-2"><li class="lvl-4">Xxx.new  .var ：创建Xxx类的对象，并赋给相应的变量</li><li class="lvl-4">Xxx.new  .field：会将方法内刚创建的Xxx对象抽取为一个属性</li></ul></li><li class="lvl-2"><p>强转</p><ul class="lvl-2"><li class="lvl-4">对象.cast：将对象进行强转</li><li class="lvl-4">对象.castvar：将对象强转后，并赋给一个变量</li></ul></li></ul><h4 id="5、静态常量声明">5、静态常量声明</h4><ul class="lvl-0"><li class="lvl-2"><p>psf：public static final</p></li><li class="lvl-2"><p>psfi：public static final int</p></li><li class="lvl-2"><p>psfs：public static final String</p></li><li class="lvl-2"><p>prsf：private static final</p></li></ul><h3 id="7-4-自定义代码模板">7.4 自定义代码模板</h3><h4 id="7-4-1-自定义后缀补全模板">7.4.1 自定义后缀补全模板</h4><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194313543-791346049-20230929073518-2yvu8ll.png" alt="image-20221018143204667">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194313955-1533535497-20230929073518-221kng1.png" alt="image-20221018143606913">​</p><h4 id="7-4-2-自定义Live-Templates">7.4.2 自定义Live Templates</h4><p>例如：定义sop代表System.out.print();语句</p><p>①在Live Templates中增加模板</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194314353-573600504-20230929073519-mgol3f0.png" alt="1576467339631">​</p><p>②先定义一个模板的组，这样方便管理所有自定义的代码模板</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194314719-1409113897-20230929073519-4lzm3nv.png" alt="1576467395084">​</p><p>③在模板组里新建模板</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194315313-2144793827-20230929073519-88nkz2i.png" alt="1576467478993">​</p><p>④定义模板（以输出语句为例）</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194315808-1688455517-20230929073519-xodlks1.png" alt="1576467712251">​</p><ul class="lvl-0"><li class="lvl-2"><p>Abbreviation：模板的缩略名称</p></li><li class="lvl-2"><p>Description：模板的描述</p></li><li class="lvl-2"><p>Template text：模板的代码片段</p></li><li class="lvl-2"><p>模板应用范围。比如点击Define。选择如下：应用在java代码中。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194316149-654333864-20230929073519-svg35gh.png" alt="1576467768103">​</p><p><strong>其它模板1：单元测试模板：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test$var1$()&#123;</span><br><span class="line">    $var2$</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194316544-2138927463-20230929073519-9yn90gy.png" alt="image-20220612124137427">​</p><p><strong>其它模板2：创建多线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        $<span class="keyword">var</span>$</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194316937-546630050-20230929073519-80mm8dw.png" alt="image-20220612124221967">​</p><p><strong>其它模板3：冒泡排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">$INDEX$</span> <span class="operator">=</span> <span class="number">1</span>; $INDEX$ &lt; $ARRAY$.length; $INDEX$++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">$INDEX2$</span> <span class="operator">=</span> <span class="number">0</span>; $INDEX2$ &lt; $ARRAY$.length-$INDEX$; $INDEX2$++) &#123;</span><br><span class="line">        <span class="keyword">if</span>($ARRAY$[$INDEX2$] &gt; $ARRAY$[$INDEX2$+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="type">$ELEMENT_TYPE$</span> <span class="variable">temp</span> <span class="operator">=</span> $ARRAY$[$INDEX2$];</span><br><span class="line">            $ARRAY$[$INDEX2$] = $ARRAY$[$INDEX2$+<span class="number">1</span>];</span><br><span class="line">            $ARRAY$[$INDEX2$+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912194317378-1669912902-20230929073519-4wv82aw.png" alt="image-20220612124541378">​</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java基础 </tag>
            
            <tag> IDEA的基本使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.变量与运算符</title>
      <link href="/posts/cca6755e.html"/>
      <url>/posts/cca6755e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-关键字">1. 关键字</h2><ul class="lvl-0"><li class="lvl-2">定义 ： 被Java语言赋予了特殊含义 ， 用作专门用途的字符串 ， 如： <code>public</code>​</li><li class="lvl-2">特点： 全部关键字都是小写字母</li><li class="lvl-2"><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">官方网址</a></li></ul><h2 id="2-标识符">2. 标识符</h2><ul class="lvl-0"><li class="lvl-2"><p>凡是自己命名的地方都叫标识符</p></li><li class="lvl-2"><p>标识符的命名规则（必须遵守）</p><ul class="lvl-2"><li class="lvl-4">由26个英文字母大小写，0-9 ，_或 $ 组成</li><li class="lvl-4">数字不可以开头。</li><li class="lvl-4">不可以使用关键字和保留字，但能包含关键字和保留字。</li><li class="lvl-4">Java中严格区分大小写，长度无限制。</li><li class="lvl-4">标识符不能包含空格。</li></ul></li><li class="lvl-2"><p>标识符的命名规范</p><ul class="lvl-2"><li class="lvl-4">包名： 多单词组成时所有字母都小写：xxxyyyzzz。</li><li class="lvl-4">类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li><li class="lvl-4">变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</li><li class="lvl-4">常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ul></li></ul><blockquote><p>为提高阅读性 ， 起名字要 ‘见名知意’</p></blockquote><p>‍</p><h2 id="3-变量">3. 变量</h2><ul class="lvl-0"><li class="lvl-2"><p>为何需要变量</p><ul class="lvl-2"><li class="lvl-4">变量是程序中不可或缺的组成单位 ， 最基本的存储单元</li></ul></li><li class="lvl-2"><p>变量的概念</p><ul class="lvl-2"><li class="lvl-4">内存中的一个存储区域 ， 该区域的数据可以再同一类型范围内不断变化</li><li class="lvl-4">变量的构成含三个要素 ： 数据类型 ，变量名  ， 存储的值</li><li class="lvl-4">Java中变量声明的格式 **：**​<code>数据类型 变量名 = 变量值</code>​</li></ul></li><li class="lvl-2"><p>变量的作用 ： 用于内存中保存数据</p></li><li class="lvl-2"><p><mark>使用变量注意</mark></p><ul class="lvl-2"><li class="lvl-4">Java中的每个变量必须先声明 ， 后使用</li><li class="lvl-4">使用变量名来访问这这块区域的数据</li><li class="lvl-4">变量的作用域： 其定义所在的一对 <code>&#123;&#125;</code>​内</li><li class="lvl-4">变量只有再起<strong>作用域</strong>内才有效 ， 除了作用域 ， 变量不可以再被调用</li><li class="lvl-4">同一个作用域内 ， 不能定义重名的变量</li></ul></li><li class="lvl-2"><p><mark>Java中变量的数据类型</mark></p><ul class="lvl-2"><li class="lvl-4"><p><em>基本数据类型</em> ： 包括 <strong>整数类型</strong> ， <strong>浮点数类型</strong> ， <strong>字符类型</strong> ， <strong>布尔类型</strong></p></li><li class="lvl-4"><p><em>引用数据类型</em>： 包括 <strong>数组</strong> ， ** 类** ，**接口 ** ， **枚举 ** ， **注解 ** ， <strong>记录</strong></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224530302-2045461424-20230928215553-5monb2p.png" alt="image">​</p></li></ul></li><li class="lvl-2"><p>变量的使用</p><ul class="lvl-2"><li class="lvl-4"><p>变量的声明</p><ul class="lvl-4"><li class="lvl-6">格式 ： 数据类型 变量名；</li><li class="lvl-6">注意： 变量的数据类型可以是基本数据类型 ， 也可以是引用数据类型</li></ul></li><li class="lvl-4"><p>变量的赋值</p><ul class="lvl-4"><li class="lvl-6">理解： 给变量赋值，就是把“值”存到该变量代表的<strong>内存空间中</strong>。同时，给变量赋的值类型必须与变量声明的类型一致或兼容。</li><li class="lvl-6">变量赋值的语法格式 ： 变量名 = 值；</li></ul></li></ul></li></ul><p>‍</p><h2 id="4-基本数据类型">4. 基本数据类型</h2><h3 id="整数类型-：-byte-short-int-long">整数类型 ： byte , short , int , long</h3><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p>Java个整数类型有固定的表数范围和字段长度 ，不受具体操作系统的印象 ， 以保证Java程序的可移植性</p></li><li class="lvl-2"><p>定义long类型的变量 ，赋值时需要以 <code>l</code>​或<code>L</code>​作为后缀</p></li><li class="lvl-2"><p>Java程序中变量通常声明为int型 ， 除非不醉仪表室较大的数 ， 才使用long</p></li><li class="lvl-2"><p>Java的整型常量爱你规默认为int型</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224530786-1838249163-20230928215553-nanqkfr.png" alt="image">​</p></li><li class="lvl-2"><p><mark>补充 ： 计算机存储单位</mark></p><ul class="lvl-2"><li class="lvl-4"><p><strong>字节（Byte）：</strong> 是计算机用于<code>计量存储容量</code>​的<code>基本</code>​单位，一个字节等于8 bit。</p></li><li class="lvl-4"><p><strong>位（bit）：</strong> 是数据存储的<code>最小</code>​单位。二进制数系统中，每个0或1就是一个位，叫做bit（比特），其中8 bit 就称为一个字节(Byte)。</p></li><li class="lvl-4"><p><strong>转换关系：</strong></p><ul class="lvl-4"><li class="lvl-6"><strong>8 bit = 1 Byte</strong></li><li class="lvl-6"><strong>1024 Byte = 1 KB</strong></li><li class="lvl-6"><strong>1024 KB = 1 MB</strong></li><li class="lvl-6"><strong>1024 MB = 1 GB</strong></li><li class="lvl-6"><strong>1024 GB = 1 TB</strong></li></ul></li></ul></li></ul><h3 id="浮点类型-：-float-double">浮点类型 ： float , double</h3><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</p></li><li class="lvl-2"><p>浮点型常量有两种表示形式</p><ul class="lvl-2"><li class="lvl-4">十进制数形式。如：5.12       512.0f        .512   (必须有小数点）</li><li class="lvl-4">科学计数法形式。如：5.12e2      512E2     100E-2</li></ul></li><li class="lvl-2"><p>**float：**​<code>单精度</code>​，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。</p></li><li class="lvl-2"><p>**double：**​<code>双精度</code>​，精度是float的两倍。通常采用此类型。</p></li><li class="lvl-2"><p>**定义float类型的变量，赋值时需要以&quot;**​<code>f</code>​&quot;或&quot;<code>F</code>​&quot;作为后缀。</p></li><li class="lvl-2"><p><strong>Java 的浮点型</strong>​<code>常量默认为double型</code>​。</p></li><li class="lvl-2"><p><mark>浮点型精度的说明</mark></p><ul class="lvl-2"><li class="lvl-4">并不是所有的小数都能可以精确的用二进制浮点数表示。二进制浮点数不能精确的表示0.1、0.01、0.001这样10的负次幂。</li><li class="lvl-4"><strong>浮点类型float、double的数据不适合在</strong>​<code>不容许舍入误差</code>​的金融计算领域。如果需要<code>精确</code>​数字计算或保留指定位数的精度，需要使用<code>BigDecimal类</code>​。</li></ul></li></ul><h3 id="字符类型-：-char">字符类型 ： char</h3><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p>char型数据用于表示通常意义上<code>字符</code>​（占两个字节）</p></li><li class="lvl-2"><p>Java中的所有字符都使用Unicode编码，<strong>故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</strong></p></li><li class="lvl-2"><p>字符型变量的三种表现形式</p><ul class="lvl-2"><li class="lvl-4">形式1 ： 使用单引号(‘’)括起来的单个字符</li><li class="lvl-4">形式2 ： 直接使用<code>unicode值</code>​来表示字符型城来那个 <code>\uXXX</code>​其中 ， XXX代表一个十六制整数 ， 如 ： \u0023表示 <code>#</code>​</li><li class="lvl-4"><strong>形式3：</strong> Java中还允许使用<code>转义字符‘\’</code>​来将其后的字符转变为特殊字符型常量。</li></ul></li></ul><h3 id="布尔类型-：-boolean">布尔类型 ： boolean</h3><ul class="lvl-0"><li class="lvl-2"><p>boolean类型用于判断逻辑条件 ， 一般用于流程控制语句中</p></li><li class="lvl-2"><p>boolean类型数据只有两个值 true , false , 无其他</p><ul class="lvl-2"><li class="lvl-4">不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li><li class="lvl-4">拓展：Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。——《java虚拟机规范 8版》</li></ul></li></ul><h2 id="5-基本数据类型变量间运算规则">5. 基本数据类型变量间运算规则</h2><p>在Java程序中 ， 不同的基本数据类型(只有7中 ， 不包含boolean类型)变量的值经常需要进行相互转换</p><p>转换的方式有两种 ， <strong>自动类型提升</strong> 和 <strong>强制类型转换</strong></p><h3 id="5-1-自动类型提升">5.1 自动类型提升</h3><p>规则 ： 将取值范围小的类型自动提升为取值范围大的类型</p><p>基本数据类型的转换规则如下：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224531169-62890660-20230928215553-xu4cuse.png" alt="image">​</p><p>‍</p><h3 id="5-2-强制类型转换">5.2 强制类型转换</h3><p>规则 ： 将取值范围大的类型强制转换成取值范围小的类型</p><p>转换格式 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = (数据类型) 被强转数据值 <span class="comment">// （） 中的数据类型必须 = 变量值的数据类型</span></span><br></pre></td></tr></table></figure><p>‍</p><p>注意 :</p><ol><li class="lvl-3"><p>当把范围大的值强制转换为存储范围小的变量时 ， 可能会出现 损失精度或溢出</p></li><li class="lvl-3"><p>当某个值想要提升数据类型时，也可以使用强制类型转换。这种情况的强制类型转换是<code>没有风险</code>​的，通常省略。</p></li><li class="lvl-3"><p>声明long类型变量时，可以出现省略后缀的情况。float则不同</p></li></ol><h3 id="5-3-基本数据类型与String的运算">5.3 基本数据类型与String的运算</h3><ul class="lvl-0"><li class="lvl-2"><p>字符串类型 ： String</p><ul class="lvl-2"><li class="lvl-4">String 不是基本数据类型 ， 属于引用数据类型</li><li class="lvl-4">使用一对 “” 来表示一个字符串 ， 内部可以包括0个 ， 1个或多个字符串</li><li class="lvl-4">声明方式与基本数据类型类似</li></ul></li><li class="lvl-2"><p>运算规则</p><ul class="lvl-2"><li class="lvl-4">任意八种基本数据类型的数据与String类型只能进行连接“+”运算，且结果一定也是String类型</li><li class="lvl-4">String类型不能通过强制类型()转换，转为其他的类型</li></ul></li></ul><h2 id="6-运算符">6. 运算符</h2><p>运算符是一种特殊的符号 ， 用以表示数据的运算 ， 赋值和比较等</p><p>‍</p><p><mark>运算符的分类</mark></p><ul class="lvl-0"><li class="lvl-2"><p><strong>按照</strong>​<code>功能</code>​分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、Lambda运算符</p><table><thead><tr><th><strong>分类</strong></th><th><strong>运算符</strong></th></tr></thead><tbody><tr><td><strong>算术运算符（7个）</strong></td><td><strong>+、-、*、/、%、++、–</strong></td></tr><tr><td><strong>赋值运算符（12个）</strong></td><td><strong>=、+=、-=、*=、/=、%=、&gt;&gt;=、&lt;&lt;=、&gt;&gt;&gt;=、&amp;=、</strong></td></tr><tr><td><strong>比较(或关系)运算符（6个）</strong></td><td><strong>&gt;、&gt;=、&lt;、&lt;=、==、!=</strong></td></tr><tr><td><strong>逻辑运算符（6个）</strong></td><td><strong>&amp;、</strong></td></tr><tr><td><strong>位运算符（7个）</strong></td><td><strong>&amp;、</strong></td></tr><tr><td><strong>条件运算符（1个）</strong></td><td><strong>(条件表达式)?结果1:结果2</strong></td></tr><tr><td><strong>Lambda运算符（1个）</strong></td><td><strong>-&gt;（第18章时讲解）</strong></td></tr></tbody></table></li><li class="lvl-2"><p><strong>按照</strong>​<code>操作数个数</code>​分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</p><table><thead><tr><th><strong>分类</strong></th><th><strong>运算符</strong></th></tr></thead><tbody><tr><td><strong>一元运算符（单目运算符）</strong></td><td><strong>正号（+）、负号（-）、++、–、!、~</strong></td></tr><tr><td><strong>二元运算符（双目运算符）</strong></td><td><strong>除了一元和三元运算符剩下的都是二元运算符</strong></td></tr><tr><td><strong>三元运算符 （三目运算符）</strong></td><td><strong>(条件表达式)?结果1:结果2</strong></td></tr></tbody></table></li></ul><h3 id="6-1-算术运算符">6.1 算术运算符</h3><ul class="lvl-0"><li class="lvl-2"><p><mark>基本语法</mark></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224531667-1895469365-20230928215553-3ac8r3i.png" alt="image">​</p></li></ul><h3 id="6-2-赋值运算符">6.2 赋值运算符</h3><ul class="lvl-0"><li class="lvl-2"><p>基本语法</p><ul class="lvl-2"><li class="lvl-4"><p>符号 ： =</p><ul class="lvl-4"><li class="lvl-6">当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li><li class="lvl-6">支持连续赋值</li></ul></li><li class="lvl-4"><p>扩展赋值运算符 ： +=、 -=、*=、 /=、%=</p><table><thead><tr><th><strong>赋值运算符</strong></th><th><strong>符号解释</strong></th></tr></thead><tbody><tr><td>​<code>+=</code>​</td><td><strong>将符号</strong>​<code>左边的值</code>​和<code>右边的值</code>​进行<code>相加</code>​操作，最后将结果<code>赋值给左边的变量</code>​</td></tr><tr><td>​<code>-=</code>​</td><td><strong>将符号</strong>​<code>左边的值</code>​和<code>右边的值</code>​进行<code>相减</code>​操作，最后将结果<code>赋值给左边的变量</code>​</td></tr><tr><td>​<code>*=</code>​</td><td><strong>将符号</strong>​<code>左边的值</code>​和<code>右边的值</code>​进行<code>相乘</code>​操作，最后将结果<code>赋值给左边的变量</code>​</td></tr><tr><td>​<code>/=</code>​</td><td><strong>将符号</strong>​<code>左边的值</code>​和<code>右边的值</code>​进行<code>相除</code>​操作，最后将结果<code>赋值给左边的变量</code>​</td></tr><tr><td>​<code>%=</code>​</td><td><strong>将符号</strong>​<code>左边的值</code>​和<code>右边的值</code>​进行<code>取余</code>​操作，最后将结果<code>赋值给左边的变量</code>​</td></tr></tbody></table></li></ul></li></ul><h3 id="6-3-比较-关系-运算符">6.3 比较(关系)运算符</h3><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224532261-475127645-20230928215553-wx4yoj9.png" alt="image">​</p><ul class="lvl-0"><li class="lvl-2"><p>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</p></li><li class="lvl-3"><p><strong>&gt;</strong>    &lt;   &gt;=  &lt;= ：只适用于基本数据类型（除boolean类型之外） ==   != ：适用于基本数据类型和引用数据类型</p></li><li class="lvl-2"><p>‍</p></li><li class="lvl-2"><p>**比较运算符“**​<code>==</code>​”不能误写成“<code>=</code>​”</p></li></ul><h3 id="6-4-逻辑运算符">6.4 逻辑运算符</h3><ul class="lvl-0"><li class="lvl-2"><p>逻辑与运算符 ， 操作的都是boolean类型的变量或敞亮 ， 而且运算的结果也是boolean类型的值</p></li><li class="lvl-2"><p>运算符说明：</p><ul class="lvl-2"><li class="lvl-4"><p>&amp; 和 &amp;&amp;：表示&quot;且&quot;关系，当符号左右两边布尔值都是true时，结果才能为true。否则，为false。</p></li><li class="lvl-4"><p>| 和 || ：表示&quot;或&quot;关系，当符号两边布尔值有一边为true时，结果为true。当两边都为false时，结果为false</p></li><li class="lvl-4"><p>! ：表示&quot;非&quot;关系，当变量布尔值为true时，结果为false。当变量布尔值为false时，结果为true。</p></li><li class="lvl-4"><p>^ ：当符号左右两边布尔值不同时，结果为true。当两边布尔值相同时，结果为false。</p><ul class="lvl-4"><li class="lvl-6">**理解：**​<code>异或，追求的是“异”！</code>​</li></ul></li><li class="lvl-4"><p>逻辑运算符用于连接布尔型表达式，在Java中不可以写成 3 &lt; x &lt; 6，应该写成x &gt; 3 &amp; x &lt; 6 。</p></li></ul></li><li class="lvl-2"><p><mark>区分“&amp;”和“&amp;&amp;”：</mark></p><ul class="lvl-2"><li class="lvl-4"><p>相同点 ： 如果符号左边是true ， 则二者都执行符号右边的操作</p></li><li class="lvl-4"><p>不同点 ：</p><ul class="lvl-4"><li class="lvl-6">&amp; ： 如果符号左边是false ， 则继续执行符号右边的操作</li><li class="lvl-6">&amp;&amp;  ： 如果符号左边是false ， 则不再继续执行符号右边的操作</li></ul></li><li class="lvl-4"><p>建议 ： 开发中  ， 推荐使用 &amp;&amp;</p></li></ul><p>‍</p></li><li class="lvl-2"><p><mark>区分 ‘|’ 和 ‘||’</mark></p><ul class="lvl-2"><li class="lvl-4"><p>相同点 ： 如果如好左边是false ， 则二者都执行符号右边的操作</p></li><li class="lvl-4"><p>不同点 ：</p><ul class="lvl-4"><li class="lvl-6">| ： 如果符号左边是true  ， 则继续执行符号右边的操作</li><li class="lvl-6">|| ： 如果符号左边是true ， 则不再继续执行符号右边的操作</li></ul></li><li class="lvl-4"><p>建议： 开发中 ， 推荐只用 ||</p></li></ul></li></ul><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp; 与，且；有false则false</span></span><br><span class="line">System.out.println((a &gt; b) &amp; (a &gt; c)); </span><br><span class="line">System.out.println((a &gt; b) &amp; (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) &amp; (a &gt; c)); </span><br><span class="line">System.out.println((a &lt; b) &amp; (a &lt; c)); </span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// | 或；有true则true</span></span><br><span class="line">System.out.println((a &gt; b) | (a &gt; c)); </span><br><span class="line">System.out.println((a &gt; b) | (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) | (a &gt; c));</span><br><span class="line">System.out.println((a &lt; b) | (a &lt; c));</span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// ^ 异或；相同为false，不同为true</span></span><br><span class="line">System.out.println((a &gt; b) ^ (a &gt; c));</span><br><span class="line">System.out.println((a &gt; b) ^ (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) ^ (a &gt; c)); </span><br><span class="line">System.out.println((a &lt; b) ^ (a &lt; c)); </span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// ! 非；非false则true，非true则false</span></span><br><span class="line">System.out.println(!<span class="literal">false</span>);</span><br><span class="line">System.out.println(!<span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//&amp;和&amp;&amp;的区别</span></span><br><span class="line">        System.out.println((a &gt; b) &amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a &gt; b) &amp;&amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a == b) &amp;&amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//|和||的区别</span></span><br><span class="line">        System.out.println((a &gt; b) | (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a &gt; b) || (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a == b) || (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="6-5-位运算符">6.5 位运算符</h3><blockquote><p>位运算符的运算过程都是基于二进制的补码运算</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224532746-546165521-20230928215553-orfba23.png" alt="image">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224533246-1043083331-20230928215553-svxwseg.png" alt="image">​</p><p>‍</p><h3 id="6-6-条件运算符">6.6 条件运算符</h3><ul class="lvl-0"><li class="lvl-2"><p>条件运算符格式 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(条件表达式) ? 表达式<span class="number">1</span> ： 表达式<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>说明：条件表达式是boolean类型的结果，根据boolean的值选择表达式1或表达式2</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224533675-1858298247-20230928215553-s8ngnhr.png" alt="image">​</p></li><li class="lvl-2"><p>如果运算后的结果赋给新的变量，要求表达式1和表达式2为同种或兼容的类型</p></li><li class="lvl-2"><p><mark>与 if-else的转换关系</mark></p><ul class="lvl-2"><li class="lvl-4">凡是可以使用条件运算符的地方 ， 都可以改为if-else 结构 ， 反之， 不成立</li><li class="lvl-4">开发中，如果既可以使用条件运算符，又可以使用if-else，推荐使用条件运算符。因为执行效率稍高。</li></ul></li></ul><h3 id="6-7-运算符优先级">6.7 运算符优先级</h3><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算符顺序。</p><p><strong>开发建议：</strong></p><ol><li class="lvl-3"><p>不要过多的依赖运算的优先级来控制表达式的执行顺序，这样可读性太差，尽量<code>使用()来控制</code>​表达式的执行顺序。</p></li><li class="lvl-3"><p>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，则把它<code>分成几步</code>​来完成。例如：(num1 + num2) * 2 &gt; num3 &amp;&amp; num2 &gt; num3 ? num3 : num1 + num2;</p></li></ol><h2 id="7-关于字符集">7. 关于字符集</h2><ul class="lvl-0"><li class="lvl-2"><p>字符集</p></li><li class="lvl-2"><p>ASCII码</p></li><li class="lvl-2"><p>ISO-8859-1字符集</p></li><li class="lvl-2"><p>GBxxx字符集</p></li><li class="lvl-2"><p>Unicode码</p></li><li class="lvl-2"><p>UTF-8</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911224533982-803131751-20230928215554-onckvwl.png" alt="image">​</p><p>注意：在中文操作系统上，ANSI（美国国家标准学会、AMERICAN NATIONAL STANDARDS INSTITUTE: ANSI）编码即为GBK；在英文操作系统上，ANSI编码即为ISO-8859-1。</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Java语言概述</title>
      <link href="/posts/3e69d26.html"/>
      <url>/posts/3e69d26.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Java技术体系">1. Java技术体系</h2><ul class="lvl-0"><li class="lvl-2">Java SE(Java Standard Edition)标准版</li><li class="lvl-2">Java EE(Java Enterprise Edition)企业版</li><li class="lvl-2">Java ME(Java Micro Edition)小型版</li></ul><h2 id="2-Java开发环境介绍">2. Java开发环境介绍</h2><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p><strong>JDK</strong>  (java Development kit)：是Java程序开发工具包，包含JRE 和开发人员使用的工具。</p></li><li class="lvl-2"><p><strong>JRE</strong> (Java Runtime Environment) ：是Java程序的运行时环境，包含JVM和运行时所需要的<code>核心类库</code>​。</p></li></ul><p><mark>Java 8.0 Platform：</mark></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911193326119-1565088420-20230928215632-00gihxc.png" alt="image">​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911193330222-20589390-20230928215632-rq4dc1t.png" alt="image">​</p><p>‍</p><p>其中 ：</p><ul class="lvl-0"><li class="lvl-2"><p>JDK = JRE + 开发工具集（eg: javac编译工具等）</p></li><li class="lvl-2"><p>JRE = JVM + JavaSE标准库</p></li></ul><h2 id="3-注释">3. 注释</h2><ul class="lvl-0"><li class="lvl-2"><p>什么是注释？、</p><ul class="lvl-2"><li class="lvl-4">源文件中用于解释 ， 说明程序的文字就是注释</li></ul></li><li class="lvl-2"><p>注释的类型</p><ul class="lvl-2"><li class="lvl-4">单行注释</li><li class="lvl-4">多行注释</li><li class="lvl-4">文档注释</li></ul></li><li class="lvl-2"><p>注释的作用</p><ul class="lvl-2"><li class="lvl-4">提高了程序的可读性</li><li class="lvl-4">调试程序的重要方法</li></ul></li></ul><h2 id="4-Java-Api-文档">4. Java Api 文档</h2><ul class="lvl-0"><li class="lvl-2"><p>API （Application Programming Interface，应用程序编程接口）是 Java 提供的基本编程接口。</p></li></ul><h2 id="5-Java核心机制-：-JVM">5. Java核心机制 ： JVM</h2><p>Java语言的优缺点</p><ul class="lvl-0"><li class="lvl-2"><p>优点</p><ul class="lvl-2"><li class="lvl-4">跨平台性</li><li class="lvl-4">面向对象性</li><li class="lvl-4">健壮性</li><li class="lvl-4">安全性高</li><li class="lvl-4">简单性高性能</li></ul></li><li class="lvl-2"><p>缺点</p><ul class="lvl-2"><li class="lvl-4">语法过于复杂 ， 严谨</li><li class="lvl-4">架构较重</li><li class="lvl-4">并非适用于所有领域</li></ul></li></ul><p><mark>JVM功能说明</mark></p><p><strong>JVM</strong>（<code>J</code>​ava <code>V</code>​irtual <code>M</code>​achine ，Java虚拟机）：是一个虚拟的计算机，是Java程序的运行环境。JVM具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230911193332592-614675216-20230928215632-zdre7h1.png" alt="image">​</p><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p>功能1 ： 实现Java程序的跨平台性</p></li><li class="lvl-2"><p>功能2 ： 自动内存管理(内存分配 ， 内存回收)</p><ul class="lvl-2"><li class="lvl-4"><p><strong>Java程序在运行过程中，涉及到运算的</strong>​<code>数据的分配</code>​、<code>存储</code>​等都由JVM来完成</p></li><li class="lvl-4"><p>Java消除了程序员回收无用内存空间的职责。提供了一种系统级线程跟踪存储空间的分配情况，在内存空间达到相应阈值时，检查并释放可被释放的存储器空间。</p></li><li class="lvl-4"><p>GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上<code>减少了</code>​因为没有释放空间而导致的<code>内存泄漏</code>​</p></li><li class="lvl-4"><p><mark>面试题</mark></p><ul class="lvl-4"><li class="lvl-6">Java程序还会出现内存溢出和内存泄漏的问题吗？ Yes!</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.流程控制语句</title>
      <link href="/posts/fffd9e73.html"/>
      <url>/posts/fffd9e73.html</url>
      
        <content type="html"><![CDATA[<p>程序设计中规定的三种流程结构</p><ul class="lvl-0"><li class="lvl-2"><p>顺序结构</p><ul class="lvl-2"><li class="lvl-4">程序从上到下逐行执行 ， 中间没有任何判断和跳转</li></ul></li><li class="lvl-2"><p>分支结构</p><ul class="lvl-2"><li class="lvl-4">根据条件 ， 选择地执行某段代码</li><li class="lvl-4">有<code>if...else</code>​和<code>switch-case</code>​两种分支语句</li></ul></li><li class="lvl-2"><p>循环结构</p><ul class="lvl-2"><li class="lvl-4">根据循环条件 ， 重复的执行某段代码</li><li class="lvl-4">有<code>for , while , do-while</code>​三种循环语句</li><li class="lvl-4">补充：JDK5.0 提供了<code>foreach</code>​循环，方便的遍历集合、数组元素。</li></ul></li></ul><h2 id="1-循环结构">1. 循环结构</h2><blockquote><p>语句从上到下逐行执行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912193925433-1211275088-20230929073420-forpo09.png" alt="image">​</p><p>‍</p><h2 id="2-分支语句">2. 分支语句</h2><h3 id="2-1-if-else-条件判断结构">2.1 if - else 条件判断结构</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark>单分支条件判断 ： if</mark></p><p>说明： 条件表达式必须是布尔表达式(关系表达式或逻辑表达式)或布尔变量</p><p>执行流程</p><ol><li class="lvl-3"><p><strong>首先判断条件表达式看其结果是true还是false</strong></p></li><li class="lvl-3"><p><strong>如果是true就执行语句块</strong></p></li><li class="lvl-3"><p><strong>如果是false就不执行语句块</strong></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912193926077-1409822041-20230929073420-nxxgw5s.png" alt="image">​</p><p>‍</p><p><mark>双分支条件判断 ：if … else</mark></p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">语句块<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912193926593-395848992-20230929073420-bzvmnmf.png" alt="image">​</p><p><mark>多分支条件判断 ： if…else if…lese</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">  语句块<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">  语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (条件表达式n) &#123;</span><br><span class="line"> 语句块n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  语句块n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>说明：</code>​一旦条件表达式为true，则进入执行相应的语句块。执行完对应的语句块之后，就跳出当前结构。</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912193927120-1096512791-20230929073420-7sfutjx.png" alt="image">​</p><p>‍</p><p><mark>if…else嵌套</mark></p><p>在 if 的语句块中，或者是在else语句块中，又包含了另外一个条件判断（可以是单分支、双分支、多分支），就构成了<code>嵌套结构</code>​。</p><p><strong>执行特点：</strong></p><p>（1）如果是嵌套在if语句块中的，只有当外部的if条件满足，才会去判断内部的条件</p><p>（2）如果是嵌套在else语句块中的，只有当外部的if条件不满足，进入else后，才会去判断内部的条件</p><h3 id="2-2-switch-case选择结构">2.2 switch-case选择结构</h3><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//break;</span></span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//break; </span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   [<span class="keyword">default</span>:</span><br><span class="line">        语句块n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230912193927606-360875804-20230929073420-d2w7kf1.png" alt="image">​</p><p>执行过程</p><p>第1步：根据switch中表达式的值，依次匹配各个case。如果表达式的值等于某个case中的常量值，则执行对应case中的执行语句。</p><p>第2步：执行完此case的执行语句以后</p><ul class="lvl-0"><li class="lvl-2"><p>情况1：如果遇到break,则执行break并跳出当前的switch-case结构</p></li><li class="lvl-2"><p>情况2：如果没有遇到break，则会继续执行当前case之后的其它case中的执行语句。—&gt;case穿透</p></li><li class="lvl-2"><p>…</p></li><li class="lvl-2"><p>直到遇到break关键字或执行完所有的case及default的执行语句，跳出当前的switch-case结构</p></li></ul><p><mark>使用注意点：</mark></p><ul class="lvl-0"><li class="lvl-2"><p>switch（表达式）中表达式的值必须是这几种类型 ： byte ， short , char , int , 枚举(JDK 5.0) , String(JDK 7.0)</p></li><li class="lvl-2"><p>case子句中的值必须是敞亮 ， 所有case子句中的敞亮相互不相同</p></li><li class="lvl-2"><p>同一个switch语句 ， 所有case子句中的敞亮值互不相同</p></li><li class="lvl-2"><p>break语句用来执行完一个case分支后使程序跳出swtich语句块 ， <strong>如果没有break , 程序会顺序执行到switch结尾</strong></p></li><li class="lvl-2"><p>default子句是可选的 ， 同时 ， 位置也是灵活的 ， 当没有匹配的case时 ， 执行default语句</p></li></ul><h2 id="3-循环语句">3. 循环语句</h2><ul class="lvl-0"><li class="lvl-2"><p>理解：循环语句具有在<code>某些条件</code>​满足的情况下，<code>反复执行</code>​特定代码的功能。</p></li><li class="lvl-2"><p>循环结构分类</p><ul class="lvl-2"><li class="lvl-4">for 循环</li><li class="lvl-4">while 循环</li><li class="lvl-4">do -while 循环</li></ul></li><li class="lvl-2"><p>循环结构四要素</p><ul class="lvl-2"><li class="lvl-4">初始化部分</li><li class="lvl-4">循环条件部分</li><li class="lvl-4">循环体部分</li><li class="lvl-4">迭代部分</li></ul></li></ul><h3 id="3-1-for循环">3.1 for循环</h3><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化部分 ; 循环条件部分 ; 迭代部分) &#123;</span><br><span class="line">循环体部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul class="lvl-0"><li class="lvl-2"><p>for(;;)中的两个；不能多也不能少</p></li><li class="lvl-2"><p>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔</p></li><li class="lvl-2"><p>②循环条件部分为boolean类型表达式，当值为false时，退出循环</p></li><li class="lvl-2"><p>④可以有多个变量更新，用逗号分隔</p></li></ul><h3 id="3-2-while循环">3.2 while循环</h3><p>语法格式 : 先判断再执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化部分</span><br><span class="line"><span class="keyword">while</span>(循环条件部分) &#123;</span><br><span class="line">循环体部分;</span><br><span class="line">迭代部分;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="3-3-do-while-循环">3.3 do-while 循环</h3><p>语法格式 ： 先执行再判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化部分;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">循环体部分;</span><br><span class="line">迭代部分;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="4-关键字break-和-continue的使用">4. 关键字break 和 continue的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">适用范围在循环结构中使用的作用相同点</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span><span class="keyword">switch</span>-<span class="keyword">case</span></span><br><span class="line">循环结构一旦执行，就结束(或跳出)当前循环结构    此关键字的后面，不能声明语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>循环结构一旦执行，就结束(或跳出)当次循环结构    此关键字的后面，不能声明语句</span><br></pre></td></tr></table></figure><p>此外，很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它，但使程序容易出错。Java中的break和continue是不同于goto的。</p><h2 id="5-Scanner-键盘输入功能的实现">5. Scanner : 键盘输入功能的实现</h2><p>键盘输入代码的四个步骤</p><ol><li class="lvl-3"><p>导包</p></li><li class="lvl-3"><p>创建Scanner类型的对象</p></li><li class="lvl-3"><p>调用Scanner类的相关方法</p></li><li class="lvl-3"><p>释放资源</p></li></ol><p>注意 ： 需要根据相应的方法 ， 来输入指定类型的值 ， 入股输入的数据类型与要求的类型不匹配时 ， 会报异常导致程序终止</p><p>键盘录入基本代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键盘录入</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">nextLine</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;你输入的数据为：&quot;</span> + nextLine);</span><br><span class="line">scanner.close();</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="6-如何获取一个随机数">6. 如何获取一个随机数</h2><p>1、Math类的random()的调用，会返回一个[0,1)范围的一个double型值</p><p><strong>2、Math.random() * 100  —&gt;  [0,100)</strong>  **      (int)(Math.random() * 100)** <strong>—&gt; [0,99]</strong>  **      (int)(Math.random() * 100) + 5  ----&gt; [5,104]**</p><p><strong>3、</strong> 如何获取<code>[a,b]</code>​范围内的随机整数呢？<code>(int)(Math.random() * (b - a + 1)) + a</code>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机数获取</span></span><br><span class="line"><span class="type">double</span> <span class="variable">random</span> <span class="operator">=</span> Math.random();</span><br><span class="line">System.out.println(random);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">System.out.println(number);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 入门篇</title>
      <link href="/posts/f82b2580.html"/>
      <url>/posts/f82b2580.html</url>
      
        <content type="html"><![CDATA[<h1>1. 初始 Redis</h1><h2 id="1-1-认识NoSQL">1.1 认识NoSQL</h2><p>‍</p><blockquote><p><strong>NoSql</strong>可以翻译做Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是<code>相对于传统关系型数据库而言，有很大差异的一种特殊的数据库</code>​，因此也称之为<strong>非关系型数据库</strong>。</p></blockquote><p>‍</p><h3 id="1-1-1-结构化与非结构化">1.1.1 结构化与非结构化</h3><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102322129-956652897-20231006090927-guh2wae.png" alt="image">​</p><h3 id="1-1-2-关系型与非关系型的差异">1.1.2 关系型与非关系型的差异</h3><ul class="lvl-0"><li class="lvl-2"><p>存储方式</p><ul class="lvl-2"><li class="lvl-4">关系型数据库基于磁盘进行存储，会有大量的磁盘IO，对性能有一定影响</li><li class="lvl-4">非关系型数据库，他们的操作更多的是依赖于内存来操作，内存的读写速度会非常快，性能自然会好一些</li></ul></li><li class="lvl-2"><p>扩展性</p><ul class="lvl-2"><li class="lvl-4">关系型数据库集群模式一般是主从，主从数据一致，起到数据备份的作用，称为垂直扩展。</li><li class="lvl-4">非关系型数据库可以将数据拆分，存储在不同机器上，可以保存海量数据，解决内存大小有限的问题。称为水平扩展。</li><li class="lvl-4">关系型数据库因为表之间存在关联关系，如果做水平扩展会给数据查询带来很多麻烦</li></ul></li></ul><h2 id="1-2-认识-Redis">1.2 认识 Redis</h2><p>Redis诞生于2009年全称是<strong>Re</strong>mote <strong>D</strong>ictionary <strong>S</strong>erver 远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p><p><strong>特征</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>键值（key-value）型，value支持多种不同数据结构，功能丰富</p></li><li class="lvl-2"><p>单线程，每个命令具备原子性</p></li><li class="lvl-2"><p>低延迟，速度快（基于内存.IO多路复用.良好的编码）。</p></li><li class="lvl-2"><p>支持数据持久化</p></li><li class="lvl-2"><p>支持主从集群.分片集群</p></li><li class="lvl-2"><p>支持多语言客户端</p></li></ul><p><strong>作者</strong>：Antirez</p><p>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p><p>‍</p><h2 id="1-3-安装Redis">1.3 安装Redis</h2><p><a href="https://www.cnblogs.com/NorthPoet/p/17658437.html">Redis的安装步骤</a></p><p>‍</p><h1>2. Redis 的常见命令</h1><h2 id="2-1-Redis-数据结构介绍">2.1 Redis 数据结构介绍</h2><p>‍</p><blockquote><p>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样：</p></blockquote><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102322653-1660980008-20231006090927-1uyoju7.png" alt="image">​</p><p>‍</p><p><strong>贴心小建议：命令不要死记，学会查询就好啦</strong></p><p>Redis为了方便我们学习，将操作不同数据类型的命令也做了分组，在官网（ <a href="https://redis.io/commands">https://redis.io/commands</a> ）可以查看到不同的命令：</p><p>‍</p><p>当然我们也可以通过Help命令来帮助我们去查看命令</p><p>‍</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102323098-751575621-20231006090927-hh2gn1t.png" alt="image">​</p><p>‍</p><h2 id="2-2-Redis-通用命令">2.2 Redis 通用命令</h2><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul class="lvl-0"><li class="lvl-2"><p>KEYS：查看符合模板的所有key</p></li><li class="lvl-2"><p>DEL：删除一个指定的key</p></li><li class="lvl-2"><p>EXISTS：判断key是否存在</p></li><li class="lvl-2"><p>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</p></li><li class="lvl-2"><p>TTL：查看一个KEY的剩余有效期</p></li></ul><p>通过help [command] 可以查看一个命令的具体用法，例如：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102323565-1312772143-20231006090927-ofcpfpr.png" alt="image">​</p><p>‍</p><p>实例代码如下：</p><ul class="lvl-0"><li class="lvl-2"><p>KEYS</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询以a开头的key</span></span><br><span class="line">127.0.0.1:6379&gt; keys a*</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p><strong>贴心小提示：在生产环境下，不推荐使用keys 命令，因为这个命令在key过多的情况下，效率不高</strong></p><ul class="lvl-0"><li class="lvl-2"><p>DEL</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> del</span><br><span class="line"></span><br><span class="line">  DEL key [key ...]</span><br><span class="line">  summary: Delete a key</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del name <span class="comment">#删除单个</span></span><br><span class="line">(<span class="built_in">integer</span>) 1  <span class="comment">#成功删除1个</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 <span class="comment">#批量添加数据</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">4) <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del k1 k2 k3 k4</span><br><span class="line">(<span class="built_in">integer</span>) 3   <span class="comment">#此处返回的是成功删除的key，由于redis中只有k1,k2,k3 所以只成功删除3个，最终返回</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment">#再查询全部的key</span></span><br><span class="line">1) <span class="string">&quot;age&quot;</span><span class="comment">#只剩下一个了</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p><strong>贴心小提示：同学们在拷贝代码的时候，只需要拷贝对应的命令哦~</strong></p><ul class="lvl-0"><li class="lvl-2"><p>EXISTS</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> EXISTS</span><br><span class="line"></span><br><span class="line">  EXISTS key [key ...]</span><br><span class="line">  summary: Determine <span class="keyword">if</span> a key exists</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>EXPIRE</p></li></ul><p><strong>贴心小提示</strong>：内存非常宝贵，对于一些数据，我们应当给他一些过期时间，当过期时间到了之后，他就会自动被删除~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire age 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2  <span class="comment">#当这个key过期了，那么此时查询出来就是-2 </span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 10 <span class="comment">#如果没有设置过期时间</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -1  <span class="comment"># ttl的返回值就是-1</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="2-3-Redis命令-String命令">2.3 Redis命令-String命令</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul class="lvl-0"><li class="lvl-2"><p>string：普通字符串</p></li><li class="lvl-2"><p>int：整数类型，可以做自增.自减操作</p></li><li class="lvl-2"><p>float：浮点类型，可以做自增.自减操作</p></li></ul><p>‍</p><p>String的常见命令有：</p><ul class="lvl-0"><li class="lvl-2"><p>SET：添加或者修改已经存在的一个String类型的键值对</p></li><li class="lvl-2"><p>GET：根据key获取String类型的value</p></li><li class="lvl-2"><p>MSET：批量添加多个String类型的键值对</p></li><li class="lvl-2"><p>MGET：根据多个key获取多个String类型的value</p></li><li class="lvl-2"><p>INCR：让一个整型的key自增1</p></li><li class="lvl-2"><p>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</p></li><li class="lvl-2"><p>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</p></li><li class="lvl-2"><p>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</p></li><li class="lvl-2"><p>SETEX：添加一个String类型的键值对，并且指定有效期</p></li></ul><p>‍</p><p><strong>贴心小提示</strong>：以上命令除了INCRBYFLOAT 都是常用命令</p><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p>SET 和GET: 如果key不存在则是新增，如果存在则是修改</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102323946-1688473773-20231006090927-rb0dxsd.png" alt="image">​</p></li><li class="lvl-2"><p>MSET和MGET ： 可以批量增加 ， 查看</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102324301-692434923-20231006090927-7qvnsys.png" alt="image">​</p></li><li class="lvl-2"><p>INCR和INCRBY和DECY</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102324670-728610435-20231006090927-xay7dwl.png" alt="image">​</p></li><li class="lvl-2"><p>SETNX ： 添加一个String类型的键值对，前提是这个key不存在，否则不执行</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102325095-1453449874-20231006090927-7k3ofyc.png" alt="image">​</p></li><li class="lvl-2"><p>SETEX ： 添加一个String类型的键值对，并且指定有效期</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102325471-1126477018-20231006090927-sdmparn.png" alt="image">​</p></li></ul><h2 id="2-4-Redis命令-Key的层级结构">2.4 Redis命令-Key的层级结构</h2><p>Redis没有类似MySQL中的<code>Table的概念</code>​，我们该如何区分不同类型的key呢？</p><p>例如，需要存储用户.商品信息到redis，有一个用户id是1，有一个商品id恰好也是1，此时如果使用id作为key，那就会冲突了，该怎么办？</p><p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p><p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:'隔开，格式如下：</p><blockquote><p>项目名：业务名：id</p></blockquote><p>‍</p><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如我们的项目名称叫 heima，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul class="lvl-0"><li class="lvl-2"><p>user相关的key：<strong>heima:user:1</strong></p></li><li class="lvl-2"><p>product相关的key：<strong>heima:product:1</strong></p></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>heima:user:1</td><td>{“id”:1, “name”: “Jack”, “age”: 21}</td></tr><tr><td>heima:product:1</td><td>{“id”:1, “name”: “小米11”, “price”: 4999}</td></tr></tbody></table><p>一旦我们向redis采用这样的方式存储，那么在可视化界面中，redis会以层级结构来进行存储，形成类似于这样的结构，更加方便Redis获取数据</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102325786-1916973410-20231006090927-txngi2v.png" alt="image">​</p><p>‍</p><h2 id="2-5-Redis命令-Hash命令">2.5 Redis命令-Hash命令</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102326192-1655456787-20231006090927-moy29j8.png" alt="image">​</p><p>‍</p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102326568-653593757-20231006090927-4a1szi1.png" alt="image">​</p><p>‍</p><p><strong>Hash类型的常见命令</strong></p><ul class="lvl-0"><li class="lvl-2"><p>HSET key field value：添加或者修改hash类型key的field的值</p></li><li class="lvl-2"><p>HGET key field：获取一个hash类型key的field的值</p></li><li class="lvl-2"><p>HMSET：批量添加多个hash类型key的field的值</p></li><li class="lvl-2"><p>HMGET：批量获取多个hash类型key的field的值</p></li><li class="lvl-2"><p>HGETALL：获取一个hash类型的key中的所有的field和value</p></li><li class="lvl-2"><p>HKEYS：获取一个hash类型的key中的所有的field</p></li><li class="lvl-2"><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p></li><li class="lvl-2"><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></li></ul><p><strong>贴心小提示</strong>：哈希结构也是我们以后实际开发中常用的命令哟</p><ul class="lvl-0"><li class="lvl-2"><p>HSET和HGET</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> name Lucy<span class="comment">//大key是 heima:user:3 小key是name，小value是Lucy</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> age <span class="number">21</span><span class="comment">// 如果操作不存在的数据，则是新增</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> age <span class="number">17</span> <span class="comment">//如果操作存在的数据，则是修改</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET heima:user:<span class="number">3</span> name </span><br><span class="line"><span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET heima:user:<span class="number">3</span> age</span><br><span class="line"><span class="string">&quot;17&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>HMSET和HMGET</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">4</span> name HanMeiMei</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">4</span> name LiLei age <span class="number">20</span> sex man</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMGET heima:user:<span class="number">4</span> name age sex</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>HGETALL</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>HKEYS和HVALS</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HKEYS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>HINCRBY</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HINCRBY  heima:user:<span class="number">4</span> age <span class="number">2</span></span><br><span class="line">(integer) <span class="number">22</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;22&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HINCRBY  heima:user:<span class="number">4</span> age -<span class="number">2</span></span><br><span class="line">(integer) <span class="number">20</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>HSETNX</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSETNX heima:user4 sex <span class="title function_">woman</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSETNX heima:user:<span class="number">3</span> sex <span class="title function_">woman</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;woman&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-6-Redis命令-List命令">2.6 Redis命令-List命令</h2><p>redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul class="lvl-0"><li class="lvl-2"><p>有序</p></li><li class="lvl-2"><p>元素可以重复</p></li><li class="lvl-2"><p>插入和删除快</p></li><li class="lvl-2"><p>查询速度一般</p></li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p><strong>List的常见命令有：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>LPUSH key element … ：向列表左侧插入一个或多个元素</p></li><li class="lvl-2"><p>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</p></li><li class="lvl-2"><p>RPUSH key element … ：向列表右侧插入一个或多个元素</p></li><li class="lvl-2"><p>RPOP key：移除并返回列表右侧的第一个元素</p></li><li class="lvl-2"><p>LRANGE key star end：返回一段角标范围内的所有元素</p></li><li class="lvl-2"><p>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102327028-1003929740-20231006090927-9vkfowl.png" alt="image">​</p><p>‍</p><ul class="lvl-0"><li class="lvl-2"><p>LPUSH和RPUSH</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH users <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPUSH users <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">(integer) <span class="number">6</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>LPOP和RPOP</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPOP users</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPOP users</span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>LRANGE</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE users <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="2-7-Redis命令-Set命令">2.7 Redis命令-Set命令</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul class="lvl-0"><li class="lvl-2"><p>无序</p></li><li class="lvl-2"><p>元素不可重复</p></li><li class="lvl-2"><p>查找快</p></li><li class="lvl-2"><p>支持交集.并集.差集等功能</p></li></ul><p><strong>Set类型的常见命令</strong></p><ul class="lvl-0"><li class="lvl-2"><p>SADD key member … ：向set中添加一个或多个元素</p></li><li class="lvl-2"><p>SREM key member … : 移除set中的指定元素</p></li><li class="lvl-2"><p>SCARD key： 返回set中元素的个数</p></li><li class="lvl-2"><p>SISMEMBER key member：判断一个元素是否存在于set中</p></li><li class="lvl-2"><p>SMEMBERS：获取set中的所有元素</p></li><li class="lvl-2"><p>SINTER key1 key2 … ：求key1与key2的交集</p></li><li class="lvl-2"><p>SDIFF key1 key2 … ：求key1与key2的差集</p></li><li class="lvl-2"><p>SUNION key1 key2 …：求key1和key2的并集</p></li></ul><p>例如两个集合：s1和s2:</p><p>求交集：SINTER s1 s2</p><p>求s1与s2的不同：SDIFF s1 s2</p><p><strong>具体命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd s1 a b <span class="title function_">c</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s1</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srem s1 <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER s1 <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER s1 <span class="title function_">b</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SCARD <span class="title function_">s1</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><ul class="lvl-0"><li class="lvl-2"><p>将下列数据用Redis的Set集合来存储：</p></li><li class="lvl-2"><p>张三的好友有：李四.王五.赵六</p></li><li class="lvl-2"><p>李四的好友有：王五.麻子.二狗</p></li><li class="lvl-2"><p>利用Set的命令实现下列功能：</p></li><li class="lvl-2"><p>计算张三的好友有几人</p></li><li class="lvl-2"><p>计算张三和李四有哪些共同好友</p></li><li class="lvl-2"><p>查询哪些人是张三的好友却不是李四的好友</p></li><li class="lvl-2"><p>查询张三和李四的好友总共有哪些人</p></li><li class="lvl-2"><p>判断李四是否是张三的好友</p></li><li class="lvl-2"><p>判断张三是否是李四的好友</p></li><li class="lvl-2"><p>将李四从张三的好友列表中移除</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD zs lisi wangwu <span class="title function_">zhaoliu</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD ls wangwu mazi <span class="title function_">ergou</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SCARD <span class="title function_">zs</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SINTER zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SDIFF zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SUNION zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;mazi&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;ergou&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER zs <span class="title function_">lisi</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER ls <span class="title function_">zhangsan</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SREM zs <span class="title function_">lisi</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SMEMBERS zs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;wangwu&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-8-Redis命令-SortedSet类型">2.8 Redis命令-SortedSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul class="lvl-0"><li class="lvl-2"><p>可排序</p></li><li class="lvl-2"><p>元素不重复</p></li><li class="lvl-2"><p>查询速度快</p></li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet的常见命令有：</p><ul class="lvl-0"><li class="lvl-2"><p>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</p></li><li class="lvl-2"><p>ZREM key member：删除sorted set中的一个指定元素</p></li><li class="lvl-2"><p>ZSCORE key member : 获取sorted set中的指定元素的score值</p></li><li class="lvl-2"><p>ZRANK key member：获取sorted set 中的指定元素的排名</p></li><li class="lvl-2"><p>ZCARD key：获取sorted set中的元素个数</p></li><li class="lvl-2"><p>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</p></li><li class="lvl-2"><p>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</p></li><li class="lvl-2"><p>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</p></li><li class="lvl-2"><p>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</p></li><li class="lvl-2"><p>ZDIFF.ZINTER.ZUNION：求差集.交集.并集</p></li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</p></li><li class="lvl-2"><p><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</p></li></ul><p>‍</p><h1>3. Redis的Java客户端-Jedis</h1><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/docs/clients/">https://redis.io/docs/clients/</a></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102327499-2139679226-20231006090927-xzi31de.png" alt="image">​</p><p>其中Java客户端也包含很多：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102328113-59714361-20231006090927-rqazat4.png" alt="image">​</p><p>标记为❤的就是推荐使用的java客户端，包括：</p><ul class="lvl-0"><li class="lvl-2"><p>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此我们后期会直接以SpringDataRedis来学习。</p></li><li class="lvl-2"><p>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map.Queue等，而且支持跨进程的同步机制：Lock.Semaphore等待，比较适合用来实现特殊的功能需求。</p></li></ul><h2 id="3-1-快速入门">3.1 快速入门</h2><ol><li class="lvl-3"><p>创建Maven工程</p></li><li class="lvl-3"><p>引入依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jedis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>建立连接</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 建立连接</span></span><br><span class="line"><span class="comment">//        jedis = new Jedis(&quot;192.168.146.129&quot; , 6379);</span></span><br><span class="line">        jedis = JedisConnectionFactory.getJedis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 设置密码</span></span><br><span class="line"><span class="comment">//        jedis.auth(&quot;north&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 选择库</span></span><br><span class="line">        jedis.select(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 存数据</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;陈平安&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">       <span class="comment">// 取数据</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">hset</span> <span class="operator">=</span> jedis.hset(<span class="string">&quot;user:1&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;石昊&quot;</span>);</span><br><span class="line">       <span class="type">Long</span> <span class="variable">hset1</span> <span class="operator">=</span> jedis.hset(<span class="string">&quot;user:1&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;19&quot;</span>);</span><br><span class="line">    </span><br><span class="line">       Map&lt;String, String&gt; hgetAll = jedis.hgetAll(<span class="string">&quot;user:1&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;hgetAll = &quot;</span> + hgetAll);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>释放资源</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-2-Jedis连接池">3.2 Jedis连接池</h2><p><strong>Jedis本身是线程不安全的</strong>，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用<strong>Jedis连接池代替Jedis的直连方式</strong></p><p>有关池化思想，并不仅仅是这里会使用，很多地方都有，比如说我们的数据库连接池，比如我们tomcat中的线程池，这些都是<code>池化思想</code>​的体现。</p><h3 id="3-2-1-创建Jedis的连接池">3.2.1 创建Jedis的连接池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 配置连接池</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">poolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        poolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        poolConfig.setMaxWaitMillis(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 创建连接池对象</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(poolConfig , <span class="string">&quot;192.168.146.129&quot;</span> , <span class="number">6379</span> , <span class="number">1000</span> , <span class="string">&quot;north&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码说明：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>1） JedisConnectionFacotry：工厂设计模式是实际开发中非常常用的一种设计模式，我们可以使用工厂，去降低代的耦合，比如Spring中的Bean的创建，就用到了工厂设计模式</p></li><li class="lvl-2"><p>2）静态代码块：随着类的加载而加载，确保只能执行一次，我们在加载当前工厂类的时候，就可以执行static的操作完成对 连接池的初始化</p></li><li class="lvl-2"><p>3）最后提供返回连接池中连接的方法.</p></li></ul><p>‍</p><p><strong>对于这段代码的理解：</strong></p><p>这段代码是一个用于连接 Redis 数据库的 Java 类 <code>JedisConnectionFactory</code>​。它使用了 Jedis 库，这是一个流行的 Redis 客户端库，用于在 Java 程序中与 Redis 服务器进行通信。</p><p>让我解释一下这段代码的主要部分：</p><ol><li class="lvl-3"><p><code>public class JedisConnectionFactory</code>: 这是一个公共类的定义，类名为 <code>JedisConnectionFactory</code>​，用于创建 Redis 连接工厂。</p></li><li class="lvl-3"><p><code>private static final JedisPool jedisPool;</code>: 这是一个私有的静态常量，用于保存连接到 Redis 服务器的连接池实例。连接池是一种管理和维护与 Redis 服务器连接的机制，可以提高连接的复用和性能。</p></li><li class="lvl-3"><p><code>static &#123; ... &#125;</code>: 这是一个静态代码块，在类被加载时执行。在这个代码块中，你可以看到配置了一个 Jedis 连接池。以下是对配置选项的解释：</p><ul class="lvl-2"><li class="lvl-6"><code>JedisPoolConfig poolConfig = new JedisPoolConfig();</code>: 创建一个 Jedis 连接池的配置对象。</li><li class="lvl-6"><code>poolConfig.setMaxTotal(8);</code>: 设置连接池中最大连接数为 8。</li><li class="lvl-6"><code>poolConfig.setMaxIdle(8);</code>: 设置连接池中最大空闲连接数为 8。</li><li class="lvl-6"><code>poolConfig.setMinIdle(0);</code>: 设置连接池中最小空闲连接数为 0。</li><li class="lvl-6"><code>poolConfig.setMaxWaitMillis(1000);</code>: 设置从连接池获取连接的最大等待时间为 1000 毫秒。</li></ul><p>然后，使用这些配置项创建一个 Jedis 连接池实例：</p><ul class="lvl-2"><li class="lvl-6"><p><code>jedisPool = new JedisPool(poolConfig, &quot;192.168.146.129&quot;, 6379, 1000, &quot;north&quot;);</code>​</p><ul class="lvl-4"><li class="lvl-8"><code>poolConfig</code>: 使用之前配置的连接池配置对象。</li><li class="lvl-8"><code>&quot;192.168.146.129&quot;</code>: Redis 服务器的 IP 地址。</li><li class="lvl-8"><code>6379</code>: Redis 服务器的端口号。</li><li class="lvl-8"><code>1000</code>: 连接超时时间（毫秒）。</li><li class="lvl-8"><code>&quot;north&quot;</code>: 连接到 Redis 服务器的密码（如果有密码保护）。</li></ul></li></ul></li><li class="lvl-3"><p><code>public static Jedis getJedis()</code>: 这是一个公共静态方法，用于从连接池中获取一个可用的 Redis 连接（Jedis 对象）。通过调用 <code>jedisPool.getResource()</code>​ 来获取连接。</p></li></ol><p>这段代码的作用是创建一个连接到 Redis 数据库的连接池，以便在应用程序中可以轻松地获取和管理与 Redis 服务器的连接。通过调用 <code>getJedis()</code>​ 方法，你可以获取一个可用的 Redis 连接并开始执行对 Redis 的操作。要确保在使用完连接后，将其释放回连接池以供其他地方使用。</p><h3 id="3-2-2-改造原始代码">3.2.2 改造原始代码</h3><p><strong>代码说明:</strong></p><p>1.在我们完成了使用工厂设计模式来完成代码的编写之后，我们在获得连接时，就可以通过工厂来获得。</p><p>，而不用直接去new对象，降低耦合，并且使用的还是连接池对象。</p><p>2.当我们使用了连接池后，当我们关闭连接其实并不是关闭，而是将Jedis还回连接池的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@BeforeEach</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">//建立连接</span></span><br><span class="line">     <span class="comment">/*jedis = new Jedis(&quot;127.0.0.1&quot;,6379);*/</span></span><br><span class="line">     jedis = JedisConnectionFacotry.getJedis();</span><br><span class="line">      <span class="comment">//选择库</span></span><br><span class="line">     jedis.select(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</span><br><span class="line">         jedis.close();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1>4. Redis的Java客户端-SpringDataRedis</h1><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul class="lvl-0"><li class="lvl-2"><p>提供了对不同Redis客户端的整合（Lettuce和Jedis）</p></li><li class="lvl-2"><p>提供了RedisTemplate统一API来操作Redis</p></li><li class="lvl-2"><p>支持Redis的发布订阅模型</p></li><li class="lvl-2"><p>支持Redis哨兵和Redis集群</p></li><li class="lvl-2"><p>支持基于Lettuce的响应式编程</p></li><li class="lvl-2"><p>支持基于JDK.JSON.字符串.Spring对象的数据序列化及反序列化</p></li><li class="lvl-2"><p>支持基于Redis的JDKCollection实现</p></li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102328570-539085503-20231006090927-v8ynnm1.png" alt="image">​</p><p>‍</p><h2 id="4-1-快速入门">4.1 快速入门</h2><ol><li class="lvl-3"><p>导入坐标</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--common-pool--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--Jackson依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>配置文件</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span>  <span class="comment">#最大连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span>   <span class="comment">#最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>   <span class="comment">#最小空闲连接</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">100ms</span> <span class="comment">#连接等待时间</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>test</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 写入一条String数据</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span> , <span class="string">&quot;徐凤年&quot;</span>);</span><br><span class="line">    <span class="comment">// 取出数据</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user:100&quot;</span> , <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李七夜&quot;</span> , <span class="number">19</span>));</span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">o</span> <span class="operator">=</span> (User) redisTemplate.opsForValue().get(<span class="string">&quot;user:100&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;o = &quot;</span> + o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>‍</p><p><strong>贴心小提示：SpringDataJpa使用起来非常简单，记住如下几个步骤即可</strong></p><p>SpringDataRedis的使用步骤：</p><ul class="lvl-0"><li class="lvl-2"><p>引入spring-boot-starter-data-redis依赖</p></li><li class="lvl-2"><p>在application.yml配置Redis信息</p></li><li class="lvl-2"><p>注入RedisTemplate</p></li></ul><h2 id="4-2-数据序列化器">4.2 数据序列化器</h2><p>RedisTemplate可以接收任意Object作为值写入Redis：</p><p>只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的：</p><p>缺点：</p><ul class="lvl-0"><li class="lvl-2"><p>可读性差</p></li><li class="lvl-2"><p>内存占用较大</p></li></ul><p>我们可以自定义RedisTemplate的序列化方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 创建JSON序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// 设置Key的序列化</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置Value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里采用了JSON序列化来代替默认的JDK序列化方式。最终结果如图</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.north.pojo.User&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李七夜&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。</p><h2 id="4-3-StringRedisTemplate">4.3 StringRedisTemplate</h2><p>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.north.pojo.User&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李七夜&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>为了在反序列化时知道对象的类型，<code>JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销</code>​。</p><p>为了减少内存的消耗，我们可以采用<code>手动序列化的方式</code>​，换句话说，就是<code>不借助默认的序列化器，而是我们自己来控制序列化的动作</code>​，同时，我们只<strong>采用String的序列化器</strong>，这样，在存储value时，我们就不需要在内存中就不用多存储数据，从而节约我们的内存空间</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/net-img-2942345-20230829102329214-631754004-20231006090927-73zp0qe.png" alt="image">​</p><p>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</p><p>‍</p><p><strong>手动序列化实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;String , Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">    <span class="comment">// 创建RedisTemplate 对象</span></span><br><span class="line">    RedisTemplate&lt;String , Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置连接工厂</span></span><br><span class="line">    redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置序列化工具</span></span><br><span class="line">    <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key 和 hashKey 采用String序列化</span></span><br><span class="line">    redisTemplate.setKeySerializer(jsonRedisSerializer);</span><br><span class="line">    redisTemplate.setHashKeySerializer(jsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// value 和 hashValue 采用JSON序列化</span></span><br><span class="line">    redisTemplate.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">    redisTemplate.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们再来看一看存储的数据，小伙伴们就会发现那个class数据已经不在了，节约了我们的空间~</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;徐凤年&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">22</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>‍</p><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON 工具</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStringTemplate</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">// 准备数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;徐凤年&quot;</span> , <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入一条数据到redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:200&quot;</span> , json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:200&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.readValue(result, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user1 = &quot;</span> + user1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后小总结：</p><p>RedisTemplate的两种序列化实践方案：</p><ul class="lvl-0"><li class="lvl-2"><p>方案一：</p><ul class="lvl-2"><li class="lvl-4">自定义RedisTemplate</li><li class="lvl-4">修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li></ul></li><li class="lvl-2"><p>方案二：</p><ul class="lvl-2"><li class="lvl-4">使用StringRedisTemplate</li><li class="lvl-4">写入Redis时，手动把对象序列化为JSON</li><li class="lvl-4">读取Redis时，手动把读取到的JSON反序列化为对象</li></ul></li></ul><h2 id="4-4-Hash结构操作">4.4 Hash结构操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;虎哥&quot;</span>);</span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object, Object&gt; entries = stringRedisTemplate.opsForHash().entries(<span class="string">&quot;user:400&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;entries = &quot;</span> + entries);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天空之城</title>
      <link href="/posts/29f0725f.html"/>
      <url>/posts/29f0725f.html</url>
      
        <content type="html"><![CDATA[<p>题记-我们都是昭阳，生命中却没有米彩、乐瑶、简薇。</p><p>其实题记里没打，怕破坏氛围，我还想打上甚至没有罗本、CC甚至小五等人。就像作者微博里说的，你们有随叫随到陪你喝酒的人么，至少我没有。作者以第一人称的写作手法，很容易让我们带入到昭阳的情感中去，就像我题记说的，我们都是昭阳，生命中却没有米彩、乐瑶、简薇这种视我们为生命的女人。可人生是一道单选题，最后昭阳选择了米彩，辜负了乐瑶和简薇。我没有，你有，却辜负了，这大概就是我们最意难平的地方。</p><p>一乐瑶。</p><p>乐瑶是这部小说最低开高走的一个角色，也是最悲情的角色。(之所以不叫她肖瑶，是因为乐瑶才是和昭阳鬼混两年的小透明，才是把昭阳当成全部世界的一个小麻烦。改名我觉得更多的意思是要和过去那个傻傻爱着昭阳的乐瑶告别的)。乐瑶也是我最喜欢的角色。我多希望第一章乐瑶生下孩子放弃当大腕的梦，昭阳为了孩子和她在一起，故事结束。那时候米彩没有和昭阳纠缠在一起，以后和小海龟在一起，接手母亲米国生意，平淡的过一辈子，也不错。薇薇简可能就悲剧些，不过讲了那么多故事，最后结局时薇薇简不也一样远走米国了么。从第一3章开始薇薇简就已经受伤了，这个没办法，那个烈火一样的女子不肯放过自己。好了扯远了，回来说乐瑶。我之所以说乐瑶是最悲情的，不仅仅是她从来没得到昭阳的爱，还被昭阳喝多了睡了(可能一边睡一边还喊着简薇)，还中奖了，还打胎了。而是作者可能从一开始没想写这么一个角色，开篇乐瑶是以一个混吧的炮友的形象出现的，读完全篇回头再看昭阳开篇对她有多污蔑，我就觉得有多割裂，生命中那么重要的红颜知己居然以炮友形象出现。其实开篇这里出现几个逻辑BUG，开篇昭阳对乐瑶的感觉是炮友，是因为长的好看睡的，一口一个以后别联系了。后来呢，把乐瑶当妹妹，抛弃订婚对象，伤父母的心也要回来帮她，还为她借了100W。试问大家你们为了炮友能做到这地步么。昭阳对乐瑶的感情应该是开篇之前两年鬼混养成的，而不是以打胎为起点。还有说方圆是这座城市唯一的朋友。那罗本和CC就不乐意了，昭阳，你忘了桥洞子唱歌的罗本了么。你忘了无数次照顾喝多的你的CC了么。好了又扯远了，继续说乐瑶。乐瑶可能是全篇活的最明白的一个人了，只有她是生活中的高手，星途她很坦荡，就算之后嫁给了曹公子也没过的不好，她之所以在感情中没做好高手，只是她自己一直不愿意走出来而已，换句话说是对昭阳爱的深沉。乐瑶这个角色丰满实在一次次加戏中体现的，比如被昭阳怂恿偷烟、视罗本为哥哥，爱上昭阳等等。不管如何，作者还是塑造出这么一个让我们又爱又心疼的古怪精灵的乐瑶，视昭阳为全部世界的乐瑶。我猜乐瑶不让昭阳去她的婚礼现场可能是怕她忍不住冲下去求婚昭阳吧。还有拍的那个电影，怀里男主的孩子死了，最后活在男主心里，拍摄完乐瑶那场大哭，我想乐瑶是愿意这不是电影而是生活吧。作者总说米彩不能被辜负是可怜的孩子，母亲抛弃，父亲去世。可乐瑶呢，父亲抛弃，母亲后文提过也成家了，没人疼没人爱，只有乐瑶一个人孤苦伶仃的生活，还被只想着红的前男友抛弃，谁又不是不能辜负的小可怜呢？只许她房客大小姐可怜么，一遍遍的提，又有谁想到我们一直保持微笑的乐瑶有多苦。</p><p>如果留下孩子，如果放弃大腕的梦，如果相信昭阳能养得起她们的孩子，如果早一些表达心意，有太多的如果。那样乐瑶就会是最幸福的人。也不睡着的时候假装死了几回了。意难平。</p><p>二、简薇</p><p>薇薇简是一个纯粹的女人，是火一样的女人。是有着强烈精神洁癖的女人。她说她的人生不可能完美了，她就向她的车一样带着伤痕，提醒自己，惩罚自己。这里先说她为什么和昭阳分手。其实全篇作者给了很多暗示，方圆出轨时候扎手，薇薇简无动于衷，并且说她手上也有伤痕。她和昭阳说过我从没想过要背叛你，还有一段薇薇简做梦时候还喊她精神没有背叛(大概是这个意思吧)，有一段薇薇简和向晨争吵，突然说要我把事情都说出来么，向晨立马怂了，还有一段昭阳偷看向晨简薇的短信是这样的(“向晨，你很恶心，你知道吗？就冲你对我和昭阳做的一切，你就恶心！…我已经是这个样子了，没有什么是豁不出去的，你最好从我的视线里滚的越远越好。”)最后银行经理说方圆说过向晨对不起薇薇简和昭阳。还有一段薇薇简说昭阳果然和别的女的鬼混，还说她在美国多么多么辛苦。还有向晨出国一段时间。那么答案很明显，向晨出国陪薇薇简去了，造谣昭阳出轨，灌醉也好下Y也好怎么也好，睡了薇薇简一次(我觉得向晨可能就睡那么一次，之后薇薇简同意和向晨交往也是薇薇简亲眼看见昭阳说米彩是自己女朋友之后，同昭阳一样不想表现太不堪而做出的举动，她心里直到结局也一直爱着昭阳，这样一个强烈精神洁癖的女人怎么会和向晨同居。向晨机关算尽也没能得到简薇，最后才和简薇分手找那个谁)。醒来的薇薇简觉得自己对不起昭阳(或者自己精神中完美的爱情)割腕自杀，虽然救过来了但是她不肯原谅自己和昭阳分手了。这也是故事的开篇。其实薇薇简我觉得是除了乐瑶第二苦情的。那么完美刚烈的一个女子，却遇到向晨这样的小人。错过了与昭阳的完美爱情。她穿着一件白色T恤，惊艳了我一整个夏天。这是昭阳对她最后的回忆，却终究是错过了。我看完小说逛了逛作者微博还有知乎关于这本小说的评价，不少人说简薇能与昭阳一起死，淋汽油和跳护城河那两段。其实我想说乐瑶和米彩也一定做得到。她们对昭阳的爱完全不逊色与薇薇简，乐瑶电影里的坟墓，莫子石说漏了说米彩不顾自己的性命，也无怨无悔(我觉得这段应该是米彩生宝宝难产，不顾自己性命也想给昭阳一个孩子)。但是这种镜头一定要给简薇。她是那么刚烈，她不肯原谅自己的过错，活着每一天都是对自己的折磨，那么死了，或者为了昭阳死、陪着昭阳死，对她来说都是一种完美的结局，只是作者也心疼这个强颜欢笑的女子，最后也给了她一个还算美好的结局。</p><p>如果没有父母反对，如果没有向晨这个小人，如果薇薇简能原谅自己和昭阳好好沟通，如果方圆婚礼昭阳没说米彩是自己女友。有太多的如果，那样薇薇简也会是最幸福的女人。也不用最后远走米国了。意难平。</p><p>三、米彩</p><p>房客大小姐做为天命女主角应该是最幸福的一个了，这个不用意难平了。从最初打打闹闹，到爱上昭阳，再到各种矛盾，再到落魄回徐州结婚(话说这段真的为了惨而惨啊，有那么穷么，投资那花店多钱呢。突然就几万都没有了，作者也真是的。)再到婚礼中昭阳跑了去看前女友，直到最后有了孩子。挺好的，一路风风雨雨，结局是美好的就好。说个有意思的事，我看到米彩第一次和昭阳在一起的时候我发现进度才20%，我就觉得事情没那么简单。人生看小说10多年第一次直接去看了结局，我当时想结局昭阳和米彩在一起我就继续看，不在一起我就不看了。还好结局是好的，我才继续看。可见作者这小说有多虐。有很多人说米彩不爱昭阳，她不爱昭阳会顶着所有人反对和昭阳在一起么，会为了她吃那么多醋么，会和昭阳回徐州做一个小助理么。平平淡淡是昭阳的梦想不是米彩的。大小姐角色之所以让人喜欢，是她完美的出场，完美的形象，作者把她描写的真就像不问俗世的仙子。她没有男女感情经理，没喜欢过除了昭阳以外的别人，所以对感情的表达上显得很生疏，很多时候没有乐瑶的无微不至。但这也是让我们着迷的地方，一个不理尘世的仙子突然为了你下凡笨手笨脚的适应你的一切，想想就很梦幻。所以大小姐不能辜负，大小姐众万所归和昭阳在一起了。(大小姐卑就惹人心疼。乐瑶和薇薇简就是活该，我又酸了不好意思)。</p><p>四年前你是我的房客，四年后你是我的妻子。祝渣阳和房客大小姐幸福吧。</p><p>四，方圆和颜妍夫妇</p><p>方圆做为本书最高开低走的角色，我觉得最后洗白也没什么作用。简薇和昭阳分手方圆是罪魁祸首之一，偷拍昭阳给向晨，让向晨持续不断的给简薇看照片。还反过头来有模有样的说昭阳过的不好不上进。我呸，恶心。昭阳做为男主，如果没和简薇分手，以书里昭阳的超能力，你方圆是个屁啊。至于最后的背叛米彩，我觉得更像是小丑的闹剧。另外在颜妍和方圆离婚之后有几次和昭阳欲言又止的对话中，应该是她也知道方圆的所作所为。还拿昭阳当弟弟，拿简薇当闺蜜。我也只能是呵呵了。好了就这样吧，配角而已不愿意多说，就像向晨我根本不写他，他不配。</p><p>五、罗本和CC以及女教师</p><p>这就是一场错误的典范，罗本选择和前任结果错过了。女教师选择和前任，最后也回小山村了。所以这里告诉我们，不能和前任和好，要向前看。最后罗本和女歌手，CC闪婚了，女教师陪走了一个之后找个二婚的教师。无关爱情，却也是不错的结局，不是么。就像是板爹也是有故事的人，最后选择了昭阳妈妈，过的不也一样挺好么。爱情是爱情，生活是生活。</p><p>六、昭阳</p><p>其实我们就是一个又一个的昭阳，虽然没有他有超能力，让那么多女性爱上他，让钱来的那么容易。可是我们也是苦海中沉浮的人。不说了，读过所有鸡汤也不一定过好一生。如人饮水，冷暖自知。说小说里人物行，劝大家我张不开嘴 说点拜年话吧，祝大家都能过的幸福。</p><p>最后，附上一首辛弃疾的词，自己理解。</p><p>丑奴儿·书博山道中壁 [宋]辛弃疾</p><p>少年不识愁滋味，爱上层楼。爱上层楼，为赋新 词强说愁。</p><p>而今识尽愁滋味，欲说还休。欲说还休，却道天 凉好个秋。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我在人间凑数的日子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web期末大作业</title>
      <link href="/posts/5596f2.html"/>
      <url>/posts/5596f2.html</url>
      
        <content type="html"><![CDATA[<h2 id="首页展示">首页展示</h2><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115054-wkmufes.png" alt="image">​​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115153-xbmfrtr.png" alt="image">​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115313-k8u9gdp.png" alt="image">​​​​</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115219-j69g751.png" alt="image">​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115233-ryw65qz.png" alt="image">​<img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20231118115249-vvr26cq.png" alt="image">​​​</p><p>‍</p><h2 id="灵感来源">灵感来源</h2><blockquote><p>QQ音乐 ， Listen1</p></blockquote><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验九 图的创建与遍历</title>
      <link href="/posts/8712b9be.html"/>
      <url>/posts/8712b9be.html</url>
      
        <content type="html"><![CDATA[<p><strong>实验时间：</strong> 第11周</p><p><strong>实验目的：</strong> 掌握图的邻接矩阵、邻接表两种存储结构，能够实现在任意一种存储结构上的创建和遍历两种基本操作</p><p><strong>实验要求：</strong></p><p>1、认真阅读和掌握教材上和本实验相关内容和算法（见P161~170）。</p><p>2、上机将图的任意一种存储表示的创建和遍历（DFS和BFS至少实现一种）算法实现。</p><p>3、实现下面实验内容要求的功能，并能够进行简单的输入输出验证。</p><p><strong>实验内容：</strong></p><p>1、 图的创建部分</p><p>编程实现图的任意一种存储表示的创建算法，要求能够进行简单的输入输出验证。</p><p>2、 图的遍历操作部分</p><p>编程实现图的遍历操作，至少实现图的深度优先搜索和广度优先搜索两种遍历算法中的一种，要求能够进行简单的输入输出验证。</p><h2 id="图的创建与遍历（使用邻接矩阵）">图的创建与遍历（使用邻接矩阵）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTICES 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Representation of Graph using Adjacency Matrix</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> V; <span class="comment">// Number of vertices</span></span><br><span class="line">    <span class="type">int</span> **matrix; <span class="comment">// Adjacency matrix</span></span><br><span class="line">&#125; GraphAdjMatrix;</span><br><span class="line"></span><br><span class="line">GraphAdjMatrix* <span class="title function_">createGraphAdjMatrix</span><span class="params">(<span class="type">int</span> vertices)</span> &#123;</span><br><span class="line">    GraphAdjMatrix* graph = (GraphAdjMatrix*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphAdjMatrix));</span><br><span class="line">    graph-&gt;V = vertices;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate memory for adjacency matrix</span></span><br><span class="line">    graph-&gt;matrix = (<span class="type">int</span>**)<span class="built_in">malloc</span>(vertices * <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertices; ++i) &#123;</span><br><span class="line">        graph-&gt;matrix[i] = (<span class="type">int</span>*)<span class="built_in">calloc</span>(vertices, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addEdgeAdjMatrix</span><span class="params">(GraphAdjMatrix* graph, <span class="type">int</span> src, <span class="type">int</span> dest)</span> &#123;</span><br><span class="line">    <span class="comment">// Assuming it&#x27;s an undirected graph, assigning 1 for both directions</span></span><br><span class="line">    graph-&gt;matrix[src][dest] = <span class="number">1</span>;</span><br><span class="line">    graph-&gt;matrix[dest][src] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraphAdjMatrix</span><span class="params">(GraphAdjMatrix* graph)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Adjacency Matrix:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; graph-&gt;V; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; graph-&gt;V; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, graph-&gt;matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeGraphAdjMatrix</span><span class="params">(GraphAdjMatrix* graph)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; graph-&gt;V; ++i) &#123;</span><br><span class="line">        <span class="built_in">free</span>(graph-&gt;matrix[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(graph-&gt;matrix);</span><br><span class="line">    <span class="built_in">free</span>(graph);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">4</span>; <span class="comment">// Number of vertices</span></span><br><span class="line">    GraphAdjMatrix* g = createGraphAdjMatrix(V);</span><br><span class="line"></span><br><span class="line">    addEdgeAdjMatrix(g, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    addEdgeAdjMatrix(g, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    addEdgeAdjMatrix(g, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    addEdgeAdjMatrix(g, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    printGraphAdjMatrix(g);</span><br><span class="line"></span><br><span class="line">    freeGraphAdjMatrix(g);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图的创建与遍历（使用邻接表）">图的创建与遍历（使用邻接表）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Node to store adjacent vertices in Adjacency List</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> dest;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adjacency List representation of Graph</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> V; <span class="comment">// Number of vertices</span></span><br><span class="line">    Node** <span class="built_in">array</span>; <span class="comment">// Array of adjacency lists</span></span><br><span class="line">&#125; GraphAdjList;</span><br><span class="line"></span><br><span class="line">Node* <span class="title function_">createNode</span><span class="params">(<span class="type">int</span> dest)</span> &#123;</span><br><span class="line">    Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;dest = dest;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GraphAdjList* <span class="title function_">createGraphAdjList</span><span class="params">(<span class="type">int</span> vertices)</span> &#123;</span><br><span class="line">    GraphAdjList* graph = (GraphAdjList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphAdjList));</span><br><span class="line">    graph-&gt;V = vertices;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create an array of adjacency lists</span></span><br><span class="line">    graph-&gt;<span class="built_in">array</span> = (Node**)<span class="built_in">malloc</span>(vertices * <span class="keyword">sizeof</span>(Node*));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertices; ++i) &#123;</span><br><span class="line">        graph-&gt;<span class="built_in">array</span>[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addEdgeAdjList</span><span class="params">(GraphAdjList* graph, <span class="type">int</span> src, <span class="type">int</span> dest)</span> &#123;</span><br><span class="line">    <span class="comment">// Add edge from src to dest</span></span><br><span class="line">    Node* newNode = createNode(dest);</span><br><span class="line">    newNode-&gt;next = graph-&gt;<span class="built_in">array</span>[src];</span><br><span class="line">    graph-&gt;<span class="built_in">array</span>[src] = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For undirected graph, uncomment the lines below</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    newNode = createNode(src);</span></span><br><span class="line"><span class="comment">    newNode-&gt;next = graph-&gt;array[dest];</span></span><br><span class="line"><span class="comment">    graph-&gt;array[dest] = newNode;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraphAdjList</span><span class="params">(GraphAdjList* graph)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Adjacency List:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; graph-&gt;V; ++i) &#123;</span><br><span class="line">        Node* temp = graph-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Adjacency list of vertex %d: &quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, temp-&gt;dest);</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeGraphAdjList</span><span class="params">(GraphAdjList* graph)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; graph-&gt;V; ++i) &#123;</span><br><span class="line">        Node* current = graph-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            Node* next = current-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(current);</span><br><span class="line">            current = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(graph-&gt;<span class="built_in">array</span>);</span><br><span class="line">    <span class="built_in">free</span>(graph);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">4</span>; <span class="comment">// Number of vertices</span></span><br><span class="line">    GraphAdjList* g = createGraphAdjList(V);</span><br><span class="line"></span><br><span class="line">    addEdgeAdjList(g, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    addEdgeAdjList(g, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    addEdgeAdjList(g, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    addEdgeAdjList(g, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    printGraphAdjList(g);</span><br><span class="line"></span><br><span class="line">    freeGraphAdjList(g);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构综合实验</title>
      <link href="/posts/b42f7f50.html"/>
      <url>/posts/b42f7f50.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用C语言进行实现 ， 程序实验报告待完成！</p></blockquote><h1>1.  <strong>(其它)</strong> 请同学们完成综合设计性实验内容，题目可以从以下选择。（二选一）</h1><p>要求：将以上题目完成并填写综合设计性实验报告，报告最后附加上源代码。完成后将报告按照正确的命名格式上传</p><h2 id="第一题">第一题</h2><p>‍</p><blockquote><p>输入n个字母及其权值，对其进行哈夫曼编码。</p></blockquote><p>‍</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_NODES 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结点结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> letter; <span class="comment">// 字母</span></span><br><span class="line">    <span class="type">int</span> freq;    <span class="comment">// 频率</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">left</span>, *<span class="title">right</span>;</span> <span class="comment">// 左右子节点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈夫曼树的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">root</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新结点</span></span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">newNode</span><span class="params">(<span class="type">char</span> letter, <span class="type">int</span> freq)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">node</span> =</span> (<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    node-&gt;letter = letter;</span><br><span class="line">    node-&gt;freq = freq;</span><br><span class="line">    node-&gt;left = node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建哈夫曼树</span></span><br><span class="line"><span class="keyword">struct</span> HuffmanTree* <span class="title function_">buildHuffmanTree</span><span class="params">(<span class="type">char</span> letters[], <span class="type">int</span> freqs[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建初始节点列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">nodes</span>[<span class="title">MAX_NODES</span>];</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        nodes[i] = newNode(letters[i], freqs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建哈夫曼树</span></span><br><span class="line">    <span class="keyword">while</span> (size &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> min1 = <span class="number">0</span>, min2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出频率最小的两个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodes[i]-&gt;freq &lt; nodes[min1]-&gt;freq) &#123;</span><br><span class="line">                min2 = min1;</span><br><span class="line">                min1 = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodes[i]-&gt;freq &lt; nodes[min2]-&gt;freq) &#123;</span><br><span class="line">                min2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新节点作为父节点</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">mergedNode</span> =</span> newNode(<span class="string">&#x27;$&#x27;</span>, nodes[min1]-&gt;freq + nodes[min2]-&gt;freq);</span><br><span class="line">        mergedNode-&gt;left = nodes[min1];</span><br><span class="line">        mergedNode-&gt;right = nodes[min2];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将已经处理过的节点移至列表末尾</span></span><br><span class="line">        nodes[min1] = mergedNode;</span><br><span class="line">        nodes[min2] = nodes[size - <span class="number">1</span>];</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建哈夫曼树并返回</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span>* <span class="title">tree</span> =</span> (<span class="keyword">struct</span> HuffmanTree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> HuffmanTree));</span><br><span class="line">    tree-&gt;root = nodes[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印哈夫曼编码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printCodes</span><span class="params">(<span class="keyword">struct</span> Node* root, <span class="type">int</span> arr[], <span class="type">int</span> top)</span> &#123;</span><br><span class="line">    <span class="comment">// 达到叶子节点后打印编码</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">        arr[top] = <span class="number">0</span>;</span><br><span class="line">        printCodes(root-&gt;left, arr, top + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">        arr[top] = <span class="number">1</span>;</span><br><span class="line">        printCodes(root-&gt;right, arr, top + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(root-&gt;left) &amp;&amp; !(root-&gt;right)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c: &quot;</span>, root-&gt;letter);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; top; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符的个数: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> letters[MAX_NODES];</span><br><span class="line">    <span class="type">int</span> freqs[MAX_NODES];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符和频率:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot; %c %d&quot;</span>, &amp;letters[i], &amp;freqs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span>* <span class="title">tree</span> =</span> buildHuffmanTree(letters, freqs, n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> codes[MAX_NODES], top = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Huffman Codes:\n&quot;</span>);</span><br><span class="line">    printCodes(tree-&gt;root, codes, top);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>运行结果演示：</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/north_img/img/image-20231120233318-r9z7o78.png" alt="image">​</p><h2 id="第二题">第二题</h2><p>‍</p><blockquote><p>用连通网中的顶点表示城市，边上的权值表示在这两个两个城市建立通信所花费的代价。求要连通所有的城市所花费的最小代价，要求构造最小生成树。</p></blockquote><p>‍</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTICES 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> graph[MAX_VERTICES][MAX_VERTICES];</span><br><span class="line"><span class="type">int</span> numVertices;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">minKey</span><span class="params">(<span class="type">int</span> key[], <span class="type">bool</span> mstSet[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> min = INT_MAX, min_index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; numVertices; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mstSet[v] == <span class="literal">false</span> &amp;&amp; key[v] &lt; min) &#123;</span><br><span class="line">            min = key[v];</span><br><span class="line">            min_index = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printMST</span><span class="params">(<span class="type">int</span> parent[])</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Edge \tWeight\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numVertices; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d - %d \t%d \n&quot;</span>, parent[i], i, graph[i][parent[i]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">primMST</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> parent[MAX_VERTICES];</span><br><span class="line">    <span class="type">int</span> key[MAX_VERTICES];</span><br><span class="line">    <span class="type">bool</span> mstSet[MAX_VERTICES];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertices; i++) &#123;</span><br><span class="line">        key[i] = INT_MAX;</span><br><span class="line">        mstSet[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    key[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    parent[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; numVertices - <span class="number">1</span>; count++) &#123;</span><br><span class="line">        <span class="type">int</span> u = minKey(key, mstSet);</span><br><span class="line">        mstSet[u] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; numVertices; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (graph[u][v] &amp;&amp; mstSet[v] == <span class="literal">false</span> &amp;&amp; graph[u][v] &lt; key[v]) &#123;</span><br><span class="line">                parent[v] = u;</span><br><span class="line">                key[v] = graph[u][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printMST(parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入城市的个数: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;numVertices);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入城市的成本矩阵:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertices; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numVertices; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;graph[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小生成的树为:\n&quot;</span>);</span><br><span class="line">    primMST();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果演示</p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/north_img/img/image-20231120234753-vyoc9cw.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构作业 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
